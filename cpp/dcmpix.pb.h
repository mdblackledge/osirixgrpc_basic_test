// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcmpix.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dcmpix_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dcmpix_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "utilities.pb.h"
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dcmpix_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dcmpix_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dcmpix_2eproto;
namespace osirixgrpc {
class DCMPixComputeROIRequest;
class DCMPixComputeROIRequestDefaultTypeInternal;
extern DCMPixComputeROIRequestDefaultTypeInternal _DCMPixComputeROIRequest_default_instance_;
class DCMPixComputeROIResponse;
class DCMPixComputeROIResponseDefaultTypeInternal;
extern DCMPixComputeROIResponseDefaultTypeInternal _DCMPixComputeROIResponse_default_instance_;
class DCMPixConvertToBWRequest;
class DCMPixConvertToBWRequestDefaultTypeInternal;
extern DCMPixConvertToBWRequestDefaultTypeInternal _DCMPixConvertToBWRequest_default_instance_;
class DCMPixConvertToRGBRequest;
class DCMPixConvertToRGBRequestDefaultTypeInternal;
extern DCMPixConvertToRGBRequestDefaultTypeInternal _DCMPixConvertToRGBRequest_default_instance_;
class DCMPixDicomImageResponse;
class DCMPixDicomImageResponseDefaultTypeInternal;
extern DCMPixDicomImageResponseDefaultTypeInternal _DCMPixDicomImageResponse_default_instance_;
class DCMPixDicomSeriesResponse;
class DCMPixDicomSeriesResponseDefaultTypeInternal;
extern DCMPixDicomSeriesResponseDefaultTypeInternal _DCMPixDicomSeriesResponse_default_instance_;
class DCMPixDicomStudyResponse;
class DCMPixDicomStudyResponseDefaultTypeInternal;
extern DCMPixDicomStudyResponseDefaultTypeInternal _DCMPixDicomStudyResponse_default_instance_;
class DCMPixGetMapFromROIRequest;
class DCMPixGetMapFromROIRequestDefaultTypeInternal;
extern DCMPixGetMapFromROIRequestDefaultTypeInternal _DCMPixGetMapFromROIRequest_default_instance_;
class DCMPixGetMapFromROIResponse;
class DCMPixGetMapFromROIResponseDefaultTypeInternal;
extern DCMPixGetMapFromROIResponseDefaultTypeInternal _DCMPixGetMapFromROIResponse_default_instance_;
class DCMPixImageResponse;
class DCMPixImageResponseDefaultTypeInternal;
extern DCMPixImageResponseDefaultTypeInternal _DCMPixImageResponse_default_instance_;
class DCMPixIsRGBResponse;
class DCMPixIsRGBResponseDefaultTypeInternal;
extern DCMPixIsRGBResponseDefaultTypeInternal _DCMPixIsRGBResponse_default_instance_;
class DCMPixOrientationResponse;
class DCMPixOrientationResponseDefaultTypeInternal;
extern DCMPixOrientationResponseDefaultTypeInternal _DCMPixOrientationResponse_default_instance_;
class DCMPixOriginResponse;
class DCMPixOriginResponseDefaultTypeInternal;
extern DCMPixOriginResponseDefaultTypeInternal _DCMPixOriginResponse_default_instance_;
class DCMPixROIValuesRequest;
class DCMPixROIValuesRequestDefaultTypeInternal;
extern DCMPixROIValuesRequestDefaultTypeInternal _DCMPixROIValuesRequest_default_instance_;
class DCMPixROIValuesResponse;
class DCMPixROIValuesResponseDefaultTypeInternal;
extern DCMPixROIValuesResponseDefaultTypeInternal _DCMPixROIValuesResponse_default_instance_;
class DCMPixSetImageRequest;
class DCMPixSetImageRequestDefaultTypeInternal;
extern DCMPixSetImageRequestDefaultTypeInternal _DCMPixSetImageRequest_default_instance_;
class DCMPixShapeResponse;
class DCMPixShapeResponseDefaultTypeInternal;
extern DCMPixShapeResponseDefaultTypeInternal _DCMPixShapeResponse_default_instance_;
class DCMPixSliceLocationResponse;
class DCMPixSliceLocationResponseDefaultTypeInternal;
extern DCMPixSliceLocationResponseDefaultTypeInternal _DCMPixSliceLocationResponse_default_instance_;
class DCMPixSourceFileResponse;
class DCMPixSourceFileResponseDefaultTypeInternal;
extern DCMPixSourceFileResponseDefaultTypeInternal _DCMPixSourceFileResponse_default_instance_;
class DCMPixSpacingResponse;
class DCMPixSpacingResponseDefaultTypeInternal;
extern DCMPixSpacingResponseDefaultTypeInternal _DCMPixSpacingResponse_default_instance_;
}  // namespace osirixgrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::osirixgrpc::DCMPixComputeROIRequest* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixComputeROIRequest>(Arena*);
template<> ::osirixgrpc::DCMPixComputeROIResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixComputeROIResponse>(Arena*);
template<> ::osirixgrpc::DCMPixConvertToBWRequest* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixConvertToBWRequest>(Arena*);
template<> ::osirixgrpc::DCMPixConvertToRGBRequest* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixConvertToRGBRequest>(Arena*);
template<> ::osirixgrpc::DCMPixDicomImageResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixDicomImageResponse>(Arena*);
template<> ::osirixgrpc::DCMPixDicomSeriesResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixDicomSeriesResponse>(Arena*);
template<> ::osirixgrpc::DCMPixDicomStudyResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixDicomStudyResponse>(Arena*);
template<> ::osirixgrpc::DCMPixGetMapFromROIRequest* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixGetMapFromROIRequest>(Arena*);
template<> ::osirixgrpc::DCMPixGetMapFromROIResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixGetMapFromROIResponse>(Arena*);
template<> ::osirixgrpc::DCMPixImageResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixImageResponse>(Arena*);
template<> ::osirixgrpc::DCMPixIsRGBResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixIsRGBResponse>(Arena*);
template<> ::osirixgrpc::DCMPixOrientationResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixOrientationResponse>(Arena*);
template<> ::osirixgrpc::DCMPixOriginResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixOriginResponse>(Arena*);
template<> ::osirixgrpc::DCMPixROIValuesRequest* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixROIValuesRequest>(Arena*);
template<> ::osirixgrpc::DCMPixROIValuesResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixROIValuesResponse>(Arena*);
template<> ::osirixgrpc::DCMPixSetImageRequest* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixSetImageRequest>(Arena*);
template<> ::osirixgrpc::DCMPixShapeResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixShapeResponse>(Arena*);
template<> ::osirixgrpc::DCMPixSliceLocationResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixSliceLocationResponse>(Arena*);
template<> ::osirixgrpc::DCMPixSourceFileResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixSourceFileResponse>(Arena*);
template<> ::osirixgrpc::DCMPixSpacingResponse* Arena::CreateMaybeMessage<::osirixgrpc::DCMPixSpacingResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osirixgrpc {

// ===================================================================

class DCMPixIsRGBResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixIsRGBResponse) */ {
 public:
  inline DCMPixIsRGBResponse() : DCMPixIsRGBResponse(nullptr) {}
  virtual ~DCMPixIsRGBResponse();

  DCMPixIsRGBResponse(const DCMPixIsRGBResponse& from);
  DCMPixIsRGBResponse(DCMPixIsRGBResponse&& from) noexcept
    : DCMPixIsRGBResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixIsRGBResponse& operator=(const DCMPixIsRGBResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixIsRGBResponse& operator=(DCMPixIsRGBResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixIsRGBResponse& default_instance();

  static inline const DCMPixIsRGBResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixIsRGBResponse*>(
               &_DCMPixIsRGBResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DCMPixIsRGBResponse& a, DCMPixIsRGBResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixIsRGBResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixIsRGBResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixIsRGBResponse* New() const final {
    return CreateMaybeMessage<DCMPixIsRGBResponse>(nullptr);
  }

  DCMPixIsRGBResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixIsRGBResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixIsRGBResponse& from);
  void MergeFrom(const DCMPixIsRGBResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixIsRGBResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixIsRGBResponse";
  }
  protected:
  explicit DCMPixIsRGBResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kIsRgbFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // bool is_rgb = 2;
  void clear_is_rgb();
  bool is_rgb() const;
  void set_is_rgb(bool value);
  private:
  bool _internal_is_rgb() const;
  void _internal_set_is_rgb(bool value);
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixIsRGBResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  bool is_rgb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixComputeROIResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixComputeROIResponse) */ {
 public:
  inline DCMPixComputeROIResponse() : DCMPixComputeROIResponse(nullptr) {}
  virtual ~DCMPixComputeROIResponse();

  DCMPixComputeROIResponse(const DCMPixComputeROIResponse& from);
  DCMPixComputeROIResponse(DCMPixComputeROIResponse&& from) noexcept
    : DCMPixComputeROIResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixComputeROIResponse& operator=(const DCMPixComputeROIResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixComputeROIResponse& operator=(DCMPixComputeROIResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixComputeROIResponse& default_instance();

  static inline const DCMPixComputeROIResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixComputeROIResponse*>(
               &_DCMPixComputeROIResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DCMPixComputeROIResponse& a, DCMPixComputeROIResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixComputeROIResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixComputeROIResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixComputeROIResponse* New() const final {
    return CreateMaybeMessage<DCMPixComputeROIResponse>(nullptr);
  }

  DCMPixComputeROIResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixComputeROIResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixComputeROIResponse& from);
  void MergeFrom(const DCMPixComputeROIResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixComputeROIResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixComputeROIResponse";
  }
  protected:
  explicit DCMPixComputeROIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMeanFieldNumber = 2,
    kTotalFieldNumber = 3,
    kStdDevFieldNumber = 4,
    kMinFieldNumber = 5,
    kMaxFieldNumber = 6,
    kSkewnessFieldNumber = 7,
    kKurtosisFieldNumber = 8,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // float mean = 2;
  void clear_mean();
  float mean() const;
  void set_mean(float value);
  private:
  float _internal_mean() const;
  void _internal_set_mean(float value);
  public:

  // float total = 3;
  void clear_total();
  float total() const;
  void set_total(float value);
  private:
  float _internal_total() const;
  void _internal_set_total(float value);
  public:

  // float std_dev = 4;
  void clear_std_dev();
  float std_dev() const;
  void set_std_dev(float value);
  private:
  float _internal_std_dev() const;
  void _internal_set_std_dev(float value);
  public:

  // float min = 5;
  void clear_min();
  float min() const;
  void set_min(float value);
  private:
  float _internal_min() const;
  void _internal_set_min(float value);
  public:

  // float max = 6;
  void clear_max();
  float max() const;
  void set_max(float value);
  private:
  float _internal_max() const;
  void _internal_set_max(float value);
  public:

  // float skewness = 7;
  void clear_skewness();
  float skewness() const;
  void set_skewness(float value);
  private:
  float _internal_skewness() const;
  void _internal_set_skewness(float value);
  public:

  // float kurtosis = 8;
  void clear_kurtosis();
  float kurtosis() const;
  void set_kurtosis(float value);
  private:
  float _internal_kurtosis() const;
  void _internal_set_kurtosis(float value);
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixComputeROIResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  float mean_;
  float total_;
  float std_dev_;
  float min_;
  float max_;
  float skewness_;
  float kurtosis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixROIValuesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixROIValuesResponse) */ {
 public:
  inline DCMPixROIValuesResponse() : DCMPixROIValuesResponse(nullptr) {}
  virtual ~DCMPixROIValuesResponse();

  DCMPixROIValuesResponse(const DCMPixROIValuesResponse& from);
  DCMPixROIValuesResponse(DCMPixROIValuesResponse&& from) noexcept
    : DCMPixROIValuesResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixROIValuesResponse& operator=(const DCMPixROIValuesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixROIValuesResponse& operator=(DCMPixROIValuesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixROIValuesResponse& default_instance();

  static inline const DCMPixROIValuesResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixROIValuesResponse*>(
               &_DCMPixROIValuesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DCMPixROIValuesResponse& a, DCMPixROIValuesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixROIValuesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixROIValuesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixROIValuesResponse* New() const final {
    return CreateMaybeMessage<DCMPixROIValuesResponse>(nullptr);
  }

  DCMPixROIValuesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixROIValuesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixROIValuesResponse& from);
  void MergeFrom(const DCMPixROIValuesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixROIValuesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixROIValuesResponse";
  }
  protected:
  explicit DCMPixROIValuesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kRowIndicesFieldNumber = 3,
    kColumnIndicesFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // repeated int32 row_indices = 3;
  int row_indices_size() const;
  private:
  int _internal_row_indices_size() const;
  public:
  void clear_row_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_row_indices() const;
  void _internal_add_row_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_row_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 row_indices(int index) const;
  void set_row_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_row_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      row_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_row_indices();

  // repeated int32 column_indices = 4;
  int column_indices_size() const;
  private:
  int _internal_column_indices_size() const;
  public:
  void clear_column_indices();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_column_indices(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_column_indices() const;
  void _internal_add_column_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_column_indices();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 column_indices(int index) const;
  void set_column_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_column_indices(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      column_indices() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_column_indices();

  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixROIValuesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > row_indices_;
  mutable std::atomic<int> _row_indices_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > column_indices_;
  mutable std::atomic<int> _column_indices_cached_byte_size_;
  ::osirixgrpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixDicomImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixDicomImageResponse) */ {
 public:
  inline DCMPixDicomImageResponse() : DCMPixDicomImageResponse(nullptr) {}
  virtual ~DCMPixDicomImageResponse();

  DCMPixDicomImageResponse(const DCMPixDicomImageResponse& from);
  DCMPixDicomImageResponse(DCMPixDicomImageResponse&& from) noexcept
    : DCMPixDicomImageResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixDicomImageResponse& operator=(const DCMPixDicomImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixDicomImageResponse& operator=(DCMPixDicomImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixDicomImageResponse& default_instance();

  static inline const DCMPixDicomImageResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixDicomImageResponse*>(
               &_DCMPixDicomImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DCMPixDicomImageResponse& a, DCMPixDicomImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixDicomImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixDicomImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixDicomImageResponse* New() const final {
    return CreateMaybeMessage<DCMPixDicomImageResponse>(nullptr);
  }

  DCMPixDicomImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixDicomImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixDicomImageResponse& from);
  void MergeFrom(const DCMPixDicomImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixDicomImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixDicomImageResponse";
  }
  protected:
  explicit DCMPixDicomImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDicomImageFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // .osirixgrpc.DicomImage dicom_image = 2;
  bool has_dicom_image() const;
  private:
  bool _internal_has_dicom_image() const;
  public:
  void clear_dicom_image();
  const ::osirixgrpc::DicomImage& dicom_image() const;
  ::osirixgrpc::DicomImage* release_dicom_image();
  ::osirixgrpc::DicomImage* mutable_dicom_image();
  void set_allocated_dicom_image(::osirixgrpc::DicomImage* dicom_image);
  private:
  const ::osirixgrpc::DicomImage& _internal_dicom_image() const;
  ::osirixgrpc::DicomImage* _internal_mutable_dicom_image();
  public:
  void unsafe_arena_set_allocated_dicom_image(
      ::osirixgrpc::DicomImage* dicom_image);
  ::osirixgrpc::DicomImage* unsafe_arena_release_dicom_image();

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixDicomImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  ::osirixgrpc::DicomImage* dicom_image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixDicomSeriesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixDicomSeriesResponse) */ {
 public:
  inline DCMPixDicomSeriesResponse() : DCMPixDicomSeriesResponse(nullptr) {}
  virtual ~DCMPixDicomSeriesResponse();

  DCMPixDicomSeriesResponse(const DCMPixDicomSeriesResponse& from);
  DCMPixDicomSeriesResponse(DCMPixDicomSeriesResponse&& from) noexcept
    : DCMPixDicomSeriesResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixDicomSeriesResponse& operator=(const DCMPixDicomSeriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixDicomSeriesResponse& operator=(DCMPixDicomSeriesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixDicomSeriesResponse& default_instance();

  static inline const DCMPixDicomSeriesResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixDicomSeriesResponse*>(
               &_DCMPixDicomSeriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DCMPixDicomSeriesResponse& a, DCMPixDicomSeriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixDicomSeriesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixDicomSeriesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixDicomSeriesResponse* New() const final {
    return CreateMaybeMessage<DCMPixDicomSeriesResponse>(nullptr);
  }

  DCMPixDicomSeriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixDicomSeriesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixDicomSeriesResponse& from);
  void MergeFrom(const DCMPixDicomSeriesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixDicomSeriesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixDicomSeriesResponse";
  }
  protected:
  explicit DCMPixDicomSeriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDicomSeriesFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // .osirixgrpc.DicomSeries dicom_series = 2;
  bool has_dicom_series() const;
  private:
  bool _internal_has_dicom_series() const;
  public:
  void clear_dicom_series();
  const ::osirixgrpc::DicomSeries& dicom_series() const;
  ::osirixgrpc::DicomSeries* release_dicom_series();
  ::osirixgrpc::DicomSeries* mutable_dicom_series();
  void set_allocated_dicom_series(::osirixgrpc::DicomSeries* dicom_series);
  private:
  const ::osirixgrpc::DicomSeries& _internal_dicom_series() const;
  ::osirixgrpc::DicomSeries* _internal_mutable_dicom_series();
  public:
  void unsafe_arena_set_allocated_dicom_series(
      ::osirixgrpc::DicomSeries* dicom_series);
  ::osirixgrpc::DicomSeries* unsafe_arena_release_dicom_series();

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixDicomSeriesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  ::osirixgrpc::DicomSeries* dicom_series_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixDicomStudyResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixDicomStudyResponse) */ {
 public:
  inline DCMPixDicomStudyResponse() : DCMPixDicomStudyResponse(nullptr) {}
  virtual ~DCMPixDicomStudyResponse();

  DCMPixDicomStudyResponse(const DCMPixDicomStudyResponse& from);
  DCMPixDicomStudyResponse(DCMPixDicomStudyResponse&& from) noexcept
    : DCMPixDicomStudyResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixDicomStudyResponse& operator=(const DCMPixDicomStudyResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixDicomStudyResponse& operator=(DCMPixDicomStudyResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixDicomStudyResponse& default_instance();

  static inline const DCMPixDicomStudyResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixDicomStudyResponse*>(
               &_DCMPixDicomStudyResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DCMPixDicomStudyResponse& a, DCMPixDicomStudyResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixDicomStudyResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixDicomStudyResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixDicomStudyResponse* New() const final {
    return CreateMaybeMessage<DCMPixDicomStudyResponse>(nullptr);
  }

  DCMPixDicomStudyResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixDicomStudyResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixDicomStudyResponse& from);
  void MergeFrom(const DCMPixDicomStudyResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixDicomStudyResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixDicomStudyResponse";
  }
  protected:
  explicit DCMPixDicomStudyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kDicomStudyFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // .osirixgrpc.DicomStudy dicom_study = 2;
  bool has_dicom_study() const;
  private:
  bool _internal_has_dicom_study() const;
  public:
  void clear_dicom_study();
  const ::osirixgrpc::DicomStudy& dicom_study() const;
  ::osirixgrpc::DicomStudy* release_dicom_study();
  ::osirixgrpc::DicomStudy* mutable_dicom_study();
  void set_allocated_dicom_study(::osirixgrpc::DicomStudy* dicom_study);
  private:
  const ::osirixgrpc::DicomStudy& _internal_dicom_study() const;
  ::osirixgrpc::DicomStudy* _internal_mutable_dicom_study();
  public:
  void unsafe_arena_set_allocated_dicom_study(
      ::osirixgrpc::DicomStudy* dicom_study);
  ::osirixgrpc::DicomStudy* unsafe_arena_release_dicom_study();

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixDicomStudyResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  ::osirixgrpc::DicomStudy* dicom_study_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixImageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixImageResponse) */ {
 public:
  inline DCMPixImageResponse() : DCMPixImageResponse(nullptr) {}
  virtual ~DCMPixImageResponse();

  DCMPixImageResponse(const DCMPixImageResponse& from);
  DCMPixImageResponse(DCMPixImageResponse&& from) noexcept
    : DCMPixImageResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixImageResponse& operator=(const DCMPixImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixImageResponse& operator=(DCMPixImageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixImageResponse& default_instance();

  static inline const DCMPixImageResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixImageResponse*>(
               &_DCMPixImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DCMPixImageResponse& a, DCMPixImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixImageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixImageResponse* New() const final {
    return CreateMaybeMessage<DCMPixImageResponse>(nullptr);
  }

  DCMPixImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixImageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixImageResponse& from);
  void MergeFrom(const DCMPixImageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixImageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixImageResponse";
  }
  protected:
  explicit DCMPixImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageDataFloatFieldNumber = 5,
    kImageDataArgbFieldNumber = 6,
    kStatusFieldNumber = 1,
    kRowsFieldNumber = 2,
    kColumnsFieldNumber = 3,
    kIsArgbFieldNumber = 4,
  };
  // repeated float image_data_float = 5;
  int image_data_float_size() const;
  private:
  int _internal_image_data_float_size() const;
  public:
  void clear_image_data_float();
  private:
  float _internal_image_data_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_image_data_float() const;
  void _internal_add_image_data_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_image_data_float();
  public:
  float image_data_float(int index) const;
  void set_image_data_float(int index, float value);
  void add_image_data_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      image_data_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_image_data_float();

  // repeated int32 image_data_argb = 6;
  int image_data_argb_size() const;
  private:
  int _internal_image_data_argb_size() const;
  public:
  void clear_image_data_argb();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_data_argb(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_image_data_argb() const;
  void _internal_add_image_data_argb(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_image_data_argb();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 image_data_argb(int index) const;
  void set_image_data_argb(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_image_data_argb(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      image_data_argb() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_image_data_argb();

  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // int32 rows = 2;
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::int32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 columns = 3;
  void clear_columns();
  ::PROTOBUF_NAMESPACE_ID::int32 columns() const;
  void set_columns(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_columns() const;
  void _internal_set_columns(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_argb = 4;
  void clear_is_argb();
  bool is_argb() const;
  void set_is_argb(bool value);
  private:
  bool _internal_is_argb() const;
  void _internal_set_is_argb(bool value);
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > image_data_float_;
  mutable std::atomic<int> _image_data_float_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > image_data_argb_;
  mutable std::atomic<int> _image_data_argb_cached_byte_size_;
  ::osirixgrpc::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 rows_;
  ::PROTOBUF_NAMESPACE_ID::int32 columns_;
  bool is_argb_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixGetMapFromROIResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixGetMapFromROIResponse) */ {
 public:
  inline DCMPixGetMapFromROIResponse() : DCMPixGetMapFromROIResponse(nullptr) {}
  virtual ~DCMPixGetMapFromROIResponse();

  DCMPixGetMapFromROIResponse(const DCMPixGetMapFromROIResponse& from);
  DCMPixGetMapFromROIResponse(DCMPixGetMapFromROIResponse&& from) noexcept
    : DCMPixGetMapFromROIResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixGetMapFromROIResponse& operator=(const DCMPixGetMapFromROIResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixGetMapFromROIResponse& operator=(DCMPixGetMapFromROIResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixGetMapFromROIResponse& default_instance();

  static inline const DCMPixGetMapFromROIResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixGetMapFromROIResponse*>(
               &_DCMPixGetMapFromROIResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DCMPixGetMapFromROIResponse& a, DCMPixGetMapFromROIResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixGetMapFromROIResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixGetMapFromROIResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixGetMapFromROIResponse* New() const final {
    return CreateMaybeMessage<DCMPixGetMapFromROIResponse>(nullptr);
  }

  DCMPixGetMapFromROIResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixGetMapFromROIResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixGetMapFromROIResponse& from);
  void MergeFrom(const DCMPixGetMapFromROIResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixGetMapFromROIResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixGetMapFromROIResponse";
  }
  protected:
  explicit DCMPixGetMapFromROIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMapFieldNumber = 4,
    kStatusFieldNumber = 1,
    kRowsFieldNumber = 2,
    kColumnsFieldNumber = 3,
  };
  // repeated bool map = 4;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  bool _internal_map(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_map() const;
  void _internal_add_map(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_map();
  public:
  bool map(int index) const;
  void set_map(int index, bool value);
  void add_map(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_map();

  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // int32 rows = 2;
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::int32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 columns = 3;
  void clear_columns();
  ::PROTOBUF_NAMESPACE_ID::int32 columns() const;
  void set_columns(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_columns() const;
  void _internal_set_columns(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixGetMapFromROIResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > map_;
  mutable std::atomic<int> _map_cached_byte_size_;
  ::osirixgrpc::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 rows_;
  ::PROTOBUF_NAMESPACE_ID::int32 columns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixShapeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixShapeResponse) */ {
 public:
  inline DCMPixShapeResponse() : DCMPixShapeResponse(nullptr) {}
  virtual ~DCMPixShapeResponse();

  DCMPixShapeResponse(const DCMPixShapeResponse& from);
  DCMPixShapeResponse(DCMPixShapeResponse&& from) noexcept
    : DCMPixShapeResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixShapeResponse& operator=(const DCMPixShapeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixShapeResponse& operator=(DCMPixShapeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixShapeResponse& default_instance();

  static inline const DCMPixShapeResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixShapeResponse*>(
               &_DCMPixShapeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DCMPixShapeResponse& a, DCMPixShapeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixShapeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixShapeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixShapeResponse* New() const final {
    return CreateMaybeMessage<DCMPixShapeResponse>(nullptr);
  }

  DCMPixShapeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixShapeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixShapeResponse& from);
  void MergeFrom(const DCMPixShapeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixShapeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixShapeResponse";
  }
  protected:
  explicit DCMPixShapeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kRowsFieldNumber = 2,
    kColumnsFieldNumber = 3,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // int32 rows = 2;
  void clear_rows();
  ::PROTOBUF_NAMESPACE_ID::int32 rows() const;
  void set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rows() const;
  void _internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 columns = 3;
  void clear_columns();
  ::PROTOBUF_NAMESPACE_ID::int32 columns() const;
  void set_columns(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_columns() const;
  void _internal_set_columns(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixShapeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  ::PROTOBUF_NAMESPACE_ID::int32 rows_;
  ::PROTOBUF_NAMESPACE_ID::int32 columns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixSpacingResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixSpacingResponse) */ {
 public:
  inline DCMPixSpacingResponse() : DCMPixSpacingResponse(nullptr) {}
  virtual ~DCMPixSpacingResponse();

  DCMPixSpacingResponse(const DCMPixSpacingResponse& from);
  DCMPixSpacingResponse(DCMPixSpacingResponse&& from) noexcept
    : DCMPixSpacingResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixSpacingResponse& operator=(const DCMPixSpacingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixSpacingResponse& operator=(DCMPixSpacingResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixSpacingResponse& default_instance();

  static inline const DCMPixSpacingResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixSpacingResponse*>(
               &_DCMPixSpacingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DCMPixSpacingResponse& a, DCMPixSpacingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixSpacingResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixSpacingResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixSpacingResponse* New() const final {
    return CreateMaybeMessage<DCMPixSpacingResponse>(nullptr);
  }

  DCMPixSpacingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixSpacingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixSpacingResponse& from);
  void MergeFrom(const DCMPixSpacingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixSpacingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixSpacingResponse";
  }
  protected:
  explicit DCMPixSpacingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kSpacingRowsFieldNumber = 2,
    kSpacingColumnsFieldNumber = 3,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // float spacing_rows = 2;
  void clear_spacing_rows();
  float spacing_rows() const;
  void set_spacing_rows(float value);
  private:
  float _internal_spacing_rows() const;
  void _internal_set_spacing_rows(float value);
  public:

  // float spacing_columns = 3;
  void clear_spacing_columns();
  float spacing_columns() const;
  void set_spacing_columns(float value);
  private:
  float _internal_spacing_columns() const;
  void _internal_set_spacing_columns(float value);
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixSpacingResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  float spacing_rows_;
  float spacing_columns_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixOriginResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixOriginResponse) */ {
 public:
  inline DCMPixOriginResponse() : DCMPixOriginResponse(nullptr) {}
  virtual ~DCMPixOriginResponse();

  DCMPixOriginResponse(const DCMPixOriginResponse& from);
  DCMPixOriginResponse(DCMPixOriginResponse&& from) noexcept
    : DCMPixOriginResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixOriginResponse& operator=(const DCMPixOriginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixOriginResponse& operator=(DCMPixOriginResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixOriginResponse& default_instance();

  static inline const DCMPixOriginResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixOriginResponse*>(
               &_DCMPixOriginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DCMPixOriginResponse& a, DCMPixOriginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixOriginResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixOriginResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixOriginResponse* New() const final {
    return CreateMaybeMessage<DCMPixOriginResponse>(nullptr);
  }

  DCMPixOriginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixOriginResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixOriginResponse& from);
  void MergeFrom(const DCMPixOriginResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixOriginResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixOriginResponse";
  }
  protected:
  explicit DCMPixOriginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kOriginRowsFieldNumber = 2,
    kOriginColumnsFieldNumber = 3,
    kOriginSlicesFieldNumber = 4,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // float origin_rows = 2;
  void clear_origin_rows();
  float origin_rows() const;
  void set_origin_rows(float value);
  private:
  float _internal_origin_rows() const;
  void _internal_set_origin_rows(float value);
  public:

  // float origin_columns = 3;
  void clear_origin_columns();
  float origin_columns() const;
  void set_origin_columns(float value);
  private:
  float _internal_origin_columns() const;
  void _internal_set_origin_columns(float value);
  public:

  // float origin_slices = 4;
  void clear_origin_slices();
  float origin_slices() const;
  void set_origin_slices(float value);
  private:
  float _internal_origin_slices() const;
  void _internal_set_origin_slices(float value);
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixOriginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  float origin_rows_;
  float origin_columns_;
  float origin_slices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixOrientationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixOrientationResponse) */ {
 public:
  inline DCMPixOrientationResponse() : DCMPixOrientationResponse(nullptr) {}
  virtual ~DCMPixOrientationResponse();

  DCMPixOrientationResponse(const DCMPixOrientationResponse& from);
  DCMPixOrientationResponse(DCMPixOrientationResponse&& from) noexcept
    : DCMPixOrientationResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixOrientationResponse& operator=(const DCMPixOrientationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixOrientationResponse& operator=(DCMPixOrientationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixOrientationResponse& default_instance();

  static inline const DCMPixOrientationResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixOrientationResponse*>(
               &_DCMPixOrientationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DCMPixOrientationResponse& a, DCMPixOrientationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixOrientationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixOrientationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixOrientationResponse* New() const final {
    return CreateMaybeMessage<DCMPixOrientationResponse>(nullptr);
  }

  DCMPixOrientationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixOrientationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixOrientationResponse& from);
  void MergeFrom(const DCMPixOrientationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixOrientationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixOrientationResponse";
  }
  protected:
  explicit DCMPixOrientationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated float orientation = 2;
  int orientation_size() const;
  private:
  int _internal_orientation_size() const;
  public:
  void clear_orientation();
  private:
  float _internal_orientation(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_orientation() const;
  void _internal_add_orientation(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_orientation();
  public:
  float orientation(int index) const;
  void set_orientation(int index, float value);
  void add_orientation(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      orientation() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_orientation();

  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixOrientationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > orientation_;
  mutable std::atomic<int> _orientation_cached_byte_size_;
  ::osirixgrpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixSliceLocationResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixSliceLocationResponse) */ {
 public:
  inline DCMPixSliceLocationResponse() : DCMPixSliceLocationResponse(nullptr) {}
  virtual ~DCMPixSliceLocationResponse();

  DCMPixSliceLocationResponse(const DCMPixSliceLocationResponse& from);
  DCMPixSliceLocationResponse(DCMPixSliceLocationResponse&& from) noexcept
    : DCMPixSliceLocationResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixSliceLocationResponse& operator=(const DCMPixSliceLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixSliceLocationResponse& operator=(DCMPixSliceLocationResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixSliceLocationResponse& default_instance();

  static inline const DCMPixSliceLocationResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixSliceLocationResponse*>(
               &_DCMPixSliceLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DCMPixSliceLocationResponse& a, DCMPixSliceLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixSliceLocationResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixSliceLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixSliceLocationResponse* New() const final {
    return CreateMaybeMessage<DCMPixSliceLocationResponse>(nullptr);
  }

  DCMPixSliceLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixSliceLocationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixSliceLocationResponse& from);
  void MergeFrom(const DCMPixSliceLocationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixSliceLocationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixSliceLocationResponse";
  }
  protected:
  explicit DCMPixSliceLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kSliceLocationFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // float slice_location = 2;
  void clear_slice_location();
  float slice_location() const;
  void set_slice_location(float value);
  private:
  float _internal_slice_location() const;
  void _internal_set_slice_location(float value);
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixSliceLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  float slice_location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixSourceFileResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixSourceFileResponse) */ {
 public:
  inline DCMPixSourceFileResponse() : DCMPixSourceFileResponse(nullptr) {}
  virtual ~DCMPixSourceFileResponse();

  DCMPixSourceFileResponse(const DCMPixSourceFileResponse& from);
  DCMPixSourceFileResponse(DCMPixSourceFileResponse&& from) noexcept
    : DCMPixSourceFileResponse() {
    *this = ::std::move(from);
  }

  inline DCMPixSourceFileResponse& operator=(const DCMPixSourceFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixSourceFileResponse& operator=(DCMPixSourceFileResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixSourceFileResponse& default_instance();

  static inline const DCMPixSourceFileResponse* internal_default_instance() {
    return reinterpret_cast<const DCMPixSourceFileResponse*>(
               &_DCMPixSourceFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DCMPixSourceFileResponse& a, DCMPixSourceFileResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixSourceFileResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixSourceFileResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixSourceFileResponse* New() const final {
    return CreateMaybeMessage<DCMPixSourceFileResponse>(nullptr);
  }

  DCMPixSourceFileResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixSourceFileResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixSourceFileResponse& from);
  void MergeFrom(const DCMPixSourceFileResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixSourceFileResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixSourceFileResponse";
  }
  protected:
  explicit DCMPixSourceFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFileFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string source_file = 2;
  void clear_source_file();
  const std::string& source_file() const;
  void set_source_file(const std::string& value);
  void set_source_file(std::string&& value);
  void set_source_file(const char* value);
  void set_source_file(const char* value, size_t size);
  std::string* mutable_source_file();
  std::string* release_source_file();
  void set_allocated_source_file(std::string* source_file);
  private:
  const std::string& _internal_source_file() const;
  void _internal_set_source_file(const std::string& value);
  std::string* _internal_mutable_source_file();
  public:

  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixSourceFileResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_file_;
  ::osirixgrpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixConvertToRGBRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixConvertToRGBRequest) */ {
 public:
  inline DCMPixConvertToRGBRequest() : DCMPixConvertToRGBRequest(nullptr) {}
  virtual ~DCMPixConvertToRGBRequest();

  DCMPixConvertToRGBRequest(const DCMPixConvertToRGBRequest& from);
  DCMPixConvertToRGBRequest(DCMPixConvertToRGBRequest&& from) noexcept
    : DCMPixConvertToRGBRequest() {
    *this = ::std::move(from);
  }

  inline DCMPixConvertToRGBRequest& operator=(const DCMPixConvertToRGBRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixConvertToRGBRequest& operator=(DCMPixConvertToRGBRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixConvertToRGBRequest& default_instance();

  static inline const DCMPixConvertToRGBRequest* internal_default_instance() {
    return reinterpret_cast<const DCMPixConvertToRGBRequest*>(
               &_DCMPixConvertToRGBRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DCMPixConvertToRGBRequest& a, DCMPixConvertToRGBRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixConvertToRGBRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixConvertToRGBRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixConvertToRGBRequest* New() const final {
    return CreateMaybeMessage<DCMPixConvertToRGBRequest>(nullptr);
  }

  DCMPixConvertToRGBRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixConvertToRGBRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixConvertToRGBRequest& from);
  void MergeFrom(const DCMPixConvertToRGBRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixConvertToRGBRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixConvertToRGBRequest";
  }
  protected:
  explicit DCMPixConvertToRGBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPixFieldNumber = 1,
    kRgbChannelFieldNumber = 2,
  };
  // .osirixgrpc.DCMPix pix = 1;
  bool has_pix() const;
  private:
  bool _internal_has_pix() const;
  public:
  void clear_pix();
  const ::osirixgrpc::DCMPix& pix() const;
  ::osirixgrpc::DCMPix* release_pix();
  ::osirixgrpc::DCMPix* mutable_pix();
  void set_allocated_pix(::osirixgrpc::DCMPix* pix);
  private:
  const ::osirixgrpc::DCMPix& _internal_pix() const;
  ::osirixgrpc::DCMPix* _internal_mutable_pix();
  public:
  void unsafe_arena_set_allocated_pix(
      ::osirixgrpc::DCMPix* pix);
  ::osirixgrpc::DCMPix* unsafe_arena_release_pix();

  // int32 rgb_channel = 2;
  void clear_rgb_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 rgb_channel() const;
  void set_rgb_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rgb_channel() const;
  void _internal_set_rgb_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixConvertToRGBRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::DCMPix* pix_;
  ::PROTOBUF_NAMESPACE_ID::int32 rgb_channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixConvertToBWRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixConvertToBWRequest) */ {
 public:
  inline DCMPixConvertToBWRequest() : DCMPixConvertToBWRequest(nullptr) {}
  virtual ~DCMPixConvertToBWRequest();

  DCMPixConvertToBWRequest(const DCMPixConvertToBWRequest& from);
  DCMPixConvertToBWRequest(DCMPixConvertToBWRequest&& from) noexcept
    : DCMPixConvertToBWRequest() {
    *this = ::std::move(from);
  }

  inline DCMPixConvertToBWRequest& operator=(const DCMPixConvertToBWRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixConvertToBWRequest& operator=(DCMPixConvertToBWRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixConvertToBWRequest& default_instance();

  static inline const DCMPixConvertToBWRequest* internal_default_instance() {
    return reinterpret_cast<const DCMPixConvertToBWRequest*>(
               &_DCMPixConvertToBWRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DCMPixConvertToBWRequest& a, DCMPixConvertToBWRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixConvertToBWRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixConvertToBWRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixConvertToBWRequest* New() const final {
    return CreateMaybeMessage<DCMPixConvertToBWRequest>(nullptr);
  }

  DCMPixConvertToBWRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixConvertToBWRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixConvertToBWRequest& from);
  void MergeFrom(const DCMPixConvertToBWRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixConvertToBWRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixConvertToBWRequest";
  }
  protected:
  explicit DCMPixConvertToBWRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPixFieldNumber = 1,
    kBwChannelFieldNumber = 2,
  };
  // .osirixgrpc.DCMPix pix = 1;
  bool has_pix() const;
  private:
  bool _internal_has_pix() const;
  public:
  void clear_pix();
  const ::osirixgrpc::DCMPix& pix() const;
  ::osirixgrpc::DCMPix* release_pix();
  ::osirixgrpc::DCMPix* mutable_pix();
  void set_allocated_pix(::osirixgrpc::DCMPix* pix);
  private:
  const ::osirixgrpc::DCMPix& _internal_pix() const;
  ::osirixgrpc::DCMPix* _internal_mutable_pix();
  public:
  void unsafe_arena_set_allocated_pix(
      ::osirixgrpc::DCMPix* pix);
  ::osirixgrpc::DCMPix* unsafe_arena_release_pix();

  // int32 bw_channel = 2;
  void clear_bw_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 bw_channel() const;
  void set_bw_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bw_channel() const;
  void _internal_set_bw_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixConvertToBWRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::DCMPix* pix_;
  ::PROTOBUF_NAMESPACE_ID::int32 bw_channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixComputeROIRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixComputeROIRequest) */ {
 public:
  inline DCMPixComputeROIRequest() : DCMPixComputeROIRequest(nullptr) {}
  virtual ~DCMPixComputeROIRequest();

  DCMPixComputeROIRequest(const DCMPixComputeROIRequest& from);
  DCMPixComputeROIRequest(DCMPixComputeROIRequest&& from) noexcept
    : DCMPixComputeROIRequest() {
    *this = ::std::move(from);
  }

  inline DCMPixComputeROIRequest& operator=(const DCMPixComputeROIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixComputeROIRequest& operator=(DCMPixComputeROIRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixComputeROIRequest& default_instance();

  static inline const DCMPixComputeROIRequest* internal_default_instance() {
    return reinterpret_cast<const DCMPixComputeROIRequest*>(
               &_DCMPixComputeROIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(DCMPixComputeROIRequest& a, DCMPixComputeROIRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixComputeROIRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixComputeROIRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixComputeROIRequest* New() const final {
    return CreateMaybeMessage<DCMPixComputeROIRequest>(nullptr);
  }

  DCMPixComputeROIRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixComputeROIRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixComputeROIRequest& from);
  void MergeFrom(const DCMPixComputeROIRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixComputeROIRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixComputeROIRequest";
  }
  protected:
  explicit DCMPixComputeROIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPixFieldNumber = 1,
    kRoiFieldNumber = 2,
  };
  // .osirixgrpc.DCMPix pix = 1;
  bool has_pix() const;
  private:
  bool _internal_has_pix() const;
  public:
  void clear_pix();
  const ::osirixgrpc::DCMPix& pix() const;
  ::osirixgrpc::DCMPix* release_pix();
  ::osirixgrpc::DCMPix* mutable_pix();
  void set_allocated_pix(::osirixgrpc::DCMPix* pix);
  private:
  const ::osirixgrpc::DCMPix& _internal_pix() const;
  ::osirixgrpc::DCMPix* _internal_mutable_pix();
  public:
  void unsafe_arena_set_allocated_pix(
      ::osirixgrpc::DCMPix* pix);
  ::osirixgrpc::DCMPix* unsafe_arena_release_pix();

  // .osirixgrpc.ROI roi = 2;
  bool has_roi() const;
  private:
  bool _internal_has_roi() const;
  public:
  void clear_roi();
  const ::osirixgrpc::ROI& roi() const;
  ::osirixgrpc::ROI* release_roi();
  ::osirixgrpc::ROI* mutable_roi();
  void set_allocated_roi(::osirixgrpc::ROI* roi);
  private:
  const ::osirixgrpc::ROI& _internal_roi() const;
  ::osirixgrpc::ROI* _internal_mutable_roi();
  public:
  void unsafe_arena_set_allocated_roi(
      ::osirixgrpc::ROI* roi);
  ::osirixgrpc::ROI* unsafe_arena_release_roi();

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixComputeROIRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::DCMPix* pix_;
  ::osirixgrpc::ROI* roi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixROIValuesRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixROIValuesRequest) */ {
 public:
  inline DCMPixROIValuesRequest() : DCMPixROIValuesRequest(nullptr) {}
  virtual ~DCMPixROIValuesRequest();

  DCMPixROIValuesRequest(const DCMPixROIValuesRequest& from);
  DCMPixROIValuesRequest(DCMPixROIValuesRequest&& from) noexcept
    : DCMPixROIValuesRequest() {
    *this = ::std::move(from);
  }

  inline DCMPixROIValuesRequest& operator=(const DCMPixROIValuesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixROIValuesRequest& operator=(DCMPixROIValuesRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixROIValuesRequest& default_instance();

  static inline const DCMPixROIValuesRequest* internal_default_instance() {
    return reinterpret_cast<const DCMPixROIValuesRequest*>(
               &_DCMPixROIValuesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DCMPixROIValuesRequest& a, DCMPixROIValuesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixROIValuesRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixROIValuesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixROIValuesRequest* New() const final {
    return CreateMaybeMessage<DCMPixROIValuesRequest>(nullptr);
  }

  DCMPixROIValuesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixROIValuesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixROIValuesRequest& from);
  void MergeFrom(const DCMPixROIValuesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixROIValuesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixROIValuesRequest";
  }
  protected:
  explicit DCMPixROIValuesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPixFieldNumber = 1,
    kRoiFieldNumber = 2,
  };
  // .osirixgrpc.DCMPix pix = 1;
  bool has_pix() const;
  private:
  bool _internal_has_pix() const;
  public:
  void clear_pix();
  const ::osirixgrpc::DCMPix& pix() const;
  ::osirixgrpc::DCMPix* release_pix();
  ::osirixgrpc::DCMPix* mutable_pix();
  void set_allocated_pix(::osirixgrpc::DCMPix* pix);
  private:
  const ::osirixgrpc::DCMPix& _internal_pix() const;
  ::osirixgrpc::DCMPix* _internal_mutable_pix();
  public:
  void unsafe_arena_set_allocated_pix(
      ::osirixgrpc::DCMPix* pix);
  ::osirixgrpc::DCMPix* unsafe_arena_release_pix();

  // .osirixgrpc.ROI roi = 2;
  bool has_roi() const;
  private:
  bool _internal_has_roi() const;
  public:
  void clear_roi();
  const ::osirixgrpc::ROI& roi() const;
  ::osirixgrpc::ROI* release_roi();
  ::osirixgrpc::ROI* mutable_roi();
  void set_allocated_roi(::osirixgrpc::ROI* roi);
  private:
  const ::osirixgrpc::ROI& _internal_roi() const;
  ::osirixgrpc::ROI* _internal_mutable_roi();
  public:
  void unsafe_arena_set_allocated_roi(
      ::osirixgrpc::ROI* roi);
  ::osirixgrpc::ROI* unsafe_arena_release_roi();

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixROIValuesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::DCMPix* pix_;
  ::osirixgrpc::ROI* roi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixSetImageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixSetImageRequest) */ {
 public:
  inline DCMPixSetImageRequest() : DCMPixSetImageRequest(nullptr) {}
  virtual ~DCMPixSetImageRequest();

  DCMPixSetImageRequest(const DCMPixSetImageRequest& from);
  DCMPixSetImageRequest(DCMPixSetImageRequest&& from) noexcept
    : DCMPixSetImageRequest() {
    *this = ::std::move(from);
  }

  inline DCMPixSetImageRequest& operator=(const DCMPixSetImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixSetImageRequest& operator=(DCMPixSetImageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixSetImageRequest& default_instance();

  static inline const DCMPixSetImageRequest* internal_default_instance() {
    return reinterpret_cast<const DCMPixSetImageRequest*>(
               &_DCMPixSetImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DCMPixSetImageRequest& a, DCMPixSetImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixSetImageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixSetImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixSetImageRequest* New() const final {
    return CreateMaybeMessage<DCMPixSetImageRequest>(nullptr);
  }

  DCMPixSetImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixSetImageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixSetImageRequest& from);
  void MergeFrom(const DCMPixSetImageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixSetImageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixSetImageRequest";
  }
  protected:
  explicit DCMPixSetImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageDataFloatFieldNumber = 2,
    kImageDataArgbFieldNumber = 3,
    kPixFieldNumber = 1,
  };
  // repeated float image_data_float = 2;
  int image_data_float_size() const;
  private:
  int _internal_image_data_float_size() const;
  public:
  void clear_image_data_float();
  private:
  float _internal_image_data_float(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_image_data_float() const;
  void _internal_add_image_data_float(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_image_data_float();
  public:
  float image_data_float(int index) const;
  void set_image_data_float(int index, float value);
  void add_image_data_float(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      image_data_float() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_image_data_float();

  // repeated int32 image_data_argb = 3;
  int image_data_argb_size() const;
  private:
  int _internal_image_data_argb_size() const;
  public:
  void clear_image_data_argb();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_image_data_argb(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_image_data_argb() const;
  void _internal_add_image_data_argb(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_image_data_argb();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 image_data_argb(int index) const;
  void set_image_data_argb(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_image_data_argb(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      image_data_argb() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_image_data_argb();

  // .osirixgrpc.DCMPix pix = 1;
  bool has_pix() const;
  private:
  bool _internal_has_pix() const;
  public:
  void clear_pix();
  const ::osirixgrpc::DCMPix& pix() const;
  ::osirixgrpc::DCMPix* release_pix();
  ::osirixgrpc::DCMPix* mutable_pix();
  void set_allocated_pix(::osirixgrpc::DCMPix* pix);
  private:
  const ::osirixgrpc::DCMPix& _internal_pix() const;
  ::osirixgrpc::DCMPix* _internal_mutable_pix();
  public:
  void unsafe_arena_set_allocated_pix(
      ::osirixgrpc::DCMPix* pix);
  ::osirixgrpc::DCMPix* unsafe_arena_release_pix();

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixSetImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > image_data_float_;
  mutable std::atomic<int> _image_data_float_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > image_data_argb_;
  mutable std::atomic<int> _image_data_argb_cached_byte_size_;
  ::osirixgrpc::DCMPix* pix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// -------------------------------------------------------------------

class DCMPixGetMapFromROIRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPixGetMapFromROIRequest) */ {
 public:
  inline DCMPixGetMapFromROIRequest() : DCMPixGetMapFromROIRequest(nullptr) {}
  virtual ~DCMPixGetMapFromROIRequest();

  DCMPixGetMapFromROIRequest(const DCMPixGetMapFromROIRequest& from);
  DCMPixGetMapFromROIRequest(DCMPixGetMapFromROIRequest&& from) noexcept
    : DCMPixGetMapFromROIRequest() {
    *this = ::std::move(from);
  }

  inline DCMPixGetMapFromROIRequest& operator=(const DCMPixGetMapFromROIRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPixGetMapFromROIRequest& operator=(DCMPixGetMapFromROIRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPixGetMapFromROIRequest& default_instance();

  static inline const DCMPixGetMapFromROIRequest* internal_default_instance() {
    return reinterpret_cast<const DCMPixGetMapFromROIRequest*>(
               &_DCMPixGetMapFromROIRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DCMPixGetMapFromROIRequest& a, DCMPixGetMapFromROIRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPixGetMapFromROIRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPixGetMapFromROIRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPixGetMapFromROIRequest* New() const final {
    return CreateMaybeMessage<DCMPixGetMapFromROIRequest>(nullptr);
  }

  DCMPixGetMapFromROIRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPixGetMapFromROIRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPixGetMapFromROIRequest& from);
  void MergeFrom(const DCMPixGetMapFromROIRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPixGetMapFromROIRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPixGetMapFromROIRequest";
  }
  protected:
  explicit DCMPixGetMapFromROIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dcmpix_2eproto);
    return ::descriptor_table_dcmpix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPixFieldNumber = 1,
    kRoiFieldNumber = 2,
  };
  // .osirixgrpc.DCMPix pix = 1;
  bool has_pix() const;
  private:
  bool _internal_has_pix() const;
  public:
  void clear_pix();
  const ::osirixgrpc::DCMPix& pix() const;
  ::osirixgrpc::DCMPix* release_pix();
  ::osirixgrpc::DCMPix* mutable_pix();
  void set_allocated_pix(::osirixgrpc::DCMPix* pix);
  private:
  const ::osirixgrpc::DCMPix& _internal_pix() const;
  ::osirixgrpc::DCMPix* _internal_mutable_pix();
  public:
  void unsafe_arena_set_allocated_pix(
      ::osirixgrpc::DCMPix* pix);
  ::osirixgrpc::DCMPix* unsafe_arena_release_pix();

  // .osirixgrpc.ROI roi = 2;
  bool has_roi() const;
  private:
  bool _internal_has_roi() const;
  public:
  void clear_roi();
  const ::osirixgrpc::ROI& roi() const;
  ::osirixgrpc::ROI* release_roi();
  ::osirixgrpc::ROI* mutable_roi();
  void set_allocated_roi(::osirixgrpc::ROI* roi);
  private:
  const ::osirixgrpc::ROI& _internal_roi() const;
  ::osirixgrpc::ROI* _internal_mutable_roi();
  public:
  void unsafe_arena_set_allocated_roi(
      ::osirixgrpc::ROI* roi);
  ::osirixgrpc::ROI* unsafe_arena_release_roi();

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPixGetMapFromROIRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::DCMPix* pix_;
  ::osirixgrpc::ROI* roi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dcmpix_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DCMPixIsRGBResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixIsRGBResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixIsRGBResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixIsRGBResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixIsRGBResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixIsRGBResponse.status)
  return _internal_status();
}
inline void DCMPixIsRGBResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixIsRGBResponse.status)
}
inline ::osirixgrpc::Status* DCMPixIsRGBResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixIsRGBResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixIsRGBResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixIsRGBResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixIsRGBResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixIsRGBResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixIsRGBResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixIsRGBResponse.status)
}

// bool is_rgb = 2;
inline void DCMPixIsRGBResponse::clear_is_rgb() {
  is_rgb_ = false;
}
inline bool DCMPixIsRGBResponse::_internal_is_rgb() const {
  return is_rgb_;
}
inline bool DCMPixIsRGBResponse::is_rgb() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixIsRGBResponse.is_rgb)
  return _internal_is_rgb();
}
inline void DCMPixIsRGBResponse::_internal_set_is_rgb(bool value) {
  
  is_rgb_ = value;
}
inline void DCMPixIsRGBResponse::set_is_rgb(bool value) {
  _internal_set_is_rgb(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixIsRGBResponse.is_rgb)
}

// -------------------------------------------------------------------

// DCMPixComputeROIResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixComputeROIResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixComputeROIResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixComputeROIResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixComputeROIResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixComputeROIResponse.status)
  return _internal_status();
}
inline void DCMPixComputeROIResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixComputeROIResponse.status)
}
inline ::osirixgrpc::Status* DCMPixComputeROIResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixComputeROIResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixComputeROIResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixComputeROIResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixComputeROIResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixComputeROIResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixComputeROIResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixComputeROIResponse.status)
}

// float mean = 2;
inline void DCMPixComputeROIResponse::clear_mean() {
  mean_ = 0;
}
inline float DCMPixComputeROIResponse::_internal_mean() const {
  return mean_;
}
inline float DCMPixComputeROIResponse::mean() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixComputeROIResponse.mean)
  return _internal_mean();
}
inline void DCMPixComputeROIResponse::_internal_set_mean(float value) {
  
  mean_ = value;
}
inline void DCMPixComputeROIResponse::set_mean(float value) {
  _internal_set_mean(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixComputeROIResponse.mean)
}

// float total = 3;
inline void DCMPixComputeROIResponse::clear_total() {
  total_ = 0;
}
inline float DCMPixComputeROIResponse::_internal_total() const {
  return total_;
}
inline float DCMPixComputeROIResponse::total() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixComputeROIResponse.total)
  return _internal_total();
}
inline void DCMPixComputeROIResponse::_internal_set_total(float value) {
  
  total_ = value;
}
inline void DCMPixComputeROIResponse::set_total(float value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixComputeROIResponse.total)
}

// float std_dev = 4;
inline void DCMPixComputeROIResponse::clear_std_dev() {
  std_dev_ = 0;
}
inline float DCMPixComputeROIResponse::_internal_std_dev() const {
  return std_dev_;
}
inline float DCMPixComputeROIResponse::std_dev() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixComputeROIResponse.std_dev)
  return _internal_std_dev();
}
inline void DCMPixComputeROIResponse::_internal_set_std_dev(float value) {
  
  std_dev_ = value;
}
inline void DCMPixComputeROIResponse::set_std_dev(float value) {
  _internal_set_std_dev(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixComputeROIResponse.std_dev)
}

// float min = 5;
inline void DCMPixComputeROIResponse::clear_min() {
  min_ = 0;
}
inline float DCMPixComputeROIResponse::_internal_min() const {
  return min_;
}
inline float DCMPixComputeROIResponse::min() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixComputeROIResponse.min)
  return _internal_min();
}
inline void DCMPixComputeROIResponse::_internal_set_min(float value) {
  
  min_ = value;
}
inline void DCMPixComputeROIResponse::set_min(float value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixComputeROIResponse.min)
}

// float max = 6;
inline void DCMPixComputeROIResponse::clear_max() {
  max_ = 0;
}
inline float DCMPixComputeROIResponse::_internal_max() const {
  return max_;
}
inline float DCMPixComputeROIResponse::max() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixComputeROIResponse.max)
  return _internal_max();
}
inline void DCMPixComputeROIResponse::_internal_set_max(float value) {
  
  max_ = value;
}
inline void DCMPixComputeROIResponse::set_max(float value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixComputeROIResponse.max)
}

// float skewness = 7;
inline void DCMPixComputeROIResponse::clear_skewness() {
  skewness_ = 0;
}
inline float DCMPixComputeROIResponse::_internal_skewness() const {
  return skewness_;
}
inline float DCMPixComputeROIResponse::skewness() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixComputeROIResponse.skewness)
  return _internal_skewness();
}
inline void DCMPixComputeROIResponse::_internal_set_skewness(float value) {
  
  skewness_ = value;
}
inline void DCMPixComputeROIResponse::set_skewness(float value) {
  _internal_set_skewness(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixComputeROIResponse.skewness)
}

// float kurtosis = 8;
inline void DCMPixComputeROIResponse::clear_kurtosis() {
  kurtosis_ = 0;
}
inline float DCMPixComputeROIResponse::_internal_kurtosis() const {
  return kurtosis_;
}
inline float DCMPixComputeROIResponse::kurtosis() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixComputeROIResponse.kurtosis)
  return _internal_kurtosis();
}
inline void DCMPixComputeROIResponse::_internal_set_kurtosis(float value) {
  
  kurtosis_ = value;
}
inline void DCMPixComputeROIResponse::set_kurtosis(float value) {
  _internal_set_kurtosis(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixComputeROIResponse.kurtosis)
}

// -------------------------------------------------------------------

// DCMPixROIValuesResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixROIValuesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixROIValuesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixROIValuesResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixROIValuesResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixROIValuesResponse.status)
  return _internal_status();
}
inline void DCMPixROIValuesResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixROIValuesResponse.status)
}
inline ::osirixgrpc::Status* DCMPixROIValuesResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixROIValuesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixROIValuesResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixROIValuesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixROIValuesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixROIValuesResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixROIValuesResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixROIValuesResponse.status)
}

// repeated float values = 2;
inline int DCMPixROIValuesResponse::_internal_values_size() const {
  return values_.size();
}
inline int DCMPixROIValuesResponse::values_size() const {
  return _internal_values_size();
}
inline void DCMPixROIValuesResponse::clear_values() {
  values_.Clear();
}
inline float DCMPixROIValuesResponse::_internal_values(int index) const {
  return values_.Get(index);
}
inline float DCMPixROIValuesResponse::values(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixROIValuesResponse.values)
  return _internal_values(index);
}
inline void DCMPixROIValuesResponse::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixROIValuesResponse.values)
}
inline void DCMPixROIValuesResponse::_internal_add_values(float value) {
  values_.Add(value);
}
inline void DCMPixROIValuesResponse::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:osirixgrpc.DCMPixROIValuesResponse.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DCMPixROIValuesResponse::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DCMPixROIValuesResponse::values() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.DCMPixROIValuesResponse.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DCMPixROIValuesResponse::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DCMPixROIValuesResponse::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.DCMPixROIValuesResponse.values)
  return _internal_mutable_values();
}

// repeated int32 row_indices = 3;
inline int DCMPixROIValuesResponse::_internal_row_indices_size() const {
  return row_indices_.size();
}
inline int DCMPixROIValuesResponse::row_indices_size() const {
  return _internal_row_indices_size();
}
inline void DCMPixROIValuesResponse::clear_row_indices() {
  row_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixROIValuesResponse::_internal_row_indices(int index) const {
  return row_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixROIValuesResponse::row_indices(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixROIValuesResponse.row_indices)
  return _internal_row_indices(index);
}
inline void DCMPixROIValuesResponse::set_row_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  row_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixROIValuesResponse.row_indices)
}
inline void DCMPixROIValuesResponse::_internal_add_row_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  row_indices_.Add(value);
}
inline void DCMPixROIValuesResponse::add_row_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_row_indices(value);
  // @@protoc_insertion_point(field_add:osirixgrpc.DCMPixROIValuesResponse.row_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DCMPixROIValuesResponse::_internal_row_indices() const {
  return row_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DCMPixROIValuesResponse::row_indices() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.DCMPixROIValuesResponse.row_indices)
  return _internal_row_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DCMPixROIValuesResponse::_internal_mutable_row_indices() {
  return &row_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DCMPixROIValuesResponse::mutable_row_indices() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.DCMPixROIValuesResponse.row_indices)
  return _internal_mutable_row_indices();
}

// repeated int32 column_indices = 4;
inline int DCMPixROIValuesResponse::_internal_column_indices_size() const {
  return column_indices_.size();
}
inline int DCMPixROIValuesResponse::column_indices_size() const {
  return _internal_column_indices_size();
}
inline void DCMPixROIValuesResponse::clear_column_indices() {
  column_indices_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixROIValuesResponse::_internal_column_indices(int index) const {
  return column_indices_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixROIValuesResponse::column_indices(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixROIValuesResponse.column_indices)
  return _internal_column_indices(index);
}
inline void DCMPixROIValuesResponse::set_column_indices(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  column_indices_.Set(index, value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixROIValuesResponse.column_indices)
}
inline void DCMPixROIValuesResponse::_internal_add_column_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  column_indices_.Add(value);
}
inline void DCMPixROIValuesResponse::add_column_indices(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_column_indices(value);
  // @@protoc_insertion_point(field_add:osirixgrpc.DCMPixROIValuesResponse.column_indices)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DCMPixROIValuesResponse::_internal_column_indices() const {
  return column_indices_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DCMPixROIValuesResponse::column_indices() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.DCMPixROIValuesResponse.column_indices)
  return _internal_column_indices();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DCMPixROIValuesResponse::_internal_mutable_column_indices() {
  return &column_indices_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DCMPixROIValuesResponse::mutable_column_indices() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.DCMPixROIValuesResponse.column_indices)
  return _internal_mutable_column_indices();
}

// -------------------------------------------------------------------

// DCMPixDicomImageResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixDicomImageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixDicomImageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixDicomImageResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixDicomImageResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixDicomImageResponse.status)
  return _internal_status();
}
inline void DCMPixDicomImageResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixDicomImageResponse.status)
}
inline ::osirixgrpc::Status* DCMPixDicomImageResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixDicomImageResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixDicomImageResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixDicomImageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixDicomImageResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixDicomImageResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixDicomImageResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixDicomImageResponse.status)
}

// .osirixgrpc.DicomImage dicom_image = 2;
inline bool DCMPixDicomImageResponse::_internal_has_dicom_image() const {
  return this != internal_default_instance() && dicom_image_ != nullptr;
}
inline bool DCMPixDicomImageResponse::has_dicom_image() const {
  return _internal_has_dicom_image();
}
inline const ::osirixgrpc::DicomImage& DCMPixDicomImageResponse::_internal_dicom_image() const {
  const ::osirixgrpc::DicomImage* p = dicom_image_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::DicomImage&>(
      ::osirixgrpc::_DicomImage_default_instance_);
}
inline const ::osirixgrpc::DicomImage& DCMPixDicomImageResponse::dicom_image() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixDicomImageResponse.dicom_image)
  return _internal_dicom_image();
}
inline void DCMPixDicomImageResponse::unsafe_arena_set_allocated_dicom_image(
    ::osirixgrpc::DicomImage* dicom_image) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dicom_image_);
  }
  dicom_image_ = dicom_image;
  if (dicom_image) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixDicomImageResponse.dicom_image)
}
inline ::osirixgrpc::DicomImage* DCMPixDicomImageResponse::release_dicom_image() {
  
  ::osirixgrpc::DicomImage* temp = dicom_image_;
  dicom_image_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::DicomImage* DCMPixDicomImageResponse::unsafe_arena_release_dicom_image() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixDicomImageResponse.dicom_image)
  
  ::osirixgrpc::DicomImage* temp = dicom_image_;
  dicom_image_ = nullptr;
  return temp;
}
inline ::osirixgrpc::DicomImage* DCMPixDicomImageResponse::_internal_mutable_dicom_image() {
  
  if (dicom_image_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::DicomImage>(GetArena());
    dicom_image_ = p;
  }
  return dicom_image_;
}
inline ::osirixgrpc::DicomImage* DCMPixDicomImageResponse::mutable_dicom_image() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixDicomImageResponse.dicom_image)
  return _internal_mutable_dicom_image();
}
inline void DCMPixDicomImageResponse::set_allocated_dicom_image(::osirixgrpc::DicomImage* dicom_image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dicom_image_);
  }
  if (dicom_image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dicom_image)->GetArena();
    if (message_arena != submessage_arena) {
      dicom_image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dicom_image, submessage_arena);
    }
    
  } else {
    
  }
  dicom_image_ = dicom_image;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixDicomImageResponse.dicom_image)
}

// -------------------------------------------------------------------

// DCMPixDicomSeriesResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixDicomSeriesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixDicomSeriesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixDicomSeriesResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixDicomSeriesResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixDicomSeriesResponse.status)
  return _internal_status();
}
inline void DCMPixDicomSeriesResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixDicomSeriesResponse.status)
}
inline ::osirixgrpc::Status* DCMPixDicomSeriesResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixDicomSeriesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixDicomSeriesResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixDicomSeriesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixDicomSeriesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixDicomSeriesResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixDicomSeriesResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixDicomSeriesResponse.status)
}

// .osirixgrpc.DicomSeries dicom_series = 2;
inline bool DCMPixDicomSeriesResponse::_internal_has_dicom_series() const {
  return this != internal_default_instance() && dicom_series_ != nullptr;
}
inline bool DCMPixDicomSeriesResponse::has_dicom_series() const {
  return _internal_has_dicom_series();
}
inline const ::osirixgrpc::DicomSeries& DCMPixDicomSeriesResponse::_internal_dicom_series() const {
  const ::osirixgrpc::DicomSeries* p = dicom_series_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::DicomSeries&>(
      ::osirixgrpc::_DicomSeries_default_instance_);
}
inline const ::osirixgrpc::DicomSeries& DCMPixDicomSeriesResponse::dicom_series() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixDicomSeriesResponse.dicom_series)
  return _internal_dicom_series();
}
inline void DCMPixDicomSeriesResponse::unsafe_arena_set_allocated_dicom_series(
    ::osirixgrpc::DicomSeries* dicom_series) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dicom_series_);
  }
  dicom_series_ = dicom_series;
  if (dicom_series) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixDicomSeriesResponse.dicom_series)
}
inline ::osirixgrpc::DicomSeries* DCMPixDicomSeriesResponse::release_dicom_series() {
  
  ::osirixgrpc::DicomSeries* temp = dicom_series_;
  dicom_series_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::DicomSeries* DCMPixDicomSeriesResponse::unsafe_arena_release_dicom_series() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixDicomSeriesResponse.dicom_series)
  
  ::osirixgrpc::DicomSeries* temp = dicom_series_;
  dicom_series_ = nullptr;
  return temp;
}
inline ::osirixgrpc::DicomSeries* DCMPixDicomSeriesResponse::_internal_mutable_dicom_series() {
  
  if (dicom_series_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::DicomSeries>(GetArena());
    dicom_series_ = p;
  }
  return dicom_series_;
}
inline ::osirixgrpc::DicomSeries* DCMPixDicomSeriesResponse::mutable_dicom_series() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixDicomSeriesResponse.dicom_series)
  return _internal_mutable_dicom_series();
}
inline void DCMPixDicomSeriesResponse::set_allocated_dicom_series(::osirixgrpc::DicomSeries* dicom_series) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dicom_series_);
  }
  if (dicom_series) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dicom_series)->GetArena();
    if (message_arena != submessage_arena) {
      dicom_series = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dicom_series, submessage_arena);
    }
    
  } else {
    
  }
  dicom_series_ = dicom_series;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixDicomSeriesResponse.dicom_series)
}

// -------------------------------------------------------------------

// DCMPixDicomStudyResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixDicomStudyResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixDicomStudyResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixDicomStudyResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixDicomStudyResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixDicomStudyResponse.status)
  return _internal_status();
}
inline void DCMPixDicomStudyResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixDicomStudyResponse.status)
}
inline ::osirixgrpc::Status* DCMPixDicomStudyResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixDicomStudyResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixDicomStudyResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixDicomStudyResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixDicomStudyResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixDicomStudyResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixDicomStudyResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixDicomStudyResponse.status)
}

// .osirixgrpc.DicomStudy dicom_study = 2;
inline bool DCMPixDicomStudyResponse::_internal_has_dicom_study() const {
  return this != internal_default_instance() && dicom_study_ != nullptr;
}
inline bool DCMPixDicomStudyResponse::has_dicom_study() const {
  return _internal_has_dicom_study();
}
inline const ::osirixgrpc::DicomStudy& DCMPixDicomStudyResponse::_internal_dicom_study() const {
  const ::osirixgrpc::DicomStudy* p = dicom_study_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::DicomStudy&>(
      ::osirixgrpc::_DicomStudy_default_instance_);
}
inline const ::osirixgrpc::DicomStudy& DCMPixDicomStudyResponse::dicom_study() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixDicomStudyResponse.dicom_study)
  return _internal_dicom_study();
}
inline void DCMPixDicomStudyResponse::unsafe_arena_set_allocated_dicom_study(
    ::osirixgrpc::DicomStudy* dicom_study) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dicom_study_);
  }
  dicom_study_ = dicom_study;
  if (dicom_study) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixDicomStudyResponse.dicom_study)
}
inline ::osirixgrpc::DicomStudy* DCMPixDicomStudyResponse::release_dicom_study() {
  
  ::osirixgrpc::DicomStudy* temp = dicom_study_;
  dicom_study_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::DicomStudy* DCMPixDicomStudyResponse::unsafe_arena_release_dicom_study() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixDicomStudyResponse.dicom_study)
  
  ::osirixgrpc::DicomStudy* temp = dicom_study_;
  dicom_study_ = nullptr;
  return temp;
}
inline ::osirixgrpc::DicomStudy* DCMPixDicomStudyResponse::_internal_mutable_dicom_study() {
  
  if (dicom_study_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::DicomStudy>(GetArena());
    dicom_study_ = p;
  }
  return dicom_study_;
}
inline ::osirixgrpc::DicomStudy* DCMPixDicomStudyResponse::mutable_dicom_study() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixDicomStudyResponse.dicom_study)
  return _internal_mutable_dicom_study();
}
inline void DCMPixDicomStudyResponse::set_allocated_dicom_study(::osirixgrpc::DicomStudy* dicom_study) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dicom_study_);
  }
  if (dicom_study) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dicom_study)->GetArena();
    if (message_arena != submessage_arena) {
      dicom_study = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dicom_study, submessage_arena);
    }
    
  } else {
    
  }
  dicom_study_ = dicom_study;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixDicomStudyResponse.dicom_study)
}

// -------------------------------------------------------------------

// DCMPixImageResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixImageResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixImageResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixImageResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixImageResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixImageResponse.status)
  return _internal_status();
}
inline void DCMPixImageResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixImageResponse.status)
}
inline ::osirixgrpc::Status* DCMPixImageResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixImageResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixImageResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixImageResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixImageResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixImageResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixImageResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixImageResponse.status)
}

// int32 rows = 2;
inline void DCMPixImageResponse::clear_rows() {
  rows_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixImageResponse::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixImageResponse::rows() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixImageResponse.rows)
  return _internal_rows();
}
inline void DCMPixImageResponse::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rows_ = value;
}
inline void DCMPixImageResponse::set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixImageResponse.rows)
}

// int32 columns = 3;
inline void DCMPixImageResponse::clear_columns() {
  columns_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixImageResponse::_internal_columns() const {
  return columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixImageResponse::columns() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixImageResponse.columns)
  return _internal_columns();
}
inline void DCMPixImageResponse::_internal_set_columns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  columns_ = value;
}
inline void DCMPixImageResponse::set_columns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_columns(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixImageResponse.columns)
}

// bool is_argb = 4;
inline void DCMPixImageResponse::clear_is_argb() {
  is_argb_ = false;
}
inline bool DCMPixImageResponse::_internal_is_argb() const {
  return is_argb_;
}
inline bool DCMPixImageResponse::is_argb() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixImageResponse.is_argb)
  return _internal_is_argb();
}
inline void DCMPixImageResponse::_internal_set_is_argb(bool value) {
  
  is_argb_ = value;
}
inline void DCMPixImageResponse::set_is_argb(bool value) {
  _internal_set_is_argb(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixImageResponse.is_argb)
}

// repeated float image_data_float = 5;
inline int DCMPixImageResponse::_internal_image_data_float_size() const {
  return image_data_float_.size();
}
inline int DCMPixImageResponse::image_data_float_size() const {
  return _internal_image_data_float_size();
}
inline void DCMPixImageResponse::clear_image_data_float() {
  image_data_float_.Clear();
}
inline float DCMPixImageResponse::_internal_image_data_float(int index) const {
  return image_data_float_.Get(index);
}
inline float DCMPixImageResponse::image_data_float(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixImageResponse.image_data_float)
  return _internal_image_data_float(index);
}
inline void DCMPixImageResponse::set_image_data_float(int index, float value) {
  image_data_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixImageResponse.image_data_float)
}
inline void DCMPixImageResponse::_internal_add_image_data_float(float value) {
  image_data_float_.Add(value);
}
inline void DCMPixImageResponse::add_image_data_float(float value) {
  _internal_add_image_data_float(value);
  // @@protoc_insertion_point(field_add:osirixgrpc.DCMPixImageResponse.image_data_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DCMPixImageResponse::_internal_image_data_float() const {
  return image_data_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DCMPixImageResponse::image_data_float() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.DCMPixImageResponse.image_data_float)
  return _internal_image_data_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DCMPixImageResponse::_internal_mutable_image_data_float() {
  return &image_data_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DCMPixImageResponse::mutable_image_data_float() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.DCMPixImageResponse.image_data_float)
  return _internal_mutable_image_data_float();
}

// repeated int32 image_data_argb = 6;
inline int DCMPixImageResponse::_internal_image_data_argb_size() const {
  return image_data_argb_.size();
}
inline int DCMPixImageResponse::image_data_argb_size() const {
  return _internal_image_data_argb_size();
}
inline void DCMPixImageResponse::clear_image_data_argb() {
  image_data_argb_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixImageResponse::_internal_image_data_argb(int index) const {
  return image_data_argb_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixImageResponse::image_data_argb(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixImageResponse.image_data_argb)
  return _internal_image_data_argb(index);
}
inline void DCMPixImageResponse::set_image_data_argb(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_data_argb_.Set(index, value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixImageResponse.image_data_argb)
}
inline void DCMPixImageResponse::_internal_add_image_data_argb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_data_argb_.Add(value);
}
inline void DCMPixImageResponse::add_image_data_argb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_image_data_argb(value);
  // @@protoc_insertion_point(field_add:osirixgrpc.DCMPixImageResponse.image_data_argb)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DCMPixImageResponse::_internal_image_data_argb() const {
  return image_data_argb_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DCMPixImageResponse::image_data_argb() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.DCMPixImageResponse.image_data_argb)
  return _internal_image_data_argb();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DCMPixImageResponse::_internal_mutable_image_data_argb() {
  return &image_data_argb_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DCMPixImageResponse::mutable_image_data_argb() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.DCMPixImageResponse.image_data_argb)
  return _internal_mutable_image_data_argb();
}

// -------------------------------------------------------------------

// DCMPixGetMapFromROIResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixGetMapFromROIResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixGetMapFromROIResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixGetMapFromROIResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixGetMapFromROIResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixGetMapFromROIResponse.status)
  return _internal_status();
}
inline void DCMPixGetMapFromROIResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixGetMapFromROIResponse.status)
}
inline ::osirixgrpc::Status* DCMPixGetMapFromROIResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixGetMapFromROIResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixGetMapFromROIResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixGetMapFromROIResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixGetMapFromROIResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixGetMapFromROIResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixGetMapFromROIResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixGetMapFromROIResponse.status)
}

// int32 rows = 2;
inline void DCMPixGetMapFromROIResponse::clear_rows() {
  rows_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixGetMapFromROIResponse::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixGetMapFromROIResponse::rows() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixGetMapFromROIResponse.rows)
  return _internal_rows();
}
inline void DCMPixGetMapFromROIResponse::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rows_ = value;
}
inline void DCMPixGetMapFromROIResponse::set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixGetMapFromROIResponse.rows)
}

// int32 columns = 3;
inline void DCMPixGetMapFromROIResponse::clear_columns() {
  columns_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixGetMapFromROIResponse::_internal_columns() const {
  return columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixGetMapFromROIResponse::columns() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixGetMapFromROIResponse.columns)
  return _internal_columns();
}
inline void DCMPixGetMapFromROIResponse::_internal_set_columns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  columns_ = value;
}
inline void DCMPixGetMapFromROIResponse::set_columns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_columns(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixGetMapFromROIResponse.columns)
}

// repeated bool map = 4;
inline int DCMPixGetMapFromROIResponse::_internal_map_size() const {
  return map_.size();
}
inline int DCMPixGetMapFromROIResponse::map_size() const {
  return _internal_map_size();
}
inline void DCMPixGetMapFromROIResponse::clear_map() {
  map_.Clear();
}
inline bool DCMPixGetMapFromROIResponse::_internal_map(int index) const {
  return map_.Get(index);
}
inline bool DCMPixGetMapFromROIResponse::map(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixGetMapFromROIResponse.map)
  return _internal_map(index);
}
inline void DCMPixGetMapFromROIResponse::set_map(int index, bool value) {
  map_.Set(index, value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixGetMapFromROIResponse.map)
}
inline void DCMPixGetMapFromROIResponse::_internal_add_map(bool value) {
  map_.Add(value);
}
inline void DCMPixGetMapFromROIResponse::add_map(bool value) {
  _internal_add_map(value);
  // @@protoc_insertion_point(field_add:osirixgrpc.DCMPixGetMapFromROIResponse.map)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
DCMPixGetMapFromROIResponse::_internal_map() const {
  return map_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
DCMPixGetMapFromROIResponse::map() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.DCMPixGetMapFromROIResponse.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
DCMPixGetMapFromROIResponse::_internal_mutable_map() {
  return &map_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
DCMPixGetMapFromROIResponse::mutable_map() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.DCMPixGetMapFromROIResponse.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// DCMPixShapeResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixShapeResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixShapeResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixShapeResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixShapeResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixShapeResponse.status)
  return _internal_status();
}
inline void DCMPixShapeResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixShapeResponse.status)
}
inline ::osirixgrpc::Status* DCMPixShapeResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixShapeResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixShapeResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixShapeResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixShapeResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixShapeResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixShapeResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixShapeResponse.status)
}

// int32 rows = 2;
inline void DCMPixShapeResponse::clear_rows() {
  rows_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixShapeResponse::_internal_rows() const {
  return rows_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixShapeResponse::rows() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixShapeResponse.rows)
  return _internal_rows();
}
inline void DCMPixShapeResponse::_internal_set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rows_ = value;
}
inline void DCMPixShapeResponse::set_rows(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rows(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixShapeResponse.rows)
}

// int32 columns = 3;
inline void DCMPixShapeResponse::clear_columns() {
  columns_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixShapeResponse::_internal_columns() const {
  return columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixShapeResponse::columns() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixShapeResponse.columns)
  return _internal_columns();
}
inline void DCMPixShapeResponse::_internal_set_columns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  columns_ = value;
}
inline void DCMPixShapeResponse::set_columns(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_columns(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixShapeResponse.columns)
}

// -------------------------------------------------------------------

// DCMPixSpacingResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixSpacingResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixSpacingResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixSpacingResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixSpacingResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixSpacingResponse.status)
  return _internal_status();
}
inline void DCMPixSpacingResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixSpacingResponse.status)
}
inline ::osirixgrpc::Status* DCMPixSpacingResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixSpacingResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixSpacingResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixSpacingResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixSpacingResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixSpacingResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixSpacingResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixSpacingResponse.status)
}

// float spacing_rows = 2;
inline void DCMPixSpacingResponse::clear_spacing_rows() {
  spacing_rows_ = 0;
}
inline float DCMPixSpacingResponse::_internal_spacing_rows() const {
  return spacing_rows_;
}
inline float DCMPixSpacingResponse::spacing_rows() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixSpacingResponse.spacing_rows)
  return _internal_spacing_rows();
}
inline void DCMPixSpacingResponse::_internal_set_spacing_rows(float value) {
  
  spacing_rows_ = value;
}
inline void DCMPixSpacingResponse::set_spacing_rows(float value) {
  _internal_set_spacing_rows(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixSpacingResponse.spacing_rows)
}

// float spacing_columns = 3;
inline void DCMPixSpacingResponse::clear_spacing_columns() {
  spacing_columns_ = 0;
}
inline float DCMPixSpacingResponse::_internal_spacing_columns() const {
  return spacing_columns_;
}
inline float DCMPixSpacingResponse::spacing_columns() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixSpacingResponse.spacing_columns)
  return _internal_spacing_columns();
}
inline void DCMPixSpacingResponse::_internal_set_spacing_columns(float value) {
  
  spacing_columns_ = value;
}
inline void DCMPixSpacingResponse::set_spacing_columns(float value) {
  _internal_set_spacing_columns(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixSpacingResponse.spacing_columns)
}

// -------------------------------------------------------------------

// DCMPixOriginResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixOriginResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixOriginResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixOriginResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixOriginResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixOriginResponse.status)
  return _internal_status();
}
inline void DCMPixOriginResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixOriginResponse.status)
}
inline ::osirixgrpc::Status* DCMPixOriginResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixOriginResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixOriginResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixOriginResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixOriginResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixOriginResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixOriginResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixOriginResponse.status)
}

// float origin_rows = 2;
inline void DCMPixOriginResponse::clear_origin_rows() {
  origin_rows_ = 0;
}
inline float DCMPixOriginResponse::_internal_origin_rows() const {
  return origin_rows_;
}
inline float DCMPixOriginResponse::origin_rows() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixOriginResponse.origin_rows)
  return _internal_origin_rows();
}
inline void DCMPixOriginResponse::_internal_set_origin_rows(float value) {
  
  origin_rows_ = value;
}
inline void DCMPixOriginResponse::set_origin_rows(float value) {
  _internal_set_origin_rows(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixOriginResponse.origin_rows)
}

// float origin_columns = 3;
inline void DCMPixOriginResponse::clear_origin_columns() {
  origin_columns_ = 0;
}
inline float DCMPixOriginResponse::_internal_origin_columns() const {
  return origin_columns_;
}
inline float DCMPixOriginResponse::origin_columns() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixOriginResponse.origin_columns)
  return _internal_origin_columns();
}
inline void DCMPixOriginResponse::_internal_set_origin_columns(float value) {
  
  origin_columns_ = value;
}
inline void DCMPixOriginResponse::set_origin_columns(float value) {
  _internal_set_origin_columns(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixOriginResponse.origin_columns)
}

// float origin_slices = 4;
inline void DCMPixOriginResponse::clear_origin_slices() {
  origin_slices_ = 0;
}
inline float DCMPixOriginResponse::_internal_origin_slices() const {
  return origin_slices_;
}
inline float DCMPixOriginResponse::origin_slices() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixOriginResponse.origin_slices)
  return _internal_origin_slices();
}
inline void DCMPixOriginResponse::_internal_set_origin_slices(float value) {
  
  origin_slices_ = value;
}
inline void DCMPixOriginResponse::set_origin_slices(float value) {
  _internal_set_origin_slices(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixOriginResponse.origin_slices)
}

// -------------------------------------------------------------------

// DCMPixOrientationResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixOrientationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixOrientationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixOrientationResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixOrientationResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixOrientationResponse.status)
  return _internal_status();
}
inline void DCMPixOrientationResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixOrientationResponse.status)
}
inline ::osirixgrpc::Status* DCMPixOrientationResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixOrientationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixOrientationResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixOrientationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixOrientationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixOrientationResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixOrientationResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixOrientationResponse.status)
}

// repeated float orientation = 2;
inline int DCMPixOrientationResponse::_internal_orientation_size() const {
  return orientation_.size();
}
inline int DCMPixOrientationResponse::orientation_size() const {
  return _internal_orientation_size();
}
inline void DCMPixOrientationResponse::clear_orientation() {
  orientation_.Clear();
}
inline float DCMPixOrientationResponse::_internal_orientation(int index) const {
  return orientation_.Get(index);
}
inline float DCMPixOrientationResponse::orientation(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixOrientationResponse.orientation)
  return _internal_orientation(index);
}
inline void DCMPixOrientationResponse::set_orientation(int index, float value) {
  orientation_.Set(index, value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixOrientationResponse.orientation)
}
inline void DCMPixOrientationResponse::_internal_add_orientation(float value) {
  orientation_.Add(value);
}
inline void DCMPixOrientationResponse::add_orientation(float value) {
  _internal_add_orientation(value);
  // @@protoc_insertion_point(field_add:osirixgrpc.DCMPixOrientationResponse.orientation)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DCMPixOrientationResponse::_internal_orientation() const {
  return orientation_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DCMPixOrientationResponse::orientation() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.DCMPixOrientationResponse.orientation)
  return _internal_orientation();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DCMPixOrientationResponse::_internal_mutable_orientation() {
  return &orientation_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DCMPixOrientationResponse::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.DCMPixOrientationResponse.orientation)
  return _internal_mutable_orientation();
}

// -------------------------------------------------------------------

// DCMPixSliceLocationResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixSliceLocationResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixSliceLocationResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixSliceLocationResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixSliceLocationResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixSliceLocationResponse.status)
  return _internal_status();
}
inline void DCMPixSliceLocationResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixSliceLocationResponse.status)
}
inline ::osirixgrpc::Status* DCMPixSliceLocationResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixSliceLocationResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixSliceLocationResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixSliceLocationResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixSliceLocationResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixSliceLocationResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixSliceLocationResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixSliceLocationResponse.status)
}

// float slice_location = 2;
inline void DCMPixSliceLocationResponse::clear_slice_location() {
  slice_location_ = 0;
}
inline float DCMPixSliceLocationResponse::_internal_slice_location() const {
  return slice_location_;
}
inline float DCMPixSliceLocationResponse::slice_location() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixSliceLocationResponse.slice_location)
  return _internal_slice_location();
}
inline void DCMPixSliceLocationResponse::_internal_set_slice_location(float value) {
  
  slice_location_ = value;
}
inline void DCMPixSliceLocationResponse::set_slice_location(float value) {
  _internal_set_slice_location(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixSliceLocationResponse.slice_location)
}

// -------------------------------------------------------------------

// DCMPixSourceFileResponse

// .osirixgrpc.Status status = 1;
inline bool DCMPixSourceFileResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool DCMPixSourceFileResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& DCMPixSourceFileResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& DCMPixSourceFileResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixSourceFileResponse.status)
  return _internal_status();
}
inline void DCMPixSourceFileResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixSourceFileResponse.status)
}
inline ::osirixgrpc::Status* DCMPixSourceFileResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* DCMPixSourceFileResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixSourceFileResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* DCMPixSourceFileResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* DCMPixSourceFileResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixSourceFileResponse.status)
  return _internal_mutable_status();
}
inline void DCMPixSourceFileResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixSourceFileResponse.status)
}

// string source_file = 2;
inline void DCMPixSourceFileResponse::clear_source_file() {
  source_file_.ClearToEmpty();
}
inline const std::string& DCMPixSourceFileResponse::source_file() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixSourceFileResponse.source_file)
  return _internal_source_file();
}
inline void DCMPixSourceFileResponse::set_source_file(const std::string& value) {
  _internal_set_source_file(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixSourceFileResponse.source_file)
}
inline std::string* DCMPixSourceFileResponse::mutable_source_file() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixSourceFileResponse.source_file)
  return _internal_mutable_source_file();
}
inline const std::string& DCMPixSourceFileResponse::_internal_source_file() const {
  return source_file_.Get();
}
inline void DCMPixSourceFileResponse::_internal_set_source_file(const std::string& value) {
  
  source_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DCMPixSourceFileResponse::set_source_file(std::string&& value) {
  
  source_file_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.DCMPixSourceFileResponse.source_file)
}
inline void DCMPixSourceFileResponse::set_source_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.DCMPixSourceFileResponse.source_file)
}
inline void DCMPixSourceFileResponse::set_source_file(const char* value,
    size_t size) {
  
  source_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.DCMPixSourceFileResponse.source_file)
}
inline std::string* DCMPixSourceFileResponse::_internal_mutable_source_file() {
  
  return source_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DCMPixSourceFileResponse::release_source_file() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixSourceFileResponse.source_file)
  return source_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DCMPixSourceFileResponse::set_allocated_source_file(std::string* source_file) {
  if (source_file != nullptr) {
    
  } else {
    
  }
  source_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_file,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixSourceFileResponse.source_file)
}

// -------------------------------------------------------------------

// DCMPixConvertToRGBRequest

// .osirixgrpc.DCMPix pix = 1;
inline bool DCMPixConvertToRGBRequest::_internal_has_pix() const {
  return this != internal_default_instance() && pix_ != nullptr;
}
inline bool DCMPixConvertToRGBRequest::has_pix() const {
  return _internal_has_pix();
}
inline const ::osirixgrpc::DCMPix& DCMPixConvertToRGBRequest::_internal_pix() const {
  const ::osirixgrpc::DCMPix* p = pix_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::DCMPix&>(
      ::osirixgrpc::_DCMPix_default_instance_);
}
inline const ::osirixgrpc::DCMPix& DCMPixConvertToRGBRequest::pix() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixConvertToRGBRequest.pix)
  return _internal_pix();
}
inline void DCMPixConvertToRGBRequest::unsafe_arena_set_allocated_pix(
    ::osirixgrpc::DCMPix* pix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix_);
  }
  pix_ = pix;
  if (pix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixConvertToRGBRequest.pix)
}
inline ::osirixgrpc::DCMPix* DCMPixConvertToRGBRequest::release_pix() {
  
  ::osirixgrpc::DCMPix* temp = pix_;
  pix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::DCMPix* DCMPixConvertToRGBRequest::unsafe_arena_release_pix() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixConvertToRGBRequest.pix)
  
  ::osirixgrpc::DCMPix* temp = pix_;
  pix_ = nullptr;
  return temp;
}
inline ::osirixgrpc::DCMPix* DCMPixConvertToRGBRequest::_internal_mutable_pix() {
  
  if (pix_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::DCMPix>(GetArena());
    pix_ = p;
  }
  return pix_;
}
inline ::osirixgrpc::DCMPix* DCMPixConvertToRGBRequest::mutable_pix() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixConvertToRGBRequest.pix)
  return _internal_mutable_pix();
}
inline void DCMPixConvertToRGBRequest::set_allocated_pix(::osirixgrpc::DCMPix* pix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix_);
  }
  if (pix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix)->GetArena();
    if (message_arena != submessage_arena) {
      pix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pix, submessage_arena);
    }
    
  } else {
    
  }
  pix_ = pix;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixConvertToRGBRequest.pix)
}

// int32 rgb_channel = 2;
inline void DCMPixConvertToRGBRequest::clear_rgb_channel() {
  rgb_channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixConvertToRGBRequest::_internal_rgb_channel() const {
  return rgb_channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixConvertToRGBRequest::rgb_channel() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixConvertToRGBRequest.rgb_channel)
  return _internal_rgb_channel();
}
inline void DCMPixConvertToRGBRequest::_internal_set_rgb_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rgb_channel_ = value;
}
inline void DCMPixConvertToRGBRequest::set_rgb_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rgb_channel(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixConvertToRGBRequest.rgb_channel)
}

// -------------------------------------------------------------------

// DCMPixConvertToBWRequest

// .osirixgrpc.DCMPix pix = 1;
inline bool DCMPixConvertToBWRequest::_internal_has_pix() const {
  return this != internal_default_instance() && pix_ != nullptr;
}
inline bool DCMPixConvertToBWRequest::has_pix() const {
  return _internal_has_pix();
}
inline const ::osirixgrpc::DCMPix& DCMPixConvertToBWRequest::_internal_pix() const {
  const ::osirixgrpc::DCMPix* p = pix_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::DCMPix&>(
      ::osirixgrpc::_DCMPix_default_instance_);
}
inline const ::osirixgrpc::DCMPix& DCMPixConvertToBWRequest::pix() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixConvertToBWRequest.pix)
  return _internal_pix();
}
inline void DCMPixConvertToBWRequest::unsafe_arena_set_allocated_pix(
    ::osirixgrpc::DCMPix* pix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix_);
  }
  pix_ = pix;
  if (pix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixConvertToBWRequest.pix)
}
inline ::osirixgrpc::DCMPix* DCMPixConvertToBWRequest::release_pix() {
  
  ::osirixgrpc::DCMPix* temp = pix_;
  pix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::DCMPix* DCMPixConvertToBWRequest::unsafe_arena_release_pix() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixConvertToBWRequest.pix)
  
  ::osirixgrpc::DCMPix* temp = pix_;
  pix_ = nullptr;
  return temp;
}
inline ::osirixgrpc::DCMPix* DCMPixConvertToBWRequest::_internal_mutable_pix() {
  
  if (pix_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::DCMPix>(GetArena());
    pix_ = p;
  }
  return pix_;
}
inline ::osirixgrpc::DCMPix* DCMPixConvertToBWRequest::mutable_pix() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixConvertToBWRequest.pix)
  return _internal_mutable_pix();
}
inline void DCMPixConvertToBWRequest::set_allocated_pix(::osirixgrpc::DCMPix* pix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix_);
  }
  if (pix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix)->GetArena();
    if (message_arena != submessage_arena) {
      pix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pix, submessage_arena);
    }
    
  } else {
    
  }
  pix_ = pix;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixConvertToBWRequest.pix)
}

// int32 bw_channel = 2;
inline void DCMPixConvertToBWRequest::clear_bw_channel() {
  bw_channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixConvertToBWRequest::_internal_bw_channel() const {
  return bw_channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixConvertToBWRequest::bw_channel() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixConvertToBWRequest.bw_channel)
  return _internal_bw_channel();
}
inline void DCMPixConvertToBWRequest::_internal_set_bw_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  bw_channel_ = value;
}
inline void DCMPixConvertToBWRequest::set_bw_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_bw_channel(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixConvertToBWRequest.bw_channel)
}

// -------------------------------------------------------------------

// DCMPixComputeROIRequest

// .osirixgrpc.DCMPix pix = 1;
inline bool DCMPixComputeROIRequest::_internal_has_pix() const {
  return this != internal_default_instance() && pix_ != nullptr;
}
inline bool DCMPixComputeROIRequest::has_pix() const {
  return _internal_has_pix();
}
inline const ::osirixgrpc::DCMPix& DCMPixComputeROIRequest::_internal_pix() const {
  const ::osirixgrpc::DCMPix* p = pix_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::DCMPix&>(
      ::osirixgrpc::_DCMPix_default_instance_);
}
inline const ::osirixgrpc::DCMPix& DCMPixComputeROIRequest::pix() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixComputeROIRequest.pix)
  return _internal_pix();
}
inline void DCMPixComputeROIRequest::unsafe_arena_set_allocated_pix(
    ::osirixgrpc::DCMPix* pix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix_);
  }
  pix_ = pix;
  if (pix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixComputeROIRequest.pix)
}
inline ::osirixgrpc::DCMPix* DCMPixComputeROIRequest::release_pix() {
  
  ::osirixgrpc::DCMPix* temp = pix_;
  pix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::DCMPix* DCMPixComputeROIRequest::unsafe_arena_release_pix() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixComputeROIRequest.pix)
  
  ::osirixgrpc::DCMPix* temp = pix_;
  pix_ = nullptr;
  return temp;
}
inline ::osirixgrpc::DCMPix* DCMPixComputeROIRequest::_internal_mutable_pix() {
  
  if (pix_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::DCMPix>(GetArena());
    pix_ = p;
  }
  return pix_;
}
inline ::osirixgrpc::DCMPix* DCMPixComputeROIRequest::mutable_pix() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixComputeROIRequest.pix)
  return _internal_mutable_pix();
}
inline void DCMPixComputeROIRequest::set_allocated_pix(::osirixgrpc::DCMPix* pix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix_);
  }
  if (pix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix)->GetArena();
    if (message_arena != submessage_arena) {
      pix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pix, submessage_arena);
    }
    
  } else {
    
  }
  pix_ = pix;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixComputeROIRequest.pix)
}

// .osirixgrpc.ROI roi = 2;
inline bool DCMPixComputeROIRequest::_internal_has_roi() const {
  return this != internal_default_instance() && roi_ != nullptr;
}
inline bool DCMPixComputeROIRequest::has_roi() const {
  return _internal_has_roi();
}
inline const ::osirixgrpc::ROI& DCMPixComputeROIRequest::_internal_roi() const {
  const ::osirixgrpc::ROI* p = roi_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ROI&>(
      ::osirixgrpc::_ROI_default_instance_);
}
inline const ::osirixgrpc::ROI& DCMPixComputeROIRequest::roi() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixComputeROIRequest.roi)
  return _internal_roi();
}
inline void DCMPixComputeROIRequest::unsafe_arena_set_allocated_roi(
    ::osirixgrpc::ROI* roi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_);
  }
  roi_ = roi;
  if (roi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixComputeROIRequest.roi)
}
inline ::osirixgrpc::ROI* DCMPixComputeROIRequest::release_roi() {
  
  ::osirixgrpc::ROI* temp = roi_;
  roi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::ROI* DCMPixComputeROIRequest::unsafe_arena_release_roi() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixComputeROIRequest.roi)
  
  ::osirixgrpc::ROI* temp = roi_;
  roi_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ROI* DCMPixComputeROIRequest::_internal_mutable_roi() {
  
  if (roi_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ROI>(GetArena());
    roi_ = p;
  }
  return roi_;
}
inline ::osirixgrpc::ROI* DCMPixComputeROIRequest::mutable_roi() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixComputeROIRequest.roi)
  return _internal_mutable_roi();
}
inline void DCMPixComputeROIRequest::set_allocated_roi(::osirixgrpc::ROI* roi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_);
  }
  if (roi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi)->GetArena();
    if (message_arena != submessage_arena) {
      roi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi, submessage_arena);
    }
    
  } else {
    
  }
  roi_ = roi;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixComputeROIRequest.roi)
}

// -------------------------------------------------------------------

// DCMPixROIValuesRequest

// .osirixgrpc.DCMPix pix = 1;
inline bool DCMPixROIValuesRequest::_internal_has_pix() const {
  return this != internal_default_instance() && pix_ != nullptr;
}
inline bool DCMPixROIValuesRequest::has_pix() const {
  return _internal_has_pix();
}
inline const ::osirixgrpc::DCMPix& DCMPixROIValuesRequest::_internal_pix() const {
  const ::osirixgrpc::DCMPix* p = pix_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::DCMPix&>(
      ::osirixgrpc::_DCMPix_default_instance_);
}
inline const ::osirixgrpc::DCMPix& DCMPixROIValuesRequest::pix() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixROIValuesRequest.pix)
  return _internal_pix();
}
inline void DCMPixROIValuesRequest::unsafe_arena_set_allocated_pix(
    ::osirixgrpc::DCMPix* pix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix_);
  }
  pix_ = pix;
  if (pix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixROIValuesRequest.pix)
}
inline ::osirixgrpc::DCMPix* DCMPixROIValuesRequest::release_pix() {
  
  ::osirixgrpc::DCMPix* temp = pix_;
  pix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::DCMPix* DCMPixROIValuesRequest::unsafe_arena_release_pix() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixROIValuesRequest.pix)
  
  ::osirixgrpc::DCMPix* temp = pix_;
  pix_ = nullptr;
  return temp;
}
inline ::osirixgrpc::DCMPix* DCMPixROIValuesRequest::_internal_mutable_pix() {
  
  if (pix_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::DCMPix>(GetArena());
    pix_ = p;
  }
  return pix_;
}
inline ::osirixgrpc::DCMPix* DCMPixROIValuesRequest::mutable_pix() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixROIValuesRequest.pix)
  return _internal_mutable_pix();
}
inline void DCMPixROIValuesRequest::set_allocated_pix(::osirixgrpc::DCMPix* pix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix_);
  }
  if (pix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix)->GetArena();
    if (message_arena != submessage_arena) {
      pix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pix, submessage_arena);
    }
    
  } else {
    
  }
  pix_ = pix;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixROIValuesRequest.pix)
}

// .osirixgrpc.ROI roi = 2;
inline bool DCMPixROIValuesRequest::_internal_has_roi() const {
  return this != internal_default_instance() && roi_ != nullptr;
}
inline bool DCMPixROIValuesRequest::has_roi() const {
  return _internal_has_roi();
}
inline const ::osirixgrpc::ROI& DCMPixROIValuesRequest::_internal_roi() const {
  const ::osirixgrpc::ROI* p = roi_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ROI&>(
      ::osirixgrpc::_ROI_default_instance_);
}
inline const ::osirixgrpc::ROI& DCMPixROIValuesRequest::roi() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixROIValuesRequest.roi)
  return _internal_roi();
}
inline void DCMPixROIValuesRequest::unsafe_arena_set_allocated_roi(
    ::osirixgrpc::ROI* roi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_);
  }
  roi_ = roi;
  if (roi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixROIValuesRequest.roi)
}
inline ::osirixgrpc::ROI* DCMPixROIValuesRequest::release_roi() {
  
  ::osirixgrpc::ROI* temp = roi_;
  roi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::ROI* DCMPixROIValuesRequest::unsafe_arena_release_roi() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixROIValuesRequest.roi)
  
  ::osirixgrpc::ROI* temp = roi_;
  roi_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ROI* DCMPixROIValuesRequest::_internal_mutable_roi() {
  
  if (roi_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ROI>(GetArena());
    roi_ = p;
  }
  return roi_;
}
inline ::osirixgrpc::ROI* DCMPixROIValuesRequest::mutable_roi() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixROIValuesRequest.roi)
  return _internal_mutable_roi();
}
inline void DCMPixROIValuesRequest::set_allocated_roi(::osirixgrpc::ROI* roi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_);
  }
  if (roi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi)->GetArena();
    if (message_arena != submessage_arena) {
      roi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi, submessage_arena);
    }
    
  } else {
    
  }
  roi_ = roi;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixROIValuesRequest.roi)
}

// -------------------------------------------------------------------

// DCMPixSetImageRequest

// .osirixgrpc.DCMPix pix = 1;
inline bool DCMPixSetImageRequest::_internal_has_pix() const {
  return this != internal_default_instance() && pix_ != nullptr;
}
inline bool DCMPixSetImageRequest::has_pix() const {
  return _internal_has_pix();
}
inline const ::osirixgrpc::DCMPix& DCMPixSetImageRequest::_internal_pix() const {
  const ::osirixgrpc::DCMPix* p = pix_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::DCMPix&>(
      ::osirixgrpc::_DCMPix_default_instance_);
}
inline const ::osirixgrpc::DCMPix& DCMPixSetImageRequest::pix() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixSetImageRequest.pix)
  return _internal_pix();
}
inline void DCMPixSetImageRequest::unsafe_arena_set_allocated_pix(
    ::osirixgrpc::DCMPix* pix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix_);
  }
  pix_ = pix;
  if (pix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixSetImageRequest.pix)
}
inline ::osirixgrpc::DCMPix* DCMPixSetImageRequest::release_pix() {
  
  ::osirixgrpc::DCMPix* temp = pix_;
  pix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::DCMPix* DCMPixSetImageRequest::unsafe_arena_release_pix() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixSetImageRequest.pix)
  
  ::osirixgrpc::DCMPix* temp = pix_;
  pix_ = nullptr;
  return temp;
}
inline ::osirixgrpc::DCMPix* DCMPixSetImageRequest::_internal_mutable_pix() {
  
  if (pix_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::DCMPix>(GetArena());
    pix_ = p;
  }
  return pix_;
}
inline ::osirixgrpc::DCMPix* DCMPixSetImageRequest::mutable_pix() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixSetImageRequest.pix)
  return _internal_mutable_pix();
}
inline void DCMPixSetImageRequest::set_allocated_pix(::osirixgrpc::DCMPix* pix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix_);
  }
  if (pix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix)->GetArena();
    if (message_arena != submessage_arena) {
      pix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pix, submessage_arena);
    }
    
  } else {
    
  }
  pix_ = pix;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixSetImageRequest.pix)
}

// repeated float image_data_float = 2;
inline int DCMPixSetImageRequest::_internal_image_data_float_size() const {
  return image_data_float_.size();
}
inline int DCMPixSetImageRequest::image_data_float_size() const {
  return _internal_image_data_float_size();
}
inline void DCMPixSetImageRequest::clear_image_data_float() {
  image_data_float_.Clear();
}
inline float DCMPixSetImageRequest::_internal_image_data_float(int index) const {
  return image_data_float_.Get(index);
}
inline float DCMPixSetImageRequest::image_data_float(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixSetImageRequest.image_data_float)
  return _internal_image_data_float(index);
}
inline void DCMPixSetImageRequest::set_image_data_float(int index, float value) {
  image_data_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixSetImageRequest.image_data_float)
}
inline void DCMPixSetImageRequest::_internal_add_image_data_float(float value) {
  image_data_float_.Add(value);
}
inline void DCMPixSetImageRequest::add_image_data_float(float value) {
  _internal_add_image_data_float(value);
  // @@protoc_insertion_point(field_add:osirixgrpc.DCMPixSetImageRequest.image_data_float)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DCMPixSetImageRequest::_internal_image_data_float() const {
  return image_data_float_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
DCMPixSetImageRequest::image_data_float() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.DCMPixSetImageRequest.image_data_float)
  return _internal_image_data_float();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DCMPixSetImageRequest::_internal_mutable_image_data_float() {
  return &image_data_float_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
DCMPixSetImageRequest::mutable_image_data_float() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.DCMPixSetImageRequest.image_data_float)
  return _internal_mutable_image_data_float();
}

// repeated int32 image_data_argb = 3;
inline int DCMPixSetImageRequest::_internal_image_data_argb_size() const {
  return image_data_argb_.size();
}
inline int DCMPixSetImageRequest::image_data_argb_size() const {
  return _internal_image_data_argb_size();
}
inline void DCMPixSetImageRequest::clear_image_data_argb() {
  image_data_argb_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixSetImageRequest::_internal_image_data_argb(int index) const {
  return image_data_argb_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DCMPixSetImageRequest::image_data_argb(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixSetImageRequest.image_data_argb)
  return _internal_image_data_argb(index);
}
inline void DCMPixSetImageRequest::set_image_data_argb(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_data_argb_.Set(index, value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPixSetImageRequest.image_data_argb)
}
inline void DCMPixSetImageRequest::_internal_add_image_data_argb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  image_data_argb_.Add(value);
}
inline void DCMPixSetImageRequest::add_image_data_argb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_image_data_argb(value);
  // @@protoc_insertion_point(field_add:osirixgrpc.DCMPixSetImageRequest.image_data_argb)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DCMPixSetImageRequest::_internal_image_data_argb() const {
  return image_data_argb_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
DCMPixSetImageRequest::image_data_argb() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.DCMPixSetImageRequest.image_data_argb)
  return _internal_image_data_argb();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DCMPixSetImageRequest::_internal_mutable_image_data_argb() {
  return &image_data_argb_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
DCMPixSetImageRequest::mutable_image_data_argb() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.DCMPixSetImageRequest.image_data_argb)
  return _internal_mutable_image_data_argb();
}

// -------------------------------------------------------------------

// DCMPixGetMapFromROIRequest

// .osirixgrpc.DCMPix pix = 1;
inline bool DCMPixGetMapFromROIRequest::_internal_has_pix() const {
  return this != internal_default_instance() && pix_ != nullptr;
}
inline bool DCMPixGetMapFromROIRequest::has_pix() const {
  return _internal_has_pix();
}
inline const ::osirixgrpc::DCMPix& DCMPixGetMapFromROIRequest::_internal_pix() const {
  const ::osirixgrpc::DCMPix* p = pix_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::DCMPix&>(
      ::osirixgrpc::_DCMPix_default_instance_);
}
inline const ::osirixgrpc::DCMPix& DCMPixGetMapFromROIRequest::pix() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixGetMapFromROIRequest.pix)
  return _internal_pix();
}
inline void DCMPixGetMapFromROIRequest::unsafe_arena_set_allocated_pix(
    ::osirixgrpc::DCMPix* pix) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix_);
  }
  pix_ = pix;
  if (pix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixGetMapFromROIRequest.pix)
}
inline ::osirixgrpc::DCMPix* DCMPixGetMapFromROIRequest::release_pix() {
  
  ::osirixgrpc::DCMPix* temp = pix_;
  pix_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::DCMPix* DCMPixGetMapFromROIRequest::unsafe_arena_release_pix() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixGetMapFromROIRequest.pix)
  
  ::osirixgrpc::DCMPix* temp = pix_;
  pix_ = nullptr;
  return temp;
}
inline ::osirixgrpc::DCMPix* DCMPixGetMapFromROIRequest::_internal_mutable_pix() {
  
  if (pix_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::DCMPix>(GetArena());
    pix_ = p;
  }
  return pix_;
}
inline ::osirixgrpc::DCMPix* DCMPixGetMapFromROIRequest::mutable_pix() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixGetMapFromROIRequest.pix)
  return _internal_mutable_pix();
}
inline void DCMPixGetMapFromROIRequest::set_allocated_pix(::osirixgrpc::DCMPix* pix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix_);
  }
  if (pix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pix)->GetArena();
    if (message_arena != submessage_arena) {
      pix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pix, submessage_arena);
    }
    
  } else {
    
  }
  pix_ = pix;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixGetMapFromROIRequest.pix)
}

// .osirixgrpc.ROI roi = 2;
inline bool DCMPixGetMapFromROIRequest::_internal_has_roi() const {
  return this != internal_default_instance() && roi_ != nullptr;
}
inline bool DCMPixGetMapFromROIRequest::has_roi() const {
  return _internal_has_roi();
}
inline const ::osirixgrpc::ROI& DCMPixGetMapFromROIRequest::_internal_roi() const {
  const ::osirixgrpc::ROI* p = roi_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ROI&>(
      ::osirixgrpc::_ROI_default_instance_);
}
inline const ::osirixgrpc::ROI& DCMPixGetMapFromROIRequest::roi() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPixGetMapFromROIRequest.roi)
  return _internal_roi();
}
inline void DCMPixGetMapFromROIRequest::unsafe_arena_set_allocated_roi(
    ::osirixgrpc::ROI* roi) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_);
  }
  roi_ = roi;
  if (roi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.DCMPixGetMapFromROIRequest.roi)
}
inline ::osirixgrpc::ROI* DCMPixGetMapFromROIRequest::release_roi() {
  
  ::osirixgrpc::ROI* temp = roi_;
  roi_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::ROI* DCMPixGetMapFromROIRequest::unsafe_arena_release_roi() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPixGetMapFromROIRequest.roi)
  
  ::osirixgrpc::ROI* temp = roi_;
  roi_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ROI* DCMPixGetMapFromROIRequest::_internal_mutable_roi() {
  
  if (roi_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ROI>(GetArena());
    roi_ = p;
  }
  return roi_;
}
inline ::osirixgrpc::ROI* DCMPixGetMapFromROIRequest::mutable_roi() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPixGetMapFromROIRequest.roi)
  return _internal_mutable_roi();
}
inline void DCMPixGetMapFromROIRequest::set_allocated_roi(::osirixgrpc::ROI* roi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_);
  }
  if (roi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi)->GetArena();
    if (message_arena != submessage_arena) {
      roi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi, submessage_arena);
    }
    
  } else {
    
  }
  roi_ = roi;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPixGetMapFromROIRequest.roi)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osirixgrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dcmpix_2eproto
