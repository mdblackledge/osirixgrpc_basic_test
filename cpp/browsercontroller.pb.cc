// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: browsercontroller.proto

#include "browsercontroller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BrowserController_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DicomSeries_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DicomStudy_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_utilities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_utilities_2eproto;
namespace osirixgrpc {
class BrowserControllerDatabaseSelectionResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BrowserControllerDatabaseSelectionResponse> _instance;
} _BrowserControllerDatabaseSelectionResponse_default_instance_;
class BrowserControllerCopyFilesIfNeededRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BrowserControllerCopyFilesIfNeededRequest> _instance;
} _BrowserControllerCopyFilesIfNeededRequest_default_instance_;
}  // namespace osirixgrpc
static void InitDefaultsscc_info_BrowserControllerCopyFilesIfNeededRequest_browsercontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_BrowserControllerCopyFilesIfNeededRequest_default_instance_;
    new (ptr) ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BrowserControllerCopyFilesIfNeededRequest_browsercontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BrowserControllerCopyFilesIfNeededRequest_browsercontroller_2eproto}, {
      &scc_info_BrowserController_types_2eproto.base,}};

static void InitDefaultsscc_info_BrowserControllerDatabaseSelectionResponse_browsercontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_BrowserControllerDatabaseSelectionResponse_default_instance_;
    new (ptr) ::osirixgrpc::BrowserControllerDatabaseSelectionResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_BrowserControllerDatabaseSelectionResponse_browsercontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_BrowserControllerDatabaseSelectionResponse_browsercontroller_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,
      &scc_info_DicomSeries_types_2eproto.base,
      &scc_info_DicomStudy_types_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_browsercontroller_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_browsercontroller_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_browsercontroller_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_browsercontroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::BrowserControllerDatabaseSelectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::BrowserControllerDatabaseSelectionResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::BrowserControllerDatabaseSelectionResponse, series_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::BrowserControllerDatabaseSelectionResponse, studies_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest, browser_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest, paths_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osirixgrpc::BrowserControllerDatabaseSelectionResponse)},
  { 8, -1, sizeof(::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_BrowserControllerDatabaseSelectionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_BrowserControllerCopyFilesIfNeededRequest_default_instance_),
};

const char descriptor_table_protodef_browsercontroller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027browsercontroller.proto\022\nosirixgrpc\032\017u"
  "tilities.proto\032\013types.proto\"\242\001\n*BrowserC"
  "ontrollerDatabaseSelectionResponse\022\"\n\006st"
  "atus\030\001 \001(\0132\022.osirixgrpc.Status\022\'\n\006series"
  "\030\002 \003(\0132\027.osirixgrpc.DicomSeries\022\'\n\007studi"
  "es\030\003 \003(\0132\026.osirixgrpc.DicomStudy\"j\n)Brow"
  "serControllerCopyFilesIfNeededRequest\022.\n"
  "\007browser\030\001 \001(\0132\035.osirixgrpc.BrowserContr"
  "oller\022\r\n\005paths\030\002 \003(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_browsercontroller_2eproto_deps[2] = {
  &::descriptor_table_types_2eproto,
  &::descriptor_table_utilities_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_browsercontroller_2eproto_sccs[2] = {
  &scc_info_BrowserControllerCopyFilesIfNeededRequest_browsercontroller_2eproto.base,
  &scc_info_BrowserControllerDatabaseSelectionResponse_browsercontroller_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_browsercontroller_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_browsercontroller_2eproto = {
  false, false, descriptor_table_protodef_browsercontroller_2eproto, "browsercontroller.proto", 348,
  &descriptor_table_browsercontroller_2eproto_once, descriptor_table_browsercontroller_2eproto_sccs, descriptor_table_browsercontroller_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_browsercontroller_2eproto::offsets,
  file_level_metadata_browsercontroller_2eproto, 2, file_level_enum_descriptors_browsercontroller_2eproto, file_level_service_descriptors_browsercontroller_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_browsercontroller_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_browsercontroller_2eproto)), true);
namespace osirixgrpc {

// ===================================================================

class BrowserControllerDatabaseSelectionResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const BrowserControllerDatabaseSelectionResponse* msg);
};

const ::osirixgrpc::Status&
BrowserControllerDatabaseSelectionResponse::_Internal::status(const BrowserControllerDatabaseSelectionResponse* msg) {
  return *msg->status_;
}
void BrowserControllerDatabaseSelectionResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void BrowserControllerDatabaseSelectionResponse::clear_series() {
  series_.Clear();
}
void BrowserControllerDatabaseSelectionResponse::clear_studies() {
  studies_.Clear();
}
BrowserControllerDatabaseSelectionResponse::BrowserControllerDatabaseSelectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  series_(arena),
  studies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.BrowserControllerDatabaseSelectionResponse)
}
BrowserControllerDatabaseSelectionResponse::BrowserControllerDatabaseSelectionResponse(const BrowserControllerDatabaseSelectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      series_(from.series_),
      studies_(from.studies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.BrowserControllerDatabaseSelectionResponse)
}

void BrowserControllerDatabaseSelectionResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BrowserControllerDatabaseSelectionResponse_browsercontroller_2eproto.base);
  status_ = nullptr;
}

BrowserControllerDatabaseSelectionResponse::~BrowserControllerDatabaseSelectionResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.BrowserControllerDatabaseSelectionResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BrowserControllerDatabaseSelectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void BrowserControllerDatabaseSelectionResponse::ArenaDtor(void* object) {
  BrowserControllerDatabaseSelectionResponse* _this = reinterpret_cast< BrowserControllerDatabaseSelectionResponse* >(object);
  (void)_this;
}
void BrowserControllerDatabaseSelectionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BrowserControllerDatabaseSelectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BrowserControllerDatabaseSelectionResponse& BrowserControllerDatabaseSelectionResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BrowserControllerDatabaseSelectionResponse_browsercontroller_2eproto.base);
  return *internal_default_instance();
}


void BrowserControllerDatabaseSelectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.BrowserControllerDatabaseSelectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  series_.Clear();
  studies_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrowserControllerDatabaseSelectionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osirixgrpc.DicomSeries series = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_series(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .osirixgrpc.DicomStudy studies = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_studies(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BrowserControllerDatabaseSelectionResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.BrowserControllerDatabaseSelectionResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .osirixgrpc.DicomSeries series = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_series_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_series(i), target, stream);
  }

  // repeated .osirixgrpc.DicomStudy studies = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_studies_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_studies(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.BrowserControllerDatabaseSelectionResponse)
  return target;
}

size_t BrowserControllerDatabaseSelectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.BrowserControllerDatabaseSelectionResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osirixgrpc.DicomSeries series = 2;
  total_size += 1UL * this->_internal_series_size();
  for (const auto& msg : this->series_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .osirixgrpc.DicomStudy studies = 3;
  total_size += 1UL * this->_internal_studies_size();
  for (const auto& msg : this->studies_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrowserControllerDatabaseSelectionResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.BrowserControllerDatabaseSelectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BrowserControllerDatabaseSelectionResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BrowserControllerDatabaseSelectionResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.BrowserControllerDatabaseSelectionResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.BrowserControllerDatabaseSelectionResponse)
    MergeFrom(*source);
  }
}

void BrowserControllerDatabaseSelectionResponse::MergeFrom(const BrowserControllerDatabaseSelectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.BrowserControllerDatabaseSelectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  series_.MergeFrom(from.series_);
  studies_.MergeFrom(from.studies_);
  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
}

void BrowserControllerDatabaseSelectionResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.BrowserControllerDatabaseSelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrowserControllerDatabaseSelectionResponse::CopyFrom(const BrowserControllerDatabaseSelectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.BrowserControllerDatabaseSelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowserControllerDatabaseSelectionResponse::IsInitialized() const {
  return true;
}

void BrowserControllerDatabaseSelectionResponse::InternalSwap(BrowserControllerDatabaseSelectionResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  series_.InternalSwap(&other->series_);
  studies_.InternalSwap(&other->studies_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BrowserControllerDatabaseSelectionResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BrowserControllerCopyFilesIfNeededRequest::_Internal {
 public:
  static const ::osirixgrpc::BrowserController& browser(const BrowserControllerCopyFilesIfNeededRequest* msg);
};

const ::osirixgrpc::BrowserController&
BrowserControllerCopyFilesIfNeededRequest::_Internal::browser(const BrowserControllerCopyFilesIfNeededRequest* msg) {
  return *msg->browser_;
}
void BrowserControllerCopyFilesIfNeededRequest::clear_browser() {
  if (GetArena() == nullptr && browser_ != nullptr) {
    delete browser_;
  }
  browser_ = nullptr;
}
BrowserControllerCopyFilesIfNeededRequest::BrowserControllerCopyFilesIfNeededRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  paths_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.BrowserControllerCopyFilesIfNeededRequest)
}
BrowserControllerCopyFilesIfNeededRequest::BrowserControllerCopyFilesIfNeededRequest(const BrowserControllerCopyFilesIfNeededRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      paths_(from.paths_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_browser()) {
    browser_ = new ::osirixgrpc::BrowserController(*from.browser_);
  } else {
    browser_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.BrowserControllerCopyFilesIfNeededRequest)
}

void BrowserControllerCopyFilesIfNeededRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BrowserControllerCopyFilesIfNeededRequest_browsercontroller_2eproto.base);
  browser_ = nullptr;
}

BrowserControllerCopyFilesIfNeededRequest::~BrowserControllerCopyFilesIfNeededRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.BrowserControllerCopyFilesIfNeededRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BrowserControllerCopyFilesIfNeededRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete browser_;
}

void BrowserControllerCopyFilesIfNeededRequest::ArenaDtor(void* object) {
  BrowserControllerCopyFilesIfNeededRequest* _this = reinterpret_cast< BrowserControllerCopyFilesIfNeededRequest* >(object);
  (void)_this;
}
void BrowserControllerCopyFilesIfNeededRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BrowserControllerCopyFilesIfNeededRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BrowserControllerCopyFilesIfNeededRequest& BrowserControllerCopyFilesIfNeededRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BrowserControllerCopyFilesIfNeededRequest_browsercontroller_2eproto.base);
  return *internal_default_instance();
}


void BrowserControllerCopyFilesIfNeededRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.BrowserControllerCopyFilesIfNeededRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paths_.Clear();
  if (GetArena() == nullptr && browser_ != nullptr) {
    delete browser_;
  }
  browser_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BrowserControllerCopyFilesIfNeededRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.BrowserController browser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_browser(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string paths = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_paths();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osirixgrpc.BrowserControllerCopyFilesIfNeededRequest.paths"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BrowserControllerCopyFilesIfNeededRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.BrowserControllerCopyFilesIfNeededRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.BrowserController browser = 1;
  if (this->has_browser()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::browser(this), target, stream);
  }

  // repeated string paths = 2;
  for (int i = 0, n = this->_internal_paths_size(); i < n; i++) {
    const auto& s = this->_internal_paths(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osirixgrpc.BrowserControllerCopyFilesIfNeededRequest.paths");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.BrowserControllerCopyFilesIfNeededRequest)
  return target;
}

size_t BrowserControllerCopyFilesIfNeededRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.BrowserControllerCopyFilesIfNeededRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string paths = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(paths_.size());
  for (int i = 0, n = paths_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      paths_.Get(i));
  }

  // .osirixgrpc.BrowserController browser = 1;
  if (this->has_browser()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *browser_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BrowserControllerCopyFilesIfNeededRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.BrowserControllerCopyFilesIfNeededRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BrowserControllerCopyFilesIfNeededRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BrowserControllerCopyFilesIfNeededRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.BrowserControllerCopyFilesIfNeededRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.BrowserControllerCopyFilesIfNeededRequest)
    MergeFrom(*source);
  }
}

void BrowserControllerCopyFilesIfNeededRequest::MergeFrom(const BrowserControllerCopyFilesIfNeededRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.BrowserControllerCopyFilesIfNeededRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paths_.MergeFrom(from.paths_);
  if (from.has_browser()) {
    _internal_mutable_browser()->::osirixgrpc::BrowserController::MergeFrom(from._internal_browser());
  }
}

void BrowserControllerCopyFilesIfNeededRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.BrowserControllerCopyFilesIfNeededRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BrowserControllerCopyFilesIfNeededRequest::CopyFrom(const BrowserControllerCopyFilesIfNeededRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.BrowserControllerCopyFilesIfNeededRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BrowserControllerCopyFilesIfNeededRequest::IsInitialized() const {
  return true;
}

void BrowserControllerCopyFilesIfNeededRequest::InternalSwap(BrowserControllerCopyFilesIfNeededRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  paths_.InternalSwap(&other->paths_);
  swap(browser_, other->browser_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BrowserControllerCopyFilesIfNeededRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osirixgrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osirixgrpc::BrowserControllerDatabaseSelectionResponse* Arena::CreateMaybeMessage< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::BrowserControllerDatabaseSelectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest* Arena::CreateMaybeMessage< ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::BrowserControllerCopyFilesIfNeededRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
