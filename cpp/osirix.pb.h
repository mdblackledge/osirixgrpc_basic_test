// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osirix.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osirix_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osirix_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "roi.pb.h"
#include "roivolume.pb.h"
#include "dcmpix.pb.h"
#include "vrcontroller.pb.h"
#include "viewercontroller.pb.h"
#include "browsercontroller.pb.h"
#include "dicomimage.pb.h"
#include "dicomseries.pb.h"
#include "dicomstudy.pb.h"
#include "utilities.pb.h"
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osirix_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osirix_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osirix_2eproto;
namespace osirixgrpc {
class OsirixCurrentBrowserResponse;
class OsirixCurrentBrowserResponseDefaultTypeInternal;
extern OsirixCurrentBrowserResponseDefaultTypeInternal _OsirixCurrentBrowserResponse_default_instance_;
class OsirixDisplayed2DViewersResponse;
class OsirixDisplayed2DViewersResponseDefaultTypeInternal;
extern OsirixDisplayed2DViewersResponseDefaultTypeInternal _OsirixDisplayed2DViewersResponse_default_instance_;
class OsirixDisplayedVRControllersResponse;
class OsirixDisplayedVRControllersResponseDefaultTypeInternal;
extern OsirixDisplayedVRControllersResponseDefaultTypeInternal _OsirixDisplayedVRControllersResponse_default_instance_;
class OsirixFrontmostVRControllerResponse;
class OsirixFrontmostVRControllerResponseDefaultTypeInternal;
extern OsirixFrontmostVRControllerResponseDefaultTypeInternal _OsirixFrontmostVRControllerResponse_default_instance_;
class OsirixFrontmostViewerResponse;
class OsirixFrontmostViewerResponseDefaultTypeInternal;
extern OsirixFrontmostViewerResponseDefaultTypeInternal _OsirixFrontmostViewerResponse_default_instance_;
}  // namespace osirixgrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::osirixgrpc::OsirixCurrentBrowserResponse* Arena::CreateMaybeMessage<::osirixgrpc::OsirixCurrentBrowserResponse>(Arena*);
template<> ::osirixgrpc::OsirixDisplayed2DViewersResponse* Arena::CreateMaybeMessage<::osirixgrpc::OsirixDisplayed2DViewersResponse>(Arena*);
template<> ::osirixgrpc::OsirixDisplayedVRControllersResponse* Arena::CreateMaybeMessage<::osirixgrpc::OsirixDisplayedVRControllersResponse>(Arena*);
template<> ::osirixgrpc::OsirixFrontmostVRControllerResponse* Arena::CreateMaybeMessage<::osirixgrpc::OsirixFrontmostVRControllerResponse>(Arena*);
template<> ::osirixgrpc::OsirixFrontmostViewerResponse* Arena::CreateMaybeMessage<::osirixgrpc::OsirixFrontmostViewerResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osirixgrpc {

// ===================================================================

class OsirixCurrentBrowserResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.OsirixCurrentBrowserResponse) */ {
 public:
  inline OsirixCurrentBrowserResponse() : OsirixCurrentBrowserResponse(nullptr) {}
  virtual ~OsirixCurrentBrowserResponse();

  OsirixCurrentBrowserResponse(const OsirixCurrentBrowserResponse& from);
  OsirixCurrentBrowserResponse(OsirixCurrentBrowserResponse&& from) noexcept
    : OsirixCurrentBrowserResponse() {
    *this = ::std::move(from);
  }

  inline OsirixCurrentBrowserResponse& operator=(const OsirixCurrentBrowserResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OsirixCurrentBrowserResponse& operator=(OsirixCurrentBrowserResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OsirixCurrentBrowserResponse& default_instance();

  static inline const OsirixCurrentBrowserResponse* internal_default_instance() {
    return reinterpret_cast<const OsirixCurrentBrowserResponse*>(
               &_OsirixCurrentBrowserResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OsirixCurrentBrowserResponse& a, OsirixCurrentBrowserResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OsirixCurrentBrowserResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OsirixCurrentBrowserResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OsirixCurrentBrowserResponse* New() const final {
    return CreateMaybeMessage<OsirixCurrentBrowserResponse>(nullptr);
  }

  OsirixCurrentBrowserResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OsirixCurrentBrowserResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OsirixCurrentBrowserResponse& from);
  void MergeFrom(const OsirixCurrentBrowserResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OsirixCurrentBrowserResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.OsirixCurrentBrowserResponse";
  }
  protected:
  explicit OsirixCurrentBrowserResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osirix_2eproto);
    return ::descriptor_table_osirix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kBrowserControllerFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // .osirixgrpc.BrowserController browser_controller = 2;
  bool has_browser_controller() const;
  private:
  bool _internal_has_browser_controller() const;
  public:
  void clear_browser_controller();
  const ::osirixgrpc::BrowserController& browser_controller() const;
  ::osirixgrpc::BrowserController* release_browser_controller();
  ::osirixgrpc::BrowserController* mutable_browser_controller();
  void set_allocated_browser_controller(::osirixgrpc::BrowserController* browser_controller);
  private:
  const ::osirixgrpc::BrowserController& _internal_browser_controller() const;
  ::osirixgrpc::BrowserController* _internal_mutable_browser_controller();
  public:
  void unsafe_arena_set_allocated_browser_controller(
      ::osirixgrpc::BrowserController* browser_controller);
  ::osirixgrpc::BrowserController* unsafe_arena_release_browser_controller();

  // @@protoc_insertion_point(class_scope:osirixgrpc.OsirixCurrentBrowserResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  ::osirixgrpc::BrowserController* browser_controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osirix_2eproto;
};
// -------------------------------------------------------------------

class OsirixFrontmostViewerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.OsirixFrontmostViewerResponse) */ {
 public:
  inline OsirixFrontmostViewerResponse() : OsirixFrontmostViewerResponse(nullptr) {}
  virtual ~OsirixFrontmostViewerResponse();

  OsirixFrontmostViewerResponse(const OsirixFrontmostViewerResponse& from);
  OsirixFrontmostViewerResponse(OsirixFrontmostViewerResponse&& from) noexcept
    : OsirixFrontmostViewerResponse() {
    *this = ::std::move(from);
  }

  inline OsirixFrontmostViewerResponse& operator=(const OsirixFrontmostViewerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OsirixFrontmostViewerResponse& operator=(OsirixFrontmostViewerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OsirixFrontmostViewerResponse& default_instance();

  static inline const OsirixFrontmostViewerResponse* internal_default_instance() {
    return reinterpret_cast<const OsirixFrontmostViewerResponse*>(
               &_OsirixFrontmostViewerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OsirixFrontmostViewerResponse& a, OsirixFrontmostViewerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OsirixFrontmostViewerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OsirixFrontmostViewerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OsirixFrontmostViewerResponse* New() const final {
    return CreateMaybeMessage<OsirixFrontmostViewerResponse>(nullptr);
  }

  OsirixFrontmostViewerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OsirixFrontmostViewerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OsirixFrontmostViewerResponse& from);
  void MergeFrom(const OsirixFrontmostViewerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OsirixFrontmostViewerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.OsirixFrontmostViewerResponse";
  }
  protected:
  explicit OsirixFrontmostViewerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osirix_2eproto);
    return ::descriptor_table_osirix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kViewerControllerFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // .osirixgrpc.ViewerController viewer_controller = 2;
  bool has_viewer_controller() const;
  private:
  bool _internal_has_viewer_controller() const;
  public:
  void clear_viewer_controller();
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();

  // @@protoc_insertion_point(class_scope:osirixgrpc.OsirixFrontmostViewerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  ::osirixgrpc::ViewerController* viewer_controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osirix_2eproto;
};
// -------------------------------------------------------------------

class OsirixDisplayed2DViewersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.OsirixDisplayed2DViewersResponse) */ {
 public:
  inline OsirixDisplayed2DViewersResponse() : OsirixDisplayed2DViewersResponse(nullptr) {}
  virtual ~OsirixDisplayed2DViewersResponse();

  OsirixDisplayed2DViewersResponse(const OsirixDisplayed2DViewersResponse& from);
  OsirixDisplayed2DViewersResponse(OsirixDisplayed2DViewersResponse&& from) noexcept
    : OsirixDisplayed2DViewersResponse() {
    *this = ::std::move(from);
  }

  inline OsirixDisplayed2DViewersResponse& operator=(const OsirixDisplayed2DViewersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OsirixDisplayed2DViewersResponse& operator=(OsirixDisplayed2DViewersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OsirixDisplayed2DViewersResponse& default_instance();

  static inline const OsirixDisplayed2DViewersResponse* internal_default_instance() {
    return reinterpret_cast<const OsirixDisplayed2DViewersResponse*>(
               &_OsirixDisplayed2DViewersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OsirixDisplayed2DViewersResponse& a, OsirixDisplayed2DViewersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OsirixDisplayed2DViewersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OsirixDisplayed2DViewersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OsirixDisplayed2DViewersResponse* New() const final {
    return CreateMaybeMessage<OsirixDisplayed2DViewersResponse>(nullptr);
  }

  OsirixDisplayed2DViewersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OsirixDisplayed2DViewersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OsirixDisplayed2DViewersResponse& from);
  void MergeFrom(const OsirixDisplayed2DViewersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OsirixDisplayed2DViewersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.OsirixDisplayed2DViewersResponse";
  }
  protected:
  explicit OsirixDisplayed2DViewersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osirix_2eproto);
    return ::descriptor_table_osirix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewerControllersFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .osirixgrpc.ViewerController viewer_controllers = 2;
  int viewer_controllers_size() const;
  private:
  int _internal_viewer_controllers_size() const;
  public:
  void clear_viewer_controllers();
  ::osirixgrpc::ViewerController* mutable_viewer_controllers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerController >*
      mutable_viewer_controllers();
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controllers(int index) const;
  ::osirixgrpc::ViewerController* _internal_add_viewer_controllers();
  public:
  const ::osirixgrpc::ViewerController& viewer_controllers(int index) const;
  ::osirixgrpc::ViewerController* add_viewer_controllers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerController >&
      viewer_controllers() const;

  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:osirixgrpc.OsirixDisplayed2DViewersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerController > viewer_controllers_;
  ::osirixgrpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osirix_2eproto;
};
// -------------------------------------------------------------------

class OsirixFrontmostVRControllerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.OsirixFrontmostVRControllerResponse) */ {
 public:
  inline OsirixFrontmostVRControllerResponse() : OsirixFrontmostVRControllerResponse(nullptr) {}
  virtual ~OsirixFrontmostVRControllerResponse();

  OsirixFrontmostVRControllerResponse(const OsirixFrontmostVRControllerResponse& from);
  OsirixFrontmostVRControllerResponse(OsirixFrontmostVRControllerResponse&& from) noexcept
    : OsirixFrontmostVRControllerResponse() {
    *this = ::std::move(from);
  }

  inline OsirixFrontmostVRControllerResponse& operator=(const OsirixFrontmostVRControllerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OsirixFrontmostVRControllerResponse& operator=(OsirixFrontmostVRControllerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OsirixFrontmostVRControllerResponse& default_instance();

  static inline const OsirixFrontmostVRControllerResponse* internal_default_instance() {
    return reinterpret_cast<const OsirixFrontmostVRControllerResponse*>(
               &_OsirixFrontmostVRControllerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OsirixFrontmostVRControllerResponse& a, OsirixFrontmostVRControllerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OsirixFrontmostVRControllerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OsirixFrontmostVRControllerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OsirixFrontmostVRControllerResponse* New() const final {
    return CreateMaybeMessage<OsirixFrontmostVRControllerResponse>(nullptr);
  }

  OsirixFrontmostVRControllerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OsirixFrontmostVRControllerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OsirixFrontmostVRControllerResponse& from);
  void MergeFrom(const OsirixFrontmostVRControllerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OsirixFrontmostVRControllerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.OsirixFrontmostVRControllerResponse";
  }
  protected:
  explicit OsirixFrontmostVRControllerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osirix_2eproto);
    return ::descriptor_table_osirix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kVrControllerFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // .osirixgrpc.VRController vr_controller = 2;
  bool has_vr_controller() const;
  private:
  bool _internal_has_vr_controller() const;
  public:
  void clear_vr_controller();
  const ::osirixgrpc::VRController& vr_controller() const;
  ::osirixgrpc::VRController* release_vr_controller();
  ::osirixgrpc::VRController* mutable_vr_controller();
  void set_allocated_vr_controller(::osirixgrpc::VRController* vr_controller);
  private:
  const ::osirixgrpc::VRController& _internal_vr_controller() const;
  ::osirixgrpc::VRController* _internal_mutable_vr_controller();
  public:
  void unsafe_arena_set_allocated_vr_controller(
      ::osirixgrpc::VRController* vr_controller);
  ::osirixgrpc::VRController* unsafe_arena_release_vr_controller();

  // @@protoc_insertion_point(class_scope:osirixgrpc.OsirixFrontmostVRControllerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  ::osirixgrpc::VRController* vr_controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osirix_2eproto;
};
// -------------------------------------------------------------------

class OsirixDisplayedVRControllersResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.OsirixDisplayedVRControllersResponse) */ {
 public:
  inline OsirixDisplayedVRControllersResponse() : OsirixDisplayedVRControllersResponse(nullptr) {}
  virtual ~OsirixDisplayedVRControllersResponse();

  OsirixDisplayedVRControllersResponse(const OsirixDisplayedVRControllersResponse& from);
  OsirixDisplayedVRControllersResponse(OsirixDisplayedVRControllersResponse&& from) noexcept
    : OsirixDisplayedVRControllersResponse() {
    *this = ::std::move(from);
  }

  inline OsirixDisplayedVRControllersResponse& operator=(const OsirixDisplayedVRControllersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline OsirixDisplayedVRControllersResponse& operator=(OsirixDisplayedVRControllersResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OsirixDisplayedVRControllersResponse& default_instance();

  static inline const OsirixDisplayedVRControllersResponse* internal_default_instance() {
    return reinterpret_cast<const OsirixDisplayedVRControllersResponse*>(
               &_OsirixDisplayedVRControllersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OsirixDisplayedVRControllersResponse& a, OsirixDisplayedVRControllersResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(OsirixDisplayedVRControllersResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OsirixDisplayedVRControllersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OsirixDisplayedVRControllersResponse* New() const final {
    return CreateMaybeMessage<OsirixDisplayedVRControllersResponse>(nullptr);
  }

  OsirixDisplayedVRControllersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OsirixDisplayedVRControllersResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OsirixDisplayedVRControllersResponse& from);
  void MergeFrom(const OsirixDisplayedVRControllersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OsirixDisplayedVRControllersResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.OsirixDisplayedVRControllersResponse";
  }
  protected:
  explicit OsirixDisplayedVRControllersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osirix_2eproto);
    return ::descriptor_table_osirix_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrControllersFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .osirixgrpc.VRController vr_controllers = 2;
  int vr_controllers_size() const;
  private:
  int _internal_vr_controllers_size() const;
  public:
  void clear_vr_controllers();
  ::osirixgrpc::VRController* mutable_vr_controllers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::VRController >*
      mutable_vr_controllers();
  private:
  const ::osirixgrpc::VRController& _internal_vr_controllers(int index) const;
  ::osirixgrpc::VRController* _internal_add_vr_controllers();
  public:
  const ::osirixgrpc::VRController& vr_controllers(int index) const;
  ::osirixgrpc::VRController* add_vr_controllers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::VRController >&
      vr_controllers() const;

  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:osirixgrpc.OsirixDisplayedVRControllersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::VRController > vr_controllers_;
  ::osirixgrpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osirix_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// OsirixCurrentBrowserResponse

// .osirixgrpc.Status status = 1;
inline bool OsirixCurrentBrowserResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool OsirixCurrentBrowserResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& OsirixCurrentBrowserResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& OsirixCurrentBrowserResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.OsirixCurrentBrowserResponse.status)
  return _internal_status();
}
inline void OsirixCurrentBrowserResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.OsirixCurrentBrowserResponse.status)
}
inline ::osirixgrpc::Status* OsirixCurrentBrowserResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* OsirixCurrentBrowserResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.OsirixCurrentBrowserResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* OsirixCurrentBrowserResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* OsirixCurrentBrowserResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.OsirixCurrentBrowserResponse.status)
  return _internal_mutable_status();
}
inline void OsirixCurrentBrowserResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.OsirixCurrentBrowserResponse.status)
}

// .osirixgrpc.BrowserController browser_controller = 2;
inline bool OsirixCurrentBrowserResponse::_internal_has_browser_controller() const {
  return this != internal_default_instance() && browser_controller_ != nullptr;
}
inline bool OsirixCurrentBrowserResponse::has_browser_controller() const {
  return _internal_has_browser_controller();
}
inline const ::osirixgrpc::BrowserController& OsirixCurrentBrowserResponse::_internal_browser_controller() const {
  const ::osirixgrpc::BrowserController* p = browser_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::BrowserController&>(
      ::osirixgrpc::_BrowserController_default_instance_);
}
inline const ::osirixgrpc::BrowserController& OsirixCurrentBrowserResponse::browser_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.OsirixCurrentBrowserResponse.browser_controller)
  return _internal_browser_controller();
}
inline void OsirixCurrentBrowserResponse::unsafe_arena_set_allocated_browser_controller(
    ::osirixgrpc::BrowserController* browser_controller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(browser_controller_);
  }
  browser_controller_ = browser_controller;
  if (browser_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.OsirixCurrentBrowserResponse.browser_controller)
}
inline ::osirixgrpc::BrowserController* OsirixCurrentBrowserResponse::release_browser_controller() {
  
  ::osirixgrpc::BrowserController* temp = browser_controller_;
  browser_controller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::BrowserController* OsirixCurrentBrowserResponse::unsafe_arena_release_browser_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.OsirixCurrentBrowserResponse.browser_controller)
  
  ::osirixgrpc::BrowserController* temp = browser_controller_;
  browser_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::BrowserController* OsirixCurrentBrowserResponse::_internal_mutable_browser_controller() {
  
  if (browser_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::BrowserController>(GetArena());
    browser_controller_ = p;
  }
  return browser_controller_;
}
inline ::osirixgrpc::BrowserController* OsirixCurrentBrowserResponse::mutable_browser_controller() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.OsirixCurrentBrowserResponse.browser_controller)
  return _internal_mutable_browser_controller();
}
inline void OsirixCurrentBrowserResponse::set_allocated_browser_controller(::osirixgrpc::BrowserController* browser_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(browser_controller_);
  }
  if (browser_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(browser_controller)->GetArena();
    if (message_arena != submessage_arena) {
      browser_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, browser_controller, submessage_arena);
    }
    
  } else {
    
  }
  browser_controller_ = browser_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.OsirixCurrentBrowserResponse.browser_controller)
}

// -------------------------------------------------------------------

// OsirixFrontmostViewerResponse

// .osirixgrpc.Status status = 1;
inline bool OsirixFrontmostViewerResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool OsirixFrontmostViewerResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& OsirixFrontmostViewerResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& OsirixFrontmostViewerResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.OsirixFrontmostViewerResponse.status)
  return _internal_status();
}
inline void OsirixFrontmostViewerResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.OsirixFrontmostViewerResponse.status)
}
inline ::osirixgrpc::Status* OsirixFrontmostViewerResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* OsirixFrontmostViewerResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.OsirixFrontmostViewerResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* OsirixFrontmostViewerResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* OsirixFrontmostViewerResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.OsirixFrontmostViewerResponse.status)
  return _internal_mutable_status();
}
inline void OsirixFrontmostViewerResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.OsirixFrontmostViewerResponse.status)
}

// .osirixgrpc.ViewerController viewer_controller = 2;
inline bool OsirixFrontmostViewerResponse::_internal_has_viewer_controller() const {
  return this != internal_default_instance() && viewer_controller_ != nullptr;
}
inline bool OsirixFrontmostViewerResponse::has_viewer_controller() const {
  return _internal_has_viewer_controller();
}
inline const ::osirixgrpc::ViewerController& OsirixFrontmostViewerResponse::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& OsirixFrontmostViewerResponse::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.OsirixFrontmostViewerResponse.viewer_controller)
  return _internal_viewer_controller();
}
inline void OsirixFrontmostViewerResponse::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller_);
  }
  viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.OsirixFrontmostViewerResponse.viewer_controller)
}
inline ::osirixgrpc::ViewerController* OsirixFrontmostViewerResponse::release_viewer_controller() {
  
  ::osirixgrpc::ViewerController* temp = viewer_controller_;
  viewer_controller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::ViewerController* OsirixFrontmostViewerResponse::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.OsirixFrontmostViewerResponse.viewer_controller)
  
  ::osirixgrpc::ViewerController* temp = viewer_controller_;
  viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* OsirixFrontmostViewerResponse::_internal_mutable_viewer_controller() {
  
  if (viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArena());
    viewer_controller_ = p;
  }
  return viewer_controller_;
}
inline ::osirixgrpc::ViewerController* OsirixFrontmostViewerResponse::mutable_viewer_controller() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.OsirixFrontmostViewerResponse.viewer_controller)
  return _internal_mutable_viewer_controller();
}
inline void OsirixFrontmostViewerResponse::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller)->GetArena();
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    
  } else {
    
  }
  viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.OsirixFrontmostViewerResponse.viewer_controller)
}

// -------------------------------------------------------------------

// OsirixDisplayed2DViewersResponse

// .osirixgrpc.Status status = 1;
inline bool OsirixDisplayed2DViewersResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool OsirixDisplayed2DViewersResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& OsirixDisplayed2DViewersResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& OsirixDisplayed2DViewersResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.OsirixDisplayed2DViewersResponse.status)
  return _internal_status();
}
inline void OsirixDisplayed2DViewersResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.OsirixDisplayed2DViewersResponse.status)
}
inline ::osirixgrpc::Status* OsirixDisplayed2DViewersResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* OsirixDisplayed2DViewersResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.OsirixDisplayed2DViewersResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* OsirixDisplayed2DViewersResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* OsirixDisplayed2DViewersResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.OsirixDisplayed2DViewersResponse.status)
  return _internal_mutable_status();
}
inline void OsirixDisplayed2DViewersResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.OsirixDisplayed2DViewersResponse.status)
}

// repeated .osirixgrpc.ViewerController viewer_controllers = 2;
inline int OsirixDisplayed2DViewersResponse::_internal_viewer_controllers_size() const {
  return viewer_controllers_.size();
}
inline int OsirixDisplayed2DViewersResponse::viewer_controllers_size() const {
  return _internal_viewer_controllers_size();
}
inline ::osirixgrpc::ViewerController* OsirixDisplayed2DViewersResponse::mutable_viewer_controllers(int index) {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.OsirixDisplayed2DViewersResponse.viewer_controllers)
  return viewer_controllers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerController >*
OsirixDisplayed2DViewersResponse::mutable_viewer_controllers() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.OsirixDisplayed2DViewersResponse.viewer_controllers)
  return &viewer_controllers_;
}
inline const ::osirixgrpc::ViewerController& OsirixDisplayed2DViewersResponse::_internal_viewer_controllers(int index) const {
  return viewer_controllers_.Get(index);
}
inline const ::osirixgrpc::ViewerController& OsirixDisplayed2DViewersResponse::viewer_controllers(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.OsirixDisplayed2DViewersResponse.viewer_controllers)
  return _internal_viewer_controllers(index);
}
inline ::osirixgrpc::ViewerController* OsirixDisplayed2DViewersResponse::_internal_add_viewer_controllers() {
  return viewer_controllers_.Add();
}
inline ::osirixgrpc::ViewerController* OsirixDisplayed2DViewersResponse::add_viewer_controllers() {
  // @@protoc_insertion_point(field_add:osirixgrpc.OsirixDisplayed2DViewersResponse.viewer_controllers)
  return _internal_add_viewer_controllers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ViewerController >&
OsirixDisplayed2DViewersResponse::viewer_controllers() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.OsirixDisplayed2DViewersResponse.viewer_controllers)
  return viewer_controllers_;
}

// -------------------------------------------------------------------

// OsirixFrontmostVRControllerResponse

// .osirixgrpc.Status status = 1;
inline bool OsirixFrontmostVRControllerResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool OsirixFrontmostVRControllerResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& OsirixFrontmostVRControllerResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& OsirixFrontmostVRControllerResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.OsirixFrontmostVRControllerResponse.status)
  return _internal_status();
}
inline void OsirixFrontmostVRControllerResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.OsirixFrontmostVRControllerResponse.status)
}
inline ::osirixgrpc::Status* OsirixFrontmostVRControllerResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* OsirixFrontmostVRControllerResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.OsirixFrontmostVRControllerResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* OsirixFrontmostVRControllerResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* OsirixFrontmostVRControllerResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.OsirixFrontmostVRControllerResponse.status)
  return _internal_mutable_status();
}
inline void OsirixFrontmostVRControllerResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.OsirixFrontmostVRControllerResponse.status)
}

// .osirixgrpc.VRController vr_controller = 2;
inline bool OsirixFrontmostVRControllerResponse::_internal_has_vr_controller() const {
  return this != internal_default_instance() && vr_controller_ != nullptr;
}
inline bool OsirixFrontmostVRControllerResponse::has_vr_controller() const {
  return _internal_has_vr_controller();
}
inline const ::osirixgrpc::VRController& OsirixFrontmostVRControllerResponse::_internal_vr_controller() const {
  const ::osirixgrpc::VRController* p = vr_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::VRController&>(
      ::osirixgrpc::_VRController_default_instance_);
}
inline const ::osirixgrpc::VRController& OsirixFrontmostVRControllerResponse::vr_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.OsirixFrontmostVRControllerResponse.vr_controller)
  return _internal_vr_controller();
}
inline void OsirixFrontmostVRControllerResponse::unsafe_arena_set_allocated_vr_controller(
    ::osirixgrpc::VRController* vr_controller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller_);
  }
  vr_controller_ = vr_controller;
  if (vr_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.OsirixFrontmostVRControllerResponse.vr_controller)
}
inline ::osirixgrpc::VRController* OsirixFrontmostVRControllerResponse::release_vr_controller() {
  
  ::osirixgrpc::VRController* temp = vr_controller_;
  vr_controller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::VRController* OsirixFrontmostVRControllerResponse::unsafe_arena_release_vr_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.OsirixFrontmostVRControllerResponse.vr_controller)
  
  ::osirixgrpc::VRController* temp = vr_controller_;
  vr_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::VRController* OsirixFrontmostVRControllerResponse::_internal_mutable_vr_controller() {
  
  if (vr_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::VRController>(GetArena());
    vr_controller_ = p;
  }
  return vr_controller_;
}
inline ::osirixgrpc::VRController* OsirixFrontmostVRControllerResponse::mutable_vr_controller() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.OsirixFrontmostVRControllerResponse.vr_controller)
  return _internal_mutable_vr_controller();
}
inline void OsirixFrontmostVRControllerResponse::set_allocated_vr_controller(::osirixgrpc::VRController* vr_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller_);
  }
  if (vr_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller)->GetArena();
    if (message_arena != submessage_arena) {
      vr_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vr_controller, submessage_arena);
    }
    
  } else {
    
  }
  vr_controller_ = vr_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.OsirixFrontmostVRControllerResponse.vr_controller)
}

// -------------------------------------------------------------------

// OsirixDisplayedVRControllersResponse

// .osirixgrpc.Status status = 1;
inline bool OsirixDisplayedVRControllersResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool OsirixDisplayedVRControllersResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& OsirixDisplayedVRControllersResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& OsirixDisplayedVRControllersResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.OsirixDisplayedVRControllersResponse.status)
  return _internal_status();
}
inline void OsirixDisplayedVRControllersResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.OsirixDisplayedVRControllersResponse.status)
}
inline ::osirixgrpc::Status* OsirixDisplayedVRControllersResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* OsirixDisplayedVRControllersResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.OsirixDisplayedVRControllersResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* OsirixDisplayedVRControllersResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* OsirixDisplayedVRControllersResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.OsirixDisplayedVRControllersResponse.status)
  return _internal_mutable_status();
}
inline void OsirixDisplayedVRControllersResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.OsirixDisplayedVRControllersResponse.status)
}

// repeated .osirixgrpc.VRController vr_controllers = 2;
inline int OsirixDisplayedVRControllersResponse::_internal_vr_controllers_size() const {
  return vr_controllers_.size();
}
inline int OsirixDisplayedVRControllersResponse::vr_controllers_size() const {
  return _internal_vr_controllers_size();
}
inline ::osirixgrpc::VRController* OsirixDisplayedVRControllersResponse::mutable_vr_controllers(int index) {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.OsirixDisplayedVRControllersResponse.vr_controllers)
  return vr_controllers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::VRController >*
OsirixDisplayedVRControllersResponse::mutable_vr_controllers() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.OsirixDisplayedVRControllersResponse.vr_controllers)
  return &vr_controllers_;
}
inline const ::osirixgrpc::VRController& OsirixDisplayedVRControllersResponse::_internal_vr_controllers(int index) const {
  return vr_controllers_.Get(index);
}
inline const ::osirixgrpc::VRController& OsirixDisplayedVRControllersResponse::vr_controllers(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.OsirixDisplayedVRControllersResponse.vr_controllers)
  return _internal_vr_controllers(index);
}
inline ::osirixgrpc::VRController* OsirixDisplayedVRControllersResponse::_internal_add_vr_controllers() {
  return vr_controllers_.Add();
}
inline ::osirixgrpc::VRController* OsirixDisplayedVRControllersResponse::add_vr_controllers() {
  // @@protoc_insertion_point(field_add:osirixgrpc.OsirixDisplayedVRControllersResponse.vr_controllers)
  return _internal_add_vr_controllers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::VRController >&
OsirixDisplayedVRControllersResponse::vr_controllers() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.OsirixDisplayedVRControllersResponse.vr_controllers)
  return vr_controllers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osirixgrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osirix_2eproto
