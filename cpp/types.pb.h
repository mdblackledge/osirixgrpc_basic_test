// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_types_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_types_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_types_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_types_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_types_2eproto;
namespace osirixgrpc {
class BrowserController;
class BrowserControllerDefaultTypeInternal;
extern BrowserControllerDefaultTypeInternal _BrowserController_default_instance_;
class DCMPix;
class DCMPixDefaultTypeInternal;
extern DCMPixDefaultTypeInternal _DCMPix_default_instance_;
class DicomImage;
class DicomImageDefaultTypeInternal;
extern DicomImageDefaultTypeInternal _DicomImage_default_instance_;
class DicomSeries;
class DicomSeriesDefaultTypeInternal;
extern DicomSeriesDefaultTypeInternal _DicomSeries_default_instance_;
class DicomStudy;
class DicomStudyDefaultTypeInternal;
extern DicomStudyDefaultTypeInternal _DicomStudy_default_instance_;
class ROI;
class ROIDefaultTypeInternal;
extern ROIDefaultTypeInternal _ROI_default_instance_;
class ROIVolume;
class ROIVolumeDefaultTypeInternal;
extern ROIVolumeDefaultTypeInternal _ROIVolume_default_instance_;
class VRController;
class VRControllerDefaultTypeInternal;
extern VRControllerDefaultTypeInternal _VRController_default_instance_;
class ViewerController;
class ViewerControllerDefaultTypeInternal;
extern ViewerControllerDefaultTypeInternal _ViewerController_default_instance_;
}  // namespace osirixgrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::osirixgrpc::BrowserController* Arena::CreateMaybeMessage<::osirixgrpc::BrowserController>(Arena*);
template<> ::osirixgrpc::DCMPix* Arena::CreateMaybeMessage<::osirixgrpc::DCMPix>(Arena*);
template<> ::osirixgrpc::DicomImage* Arena::CreateMaybeMessage<::osirixgrpc::DicomImage>(Arena*);
template<> ::osirixgrpc::DicomSeries* Arena::CreateMaybeMessage<::osirixgrpc::DicomSeries>(Arena*);
template<> ::osirixgrpc::DicomStudy* Arena::CreateMaybeMessage<::osirixgrpc::DicomStudy>(Arena*);
template<> ::osirixgrpc::ROI* Arena::CreateMaybeMessage<::osirixgrpc::ROI>(Arena*);
template<> ::osirixgrpc::ROIVolume* Arena::CreateMaybeMessage<::osirixgrpc::ROIVolume>(Arena*);
template<> ::osirixgrpc::VRController* Arena::CreateMaybeMessage<::osirixgrpc::VRController>(Arena*);
template<> ::osirixgrpc::ViewerController* Arena::CreateMaybeMessage<::osirixgrpc::ViewerController>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osirixgrpc {

// ===================================================================

class BrowserController PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.BrowserController) */ {
 public:
  inline BrowserController() : BrowserController(nullptr) {}
  virtual ~BrowserController();

  BrowserController(const BrowserController& from);
  BrowserController(BrowserController&& from) noexcept
    : BrowserController() {
    *this = ::std::move(from);
  }

  inline BrowserController& operator=(const BrowserController& from) {
    CopyFrom(from);
    return *this;
  }
  inline BrowserController& operator=(BrowserController&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BrowserController& default_instance();

  static inline const BrowserController* internal_default_instance() {
    return reinterpret_cast<const BrowserController*>(
               &_BrowserController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BrowserController& a, BrowserController& b) {
    a.Swap(&b);
  }
  inline void Swap(BrowserController* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BrowserController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BrowserController* New() const final {
    return CreateMaybeMessage<BrowserController>(nullptr);
  }

  BrowserController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BrowserController>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BrowserController& from);
  void MergeFrom(const BrowserController& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BrowserController* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.BrowserController";
  }
  protected:
  explicit BrowserController(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsirixrpcUidFieldNumber = 1,
  };
  // string osirixrpc_uid = 1;
  void clear_osirixrpc_uid();
  const std::string& osirixrpc_uid() const;
  void set_osirixrpc_uid(const std::string& value);
  void set_osirixrpc_uid(std::string&& value);
  void set_osirixrpc_uid(const char* value);
  void set_osirixrpc_uid(const char* value, size_t size);
  std::string* mutable_osirixrpc_uid();
  std::string* release_osirixrpc_uid();
  void set_allocated_osirixrpc_uid(std::string* osirixrpc_uid);
  private:
  const std::string& _internal_osirixrpc_uid() const;
  void _internal_set_osirixrpc_uid(const std::string& value);
  std::string* _internal_mutable_osirixrpc_uid();
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.BrowserController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osirixrpc_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class ViewerController PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ViewerController) */ {
 public:
  inline ViewerController() : ViewerController(nullptr) {}
  virtual ~ViewerController();

  ViewerController(const ViewerController& from);
  ViewerController(ViewerController&& from) noexcept
    : ViewerController() {
    *this = ::std::move(from);
  }

  inline ViewerController& operator=(const ViewerController& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewerController& operator=(ViewerController&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ViewerController& default_instance();

  static inline const ViewerController* internal_default_instance() {
    return reinterpret_cast<const ViewerController*>(
               &_ViewerController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ViewerController& a, ViewerController& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewerController* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewerController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewerController* New() const final {
    return CreateMaybeMessage<ViewerController>(nullptr);
  }

  ViewerController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewerController>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewerController& from);
  void MergeFrom(const ViewerController& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewerController* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.ViewerController";
  }
  protected:
  explicit ViewerController(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsirixrpcUidFieldNumber = 1,
  };
  // string osirixrpc_uid = 1;
  void clear_osirixrpc_uid();
  const std::string& osirixrpc_uid() const;
  void set_osirixrpc_uid(const std::string& value);
  void set_osirixrpc_uid(std::string&& value);
  void set_osirixrpc_uid(const char* value);
  void set_osirixrpc_uid(const char* value, size_t size);
  std::string* mutable_osirixrpc_uid();
  std::string* release_osirixrpc_uid();
  void set_allocated_osirixrpc_uid(std::string* osirixrpc_uid);
  private:
  const std::string& _internal_osirixrpc_uid() const;
  void _internal_set_osirixrpc_uid(const std::string& value);
  std::string* _internal_mutable_osirixrpc_uid();
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.ViewerController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osirixrpc_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class VRController PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.VRController) */ {
 public:
  inline VRController() : VRController(nullptr) {}
  virtual ~VRController();

  VRController(const VRController& from);
  VRController(VRController&& from) noexcept
    : VRController() {
    *this = ::std::move(from);
  }

  inline VRController& operator=(const VRController& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRController& operator=(VRController&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VRController& default_instance();

  static inline const VRController* internal_default_instance() {
    return reinterpret_cast<const VRController*>(
               &_VRController_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VRController& a, VRController& b) {
    a.Swap(&b);
  }
  inline void Swap(VRController* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRController* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VRController* New() const final {
    return CreateMaybeMessage<VRController>(nullptr);
  }

  VRController* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VRController>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VRController& from);
  void MergeFrom(const VRController& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VRController* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.VRController";
  }
  protected:
  explicit VRController(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsirixrpcUidFieldNumber = 1,
  };
  // string osirixrpc_uid = 1;
  void clear_osirixrpc_uid();
  const std::string& osirixrpc_uid() const;
  void set_osirixrpc_uid(const std::string& value);
  void set_osirixrpc_uid(std::string&& value);
  void set_osirixrpc_uid(const char* value);
  void set_osirixrpc_uid(const char* value, size_t size);
  std::string* mutable_osirixrpc_uid();
  std::string* release_osirixrpc_uid();
  void set_allocated_osirixrpc_uid(std::string* osirixrpc_uid);
  private:
  const std::string& _internal_osirixrpc_uid() const;
  void _internal_set_osirixrpc_uid(const std::string& value);
  std::string* _internal_mutable_osirixrpc_uid();
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.VRController)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osirixrpc_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class DCMPix PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DCMPix) */ {
 public:
  inline DCMPix() : DCMPix(nullptr) {}
  virtual ~DCMPix();

  DCMPix(const DCMPix& from);
  DCMPix(DCMPix&& from) noexcept
    : DCMPix() {
    *this = ::std::move(from);
  }

  inline DCMPix& operator=(const DCMPix& from) {
    CopyFrom(from);
    return *this;
  }
  inline DCMPix& operator=(DCMPix&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DCMPix& default_instance();

  static inline const DCMPix* internal_default_instance() {
    return reinterpret_cast<const DCMPix*>(
               &_DCMPix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DCMPix& a, DCMPix& b) {
    a.Swap(&b);
  }
  inline void Swap(DCMPix* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DCMPix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DCMPix* New() const final {
    return CreateMaybeMessage<DCMPix>(nullptr);
  }

  DCMPix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DCMPix>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DCMPix& from);
  void MergeFrom(const DCMPix& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DCMPix* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DCMPix";
  }
  protected:
  explicit DCMPix(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsirixrpcUidFieldNumber = 1,
  };
  // string osirixrpc_uid = 1;
  void clear_osirixrpc_uid();
  const std::string& osirixrpc_uid() const;
  void set_osirixrpc_uid(const std::string& value);
  void set_osirixrpc_uid(std::string&& value);
  void set_osirixrpc_uid(const char* value);
  void set_osirixrpc_uid(const char* value, size_t size);
  std::string* mutable_osirixrpc_uid();
  std::string* release_osirixrpc_uid();
  void set_allocated_osirixrpc_uid(std::string* osirixrpc_uid);
  private:
  const std::string& _internal_osirixrpc_uid() const;
  void _internal_set_osirixrpc_uid(const std::string& value);
  std::string* _internal_mutable_osirixrpc_uid();
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DCMPix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osirixrpc_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class ROI PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ROI) */ {
 public:
  inline ROI() : ROI(nullptr) {}
  virtual ~ROI();

  ROI(const ROI& from);
  ROI(ROI&& from) noexcept
    : ROI() {
    *this = ::std::move(from);
  }

  inline ROI& operator=(const ROI& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROI& operator=(ROI&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROI& default_instance();

  static inline const ROI* internal_default_instance() {
    return reinterpret_cast<const ROI*>(
               &_ROI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ROI& a, ROI& b) {
    a.Swap(&b);
  }
  inline void Swap(ROI* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROI* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROI* New() const final {
    return CreateMaybeMessage<ROI>(nullptr);
  }

  ROI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROI& from);
  void MergeFrom(const ROI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.ROI";
  }
  protected:
  explicit ROI(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsirixrpcUidFieldNumber = 1,
  };
  // string osirixrpc_uid = 1;
  void clear_osirixrpc_uid();
  const std::string& osirixrpc_uid() const;
  void set_osirixrpc_uid(const std::string& value);
  void set_osirixrpc_uid(std::string&& value);
  void set_osirixrpc_uid(const char* value);
  void set_osirixrpc_uid(const char* value, size_t size);
  std::string* mutable_osirixrpc_uid();
  std::string* release_osirixrpc_uid();
  void set_allocated_osirixrpc_uid(std::string* osirixrpc_uid);
  private:
  const std::string& _internal_osirixrpc_uid() const;
  void _internal_set_osirixrpc_uid(const std::string& value);
  std::string* _internal_mutable_osirixrpc_uid();
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.ROI)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osirixrpc_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class ROIVolume PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.ROIVolume) */ {
 public:
  inline ROIVolume() : ROIVolume(nullptr) {}
  virtual ~ROIVolume();

  ROIVolume(const ROIVolume& from);
  ROIVolume(ROIVolume&& from) noexcept
    : ROIVolume() {
    *this = ::std::move(from);
  }

  inline ROIVolume& operator=(const ROIVolume& from) {
    CopyFrom(from);
    return *this;
  }
  inline ROIVolume& operator=(ROIVolume&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ROIVolume& default_instance();

  static inline const ROIVolume* internal_default_instance() {
    return reinterpret_cast<const ROIVolume*>(
               &_ROIVolume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ROIVolume& a, ROIVolume& b) {
    a.Swap(&b);
  }
  inline void Swap(ROIVolume* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ROIVolume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ROIVolume* New() const final {
    return CreateMaybeMessage<ROIVolume>(nullptr);
  }

  ROIVolume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ROIVolume>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ROIVolume& from);
  void MergeFrom(const ROIVolume& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ROIVolume* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.ROIVolume";
  }
  protected:
  explicit ROIVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsirixrpcUidFieldNumber = 1,
  };
  // string osirixrpc_uid = 1;
  void clear_osirixrpc_uid();
  const std::string& osirixrpc_uid() const;
  void set_osirixrpc_uid(const std::string& value);
  void set_osirixrpc_uid(std::string&& value);
  void set_osirixrpc_uid(const char* value);
  void set_osirixrpc_uid(const char* value, size_t size);
  std::string* mutable_osirixrpc_uid();
  std::string* release_osirixrpc_uid();
  void set_allocated_osirixrpc_uid(std::string* osirixrpc_uid);
  private:
  const std::string& _internal_osirixrpc_uid() const;
  void _internal_set_osirixrpc_uid(const std::string& value);
  std::string* _internal_mutable_osirixrpc_uid();
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.ROIVolume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osirixrpc_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class DicomImage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DicomImage) */ {
 public:
  inline DicomImage() : DicomImage(nullptr) {}
  virtual ~DicomImage();

  DicomImage(const DicomImage& from);
  DicomImage(DicomImage&& from) noexcept
    : DicomImage() {
    *this = ::std::move(from);
  }

  inline DicomImage& operator=(const DicomImage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicomImage& operator=(DicomImage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DicomImage& default_instance();

  static inline const DicomImage* internal_default_instance() {
    return reinterpret_cast<const DicomImage*>(
               &_DicomImage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DicomImage& a, DicomImage& b) {
    a.Swap(&b);
  }
  inline void Swap(DicomImage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicomImage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicomImage* New() const final {
    return CreateMaybeMessage<DicomImage>(nullptr);
  }

  DicomImage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicomImage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DicomImage& from);
  void MergeFrom(const DicomImage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicomImage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DicomImage";
  }
  protected:
  explicit DicomImage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsirixrpcUidFieldNumber = 1,
  };
  // string osirixrpc_uid = 1;
  void clear_osirixrpc_uid();
  const std::string& osirixrpc_uid() const;
  void set_osirixrpc_uid(const std::string& value);
  void set_osirixrpc_uid(std::string&& value);
  void set_osirixrpc_uid(const char* value);
  void set_osirixrpc_uid(const char* value, size_t size);
  std::string* mutable_osirixrpc_uid();
  std::string* release_osirixrpc_uid();
  void set_allocated_osirixrpc_uid(std::string* osirixrpc_uid);
  private:
  const std::string& _internal_osirixrpc_uid() const;
  void _internal_set_osirixrpc_uid(const std::string& value);
  std::string* _internal_mutable_osirixrpc_uid();
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DicomImage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osirixrpc_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class DicomSeries PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DicomSeries) */ {
 public:
  inline DicomSeries() : DicomSeries(nullptr) {}
  virtual ~DicomSeries();

  DicomSeries(const DicomSeries& from);
  DicomSeries(DicomSeries&& from) noexcept
    : DicomSeries() {
    *this = ::std::move(from);
  }

  inline DicomSeries& operator=(const DicomSeries& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicomSeries& operator=(DicomSeries&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DicomSeries& default_instance();

  static inline const DicomSeries* internal_default_instance() {
    return reinterpret_cast<const DicomSeries*>(
               &_DicomSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DicomSeries& a, DicomSeries& b) {
    a.Swap(&b);
  }
  inline void Swap(DicomSeries* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicomSeries* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicomSeries* New() const final {
    return CreateMaybeMessage<DicomSeries>(nullptr);
  }

  DicomSeries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicomSeries>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DicomSeries& from);
  void MergeFrom(const DicomSeries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicomSeries* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DicomSeries";
  }
  protected:
  explicit DicomSeries(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsirixrpcUidFieldNumber = 1,
  };
  // string osirixrpc_uid = 1;
  void clear_osirixrpc_uid();
  const std::string& osirixrpc_uid() const;
  void set_osirixrpc_uid(const std::string& value);
  void set_osirixrpc_uid(std::string&& value);
  void set_osirixrpc_uid(const char* value);
  void set_osirixrpc_uid(const char* value, size_t size);
  std::string* mutable_osirixrpc_uid();
  std::string* release_osirixrpc_uid();
  void set_allocated_osirixrpc_uid(std::string* osirixrpc_uid);
  private:
  const std::string& _internal_osirixrpc_uid() const;
  void _internal_set_osirixrpc_uid(const std::string& value);
  std::string* _internal_mutable_osirixrpc_uid();
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DicomSeries)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osirixrpc_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// -------------------------------------------------------------------

class DicomStudy PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.DicomStudy) */ {
 public:
  inline DicomStudy() : DicomStudy(nullptr) {}
  virtual ~DicomStudy();

  DicomStudy(const DicomStudy& from);
  DicomStudy(DicomStudy&& from) noexcept
    : DicomStudy() {
    *this = ::std::move(from);
  }

  inline DicomStudy& operator=(const DicomStudy& from) {
    CopyFrom(from);
    return *this;
  }
  inline DicomStudy& operator=(DicomStudy&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DicomStudy& default_instance();

  static inline const DicomStudy* internal_default_instance() {
    return reinterpret_cast<const DicomStudy*>(
               &_DicomStudy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DicomStudy& a, DicomStudy& b) {
    a.Swap(&b);
  }
  inline void Swap(DicomStudy* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DicomStudy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DicomStudy* New() const final {
    return CreateMaybeMessage<DicomStudy>(nullptr);
  }

  DicomStudy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DicomStudy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DicomStudy& from);
  void MergeFrom(const DicomStudy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DicomStudy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.DicomStudy";
  }
  protected:
  explicit DicomStudy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_types_2eproto);
    return ::descriptor_table_types_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsirixrpcUidFieldNumber = 1,
  };
  // string osirixrpc_uid = 1;
  void clear_osirixrpc_uid();
  const std::string& osirixrpc_uid() const;
  void set_osirixrpc_uid(const std::string& value);
  void set_osirixrpc_uid(std::string&& value);
  void set_osirixrpc_uid(const char* value);
  void set_osirixrpc_uid(const char* value, size_t size);
  std::string* mutable_osirixrpc_uid();
  std::string* release_osirixrpc_uid();
  void set_allocated_osirixrpc_uid(std::string* osirixrpc_uid);
  private:
  const std::string& _internal_osirixrpc_uid() const;
  void _internal_set_osirixrpc_uid(const std::string& value);
  std::string* _internal_mutable_osirixrpc_uid();
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.DicomStudy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr osirixrpc_uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_types_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BrowserController

// string osirixrpc_uid = 1;
inline void BrowserController::clear_osirixrpc_uid() {
  osirixrpc_uid_.ClearToEmpty();
}
inline const std::string& BrowserController::osirixrpc_uid() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.BrowserController.osirixrpc_uid)
  return _internal_osirixrpc_uid();
}
inline void BrowserController::set_osirixrpc_uid(const std::string& value) {
  _internal_set_osirixrpc_uid(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.BrowserController.osirixrpc_uid)
}
inline std::string* BrowserController::mutable_osirixrpc_uid() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.BrowserController.osirixrpc_uid)
  return _internal_mutable_osirixrpc_uid();
}
inline const std::string& BrowserController::_internal_osirixrpc_uid() const {
  return osirixrpc_uid_.Get();
}
inline void BrowserController::_internal_set_osirixrpc_uid(const std::string& value) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void BrowserController::set_osirixrpc_uid(std::string&& value) {
  
  osirixrpc_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.BrowserController.osirixrpc_uid)
}
inline void BrowserController::set_osirixrpc_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.BrowserController.osirixrpc_uid)
}
inline void BrowserController::set_osirixrpc_uid(const char* value,
    size_t size) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.BrowserController.osirixrpc_uid)
}
inline std::string* BrowserController::_internal_mutable_osirixrpc_uid() {
  
  return osirixrpc_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* BrowserController::release_osirixrpc_uid() {
  // @@protoc_insertion_point(field_release:osirixgrpc.BrowserController.osirixrpc_uid)
  return osirixrpc_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BrowserController::set_allocated_osirixrpc_uid(std::string* osirixrpc_uid) {
  if (osirixrpc_uid != nullptr) {
    
  } else {
    
  }
  osirixrpc_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osirixrpc_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.BrowserController.osirixrpc_uid)
}

// -------------------------------------------------------------------

// ViewerController

// string osirixrpc_uid = 1;
inline void ViewerController::clear_osirixrpc_uid() {
  osirixrpc_uid_.ClearToEmpty();
}
inline const std::string& ViewerController::osirixrpc_uid() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ViewerController.osirixrpc_uid)
  return _internal_osirixrpc_uid();
}
inline void ViewerController::set_osirixrpc_uid(const std::string& value) {
  _internal_set_osirixrpc_uid(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ViewerController.osirixrpc_uid)
}
inline std::string* ViewerController::mutable_osirixrpc_uid() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ViewerController.osirixrpc_uid)
  return _internal_mutable_osirixrpc_uid();
}
inline const std::string& ViewerController::_internal_osirixrpc_uid() const {
  return osirixrpc_uid_.Get();
}
inline void ViewerController::_internal_set_osirixrpc_uid(const std::string& value) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ViewerController::set_osirixrpc_uid(std::string&& value) {
  
  osirixrpc_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.ViewerController.osirixrpc_uid)
}
inline void ViewerController::set_osirixrpc_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.ViewerController.osirixrpc_uid)
}
inline void ViewerController::set_osirixrpc_uid(const char* value,
    size_t size) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.ViewerController.osirixrpc_uid)
}
inline std::string* ViewerController::_internal_mutable_osirixrpc_uid() {
  
  return osirixrpc_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ViewerController::release_osirixrpc_uid() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ViewerController.osirixrpc_uid)
  return osirixrpc_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ViewerController::set_allocated_osirixrpc_uid(std::string* osirixrpc_uid) {
  if (osirixrpc_uid != nullptr) {
    
  } else {
    
  }
  osirixrpc_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osirixrpc_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ViewerController.osirixrpc_uid)
}

// -------------------------------------------------------------------

// VRController

// string osirixrpc_uid = 1;
inline void VRController::clear_osirixrpc_uid() {
  osirixrpc_uid_.ClearToEmpty();
}
inline const std::string& VRController::osirixrpc_uid() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRController.osirixrpc_uid)
  return _internal_osirixrpc_uid();
}
inline void VRController::set_osirixrpc_uid(const std::string& value) {
  _internal_set_osirixrpc_uid(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.VRController.osirixrpc_uid)
}
inline std::string* VRController::mutable_osirixrpc_uid() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRController.osirixrpc_uid)
  return _internal_mutable_osirixrpc_uid();
}
inline const std::string& VRController::_internal_osirixrpc_uid() const {
  return osirixrpc_uid_.Get();
}
inline void VRController::_internal_set_osirixrpc_uid(const std::string& value) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VRController::set_osirixrpc_uid(std::string&& value) {
  
  osirixrpc_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.VRController.osirixrpc_uid)
}
inline void VRController::set_osirixrpc_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.VRController.osirixrpc_uid)
}
inline void VRController::set_osirixrpc_uid(const char* value,
    size_t size) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.VRController.osirixrpc_uid)
}
inline std::string* VRController::_internal_mutable_osirixrpc_uid() {
  
  return osirixrpc_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VRController::release_osirixrpc_uid() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRController.osirixrpc_uid)
  return osirixrpc_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VRController::set_allocated_osirixrpc_uid(std::string* osirixrpc_uid) {
  if (osirixrpc_uid != nullptr) {
    
  } else {
    
  }
  osirixrpc_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osirixrpc_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRController.osirixrpc_uid)
}

// -------------------------------------------------------------------

// DCMPix

// string osirixrpc_uid = 1;
inline void DCMPix::clear_osirixrpc_uid() {
  osirixrpc_uid_.ClearToEmpty();
}
inline const std::string& DCMPix::osirixrpc_uid() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DCMPix.osirixrpc_uid)
  return _internal_osirixrpc_uid();
}
inline void DCMPix::set_osirixrpc_uid(const std::string& value) {
  _internal_set_osirixrpc_uid(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DCMPix.osirixrpc_uid)
}
inline std::string* DCMPix::mutable_osirixrpc_uid() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DCMPix.osirixrpc_uid)
  return _internal_mutable_osirixrpc_uid();
}
inline const std::string& DCMPix::_internal_osirixrpc_uid() const {
  return osirixrpc_uid_.Get();
}
inline void DCMPix::_internal_set_osirixrpc_uid(const std::string& value) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DCMPix::set_osirixrpc_uid(std::string&& value) {
  
  osirixrpc_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.DCMPix.osirixrpc_uid)
}
inline void DCMPix::set_osirixrpc_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.DCMPix.osirixrpc_uid)
}
inline void DCMPix::set_osirixrpc_uid(const char* value,
    size_t size) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.DCMPix.osirixrpc_uid)
}
inline std::string* DCMPix::_internal_mutable_osirixrpc_uid() {
  
  return osirixrpc_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DCMPix::release_osirixrpc_uid() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DCMPix.osirixrpc_uid)
  return osirixrpc_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DCMPix::set_allocated_osirixrpc_uid(std::string* osirixrpc_uid) {
  if (osirixrpc_uid != nullptr) {
    
  } else {
    
  }
  osirixrpc_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osirixrpc_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DCMPix.osirixrpc_uid)
}

// -------------------------------------------------------------------

// ROI

// string osirixrpc_uid = 1;
inline void ROI::clear_osirixrpc_uid() {
  osirixrpc_uid_.ClearToEmpty();
}
inline const std::string& ROI::osirixrpc_uid() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ROI.osirixrpc_uid)
  return _internal_osirixrpc_uid();
}
inline void ROI::set_osirixrpc_uid(const std::string& value) {
  _internal_set_osirixrpc_uid(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ROI.osirixrpc_uid)
}
inline std::string* ROI::mutable_osirixrpc_uid() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ROI.osirixrpc_uid)
  return _internal_mutable_osirixrpc_uid();
}
inline const std::string& ROI::_internal_osirixrpc_uid() const {
  return osirixrpc_uid_.Get();
}
inline void ROI::_internal_set_osirixrpc_uid(const std::string& value) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ROI::set_osirixrpc_uid(std::string&& value) {
  
  osirixrpc_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.ROI.osirixrpc_uid)
}
inline void ROI::set_osirixrpc_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.ROI.osirixrpc_uid)
}
inline void ROI::set_osirixrpc_uid(const char* value,
    size_t size) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.ROI.osirixrpc_uid)
}
inline std::string* ROI::_internal_mutable_osirixrpc_uid() {
  
  return osirixrpc_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ROI::release_osirixrpc_uid() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ROI.osirixrpc_uid)
  return osirixrpc_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ROI::set_allocated_osirixrpc_uid(std::string* osirixrpc_uid) {
  if (osirixrpc_uid != nullptr) {
    
  } else {
    
  }
  osirixrpc_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osirixrpc_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ROI.osirixrpc_uid)
}

// -------------------------------------------------------------------

// ROIVolume

// string osirixrpc_uid = 1;
inline void ROIVolume::clear_osirixrpc_uid() {
  osirixrpc_uid_.ClearToEmpty();
}
inline const std::string& ROIVolume::osirixrpc_uid() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.ROIVolume.osirixrpc_uid)
  return _internal_osirixrpc_uid();
}
inline void ROIVolume::set_osirixrpc_uid(const std::string& value) {
  _internal_set_osirixrpc_uid(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.ROIVolume.osirixrpc_uid)
}
inline std::string* ROIVolume::mutable_osirixrpc_uid() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.ROIVolume.osirixrpc_uid)
  return _internal_mutable_osirixrpc_uid();
}
inline const std::string& ROIVolume::_internal_osirixrpc_uid() const {
  return osirixrpc_uid_.Get();
}
inline void ROIVolume::_internal_set_osirixrpc_uid(const std::string& value) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ROIVolume::set_osirixrpc_uid(std::string&& value) {
  
  osirixrpc_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.ROIVolume.osirixrpc_uid)
}
inline void ROIVolume::set_osirixrpc_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.ROIVolume.osirixrpc_uid)
}
inline void ROIVolume::set_osirixrpc_uid(const char* value,
    size_t size) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.ROIVolume.osirixrpc_uid)
}
inline std::string* ROIVolume::_internal_mutable_osirixrpc_uid() {
  
  return osirixrpc_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ROIVolume::release_osirixrpc_uid() {
  // @@protoc_insertion_point(field_release:osirixgrpc.ROIVolume.osirixrpc_uid)
  return osirixrpc_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ROIVolume::set_allocated_osirixrpc_uid(std::string* osirixrpc_uid) {
  if (osirixrpc_uid != nullptr) {
    
  } else {
    
  }
  osirixrpc_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osirixrpc_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.ROIVolume.osirixrpc_uid)
}

// -------------------------------------------------------------------

// DicomImage

// string osirixrpc_uid = 1;
inline void DicomImage::clear_osirixrpc_uid() {
  osirixrpc_uid_.ClearToEmpty();
}
inline const std::string& DicomImage::osirixrpc_uid() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DicomImage.osirixrpc_uid)
  return _internal_osirixrpc_uid();
}
inline void DicomImage::set_osirixrpc_uid(const std::string& value) {
  _internal_set_osirixrpc_uid(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DicomImage.osirixrpc_uid)
}
inline std::string* DicomImage::mutable_osirixrpc_uid() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DicomImage.osirixrpc_uid)
  return _internal_mutable_osirixrpc_uid();
}
inline const std::string& DicomImage::_internal_osirixrpc_uid() const {
  return osirixrpc_uid_.Get();
}
inline void DicomImage::_internal_set_osirixrpc_uid(const std::string& value) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DicomImage::set_osirixrpc_uid(std::string&& value) {
  
  osirixrpc_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.DicomImage.osirixrpc_uid)
}
inline void DicomImage::set_osirixrpc_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.DicomImage.osirixrpc_uid)
}
inline void DicomImage::set_osirixrpc_uid(const char* value,
    size_t size) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.DicomImage.osirixrpc_uid)
}
inline std::string* DicomImage::_internal_mutable_osirixrpc_uid() {
  
  return osirixrpc_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DicomImage::release_osirixrpc_uid() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DicomImage.osirixrpc_uid)
  return osirixrpc_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicomImage::set_allocated_osirixrpc_uid(std::string* osirixrpc_uid) {
  if (osirixrpc_uid != nullptr) {
    
  } else {
    
  }
  osirixrpc_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osirixrpc_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DicomImage.osirixrpc_uid)
}

// -------------------------------------------------------------------

// DicomSeries

// string osirixrpc_uid = 1;
inline void DicomSeries::clear_osirixrpc_uid() {
  osirixrpc_uid_.ClearToEmpty();
}
inline const std::string& DicomSeries::osirixrpc_uid() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DicomSeries.osirixrpc_uid)
  return _internal_osirixrpc_uid();
}
inline void DicomSeries::set_osirixrpc_uid(const std::string& value) {
  _internal_set_osirixrpc_uid(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DicomSeries.osirixrpc_uid)
}
inline std::string* DicomSeries::mutable_osirixrpc_uid() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DicomSeries.osirixrpc_uid)
  return _internal_mutable_osirixrpc_uid();
}
inline const std::string& DicomSeries::_internal_osirixrpc_uid() const {
  return osirixrpc_uid_.Get();
}
inline void DicomSeries::_internal_set_osirixrpc_uid(const std::string& value) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DicomSeries::set_osirixrpc_uid(std::string&& value) {
  
  osirixrpc_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.DicomSeries.osirixrpc_uid)
}
inline void DicomSeries::set_osirixrpc_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.DicomSeries.osirixrpc_uid)
}
inline void DicomSeries::set_osirixrpc_uid(const char* value,
    size_t size) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.DicomSeries.osirixrpc_uid)
}
inline std::string* DicomSeries::_internal_mutable_osirixrpc_uid() {
  
  return osirixrpc_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DicomSeries::release_osirixrpc_uid() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DicomSeries.osirixrpc_uid)
  return osirixrpc_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicomSeries::set_allocated_osirixrpc_uid(std::string* osirixrpc_uid) {
  if (osirixrpc_uid != nullptr) {
    
  } else {
    
  }
  osirixrpc_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osirixrpc_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DicomSeries.osirixrpc_uid)
}

// -------------------------------------------------------------------

// DicomStudy

// string osirixrpc_uid = 1;
inline void DicomStudy::clear_osirixrpc_uid() {
  osirixrpc_uid_.ClearToEmpty();
}
inline const std::string& DicomStudy::osirixrpc_uid() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.DicomStudy.osirixrpc_uid)
  return _internal_osirixrpc_uid();
}
inline void DicomStudy::set_osirixrpc_uid(const std::string& value) {
  _internal_set_osirixrpc_uid(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.DicomStudy.osirixrpc_uid)
}
inline std::string* DicomStudy::mutable_osirixrpc_uid() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.DicomStudy.osirixrpc_uid)
  return _internal_mutable_osirixrpc_uid();
}
inline const std::string& DicomStudy::_internal_osirixrpc_uid() const {
  return osirixrpc_uid_.Get();
}
inline void DicomStudy::_internal_set_osirixrpc_uid(const std::string& value) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DicomStudy::set_osirixrpc_uid(std::string&& value) {
  
  osirixrpc_uid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.DicomStudy.osirixrpc_uid)
}
inline void DicomStudy::set_osirixrpc_uid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.DicomStudy.osirixrpc_uid)
}
inline void DicomStudy::set_osirixrpc_uid(const char* value,
    size_t size) {
  
  osirixrpc_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.DicomStudy.osirixrpc_uid)
}
inline std::string* DicomStudy::_internal_mutable_osirixrpc_uid() {
  
  return osirixrpc_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DicomStudy::release_osirixrpc_uid() {
  // @@protoc_insertion_point(field_release:osirixgrpc.DicomStudy.osirixrpc_uid)
  return osirixrpc_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DicomStudy::set_allocated_osirixrpc_uid(std::string* osirixrpc_uid) {
  if (osirixrpc_uid != nullptr) {
    
  } else {
    
  }
  osirixrpc_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), osirixrpc_uid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.DicomStudy.osirixrpc_uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osirixgrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_types_2eproto
