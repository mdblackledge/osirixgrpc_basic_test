// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vrcontroller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vrcontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_vrcontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "utilities.pb.h"
#include "types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_vrcontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vrcontroller_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vrcontroller_2eproto;
namespace osirixgrpc {
class VRControllerBlendingControllerResponse;
class VRControllerBlendingControllerResponseDefaultTypeInternal;
extern VRControllerBlendingControllerResponseDefaultTypeInternal _VRControllerBlendingControllerResponse_default_instance_;
class VRControllerDisplayROIVolumeRequest;
class VRControllerDisplayROIVolumeRequestDefaultTypeInternal;
extern VRControllerDisplayROIVolumeRequestDefaultTypeInternal _VRControllerDisplayROIVolumeRequest_default_instance_;
class VRControllerHideROIVolumeRequest;
class VRControllerHideROIVolumeRequestDefaultTypeInternal;
extern VRControllerHideROIVolumeRequestDefaultTypeInternal _VRControllerHideROIVolumeRequest_default_instance_;
class VRControllerROIVolumesResponse;
class VRControllerROIVolumesResponseDefaultTypeInternal;
extern VRControllerROIVolumesResponseDefaultTypeInternal _VRControllerROIVolumesResponse_default_instance_;
class VRControllerRenderingModeResponse;
class VRControllerRenderingModeResponseDefaultTypeInternal;
extern VRControllerRenderingModeResponseDefaultTypeInternal _VRControllerRenderingModeResponse_default_instance_;
class VRControllerSetRenderingModeRequest;
class VRControllerSetRenderingModeRequestDefaultTypeInternal;
extern VRControllerSetRenderingModeRequestDefaultTypeInternal _VRControllerSetRenderingModeRequest_default_instance_;
class VRControllerSetWLWWRequest;
class VRControllerSetWLWWRequestDefaultTypeInternal;
extern VRControllerSetWLWWRequestDefaultTypeInternal _VRControllerSetWLWWRequest_default_instance_;
class VRControllerStyleResponse;
class VRControllerStyleResponseDefaultTypeInternal;
extern VRControllerStyleResponseDefaultTypeInternal _VRControllerStyleResponse_default_instance_;
class VRControllerTitleResponse;
class VRControllerTitleResponseDefaultTypeInternal;
extern VRControllerTitleResponseDefaultTypeInternal _VRControllerTitleResponse_default_instance_;
class VRControllerViewer2DResponse;
class VRControllerViewer2DResponseDefaultTypeInternal;
extern VRControllerViewer2DResponseDefaultTypeInternal _VRControllerViewer2DResponse_default_instance_;
class VRControllerWLWWResponse;
class VRControllerWLWWResponseDefaultTypeInternal;
extern VRControllerWLWWResponseDefaultTypeInternal _VRControllerWLWWResponse_default_instance_;
}  // namespace osirixgrpc
PROTOBUF_NAMESPACE_OPEN
template<> ::osirixgrpc::VRControllerBlendingControllerResponse* Arena::CreateMaybeMessage<::osirixgrpc::VRControllerBlendingControllerResponse>(Arena*);
template<> ::osirixgrpc::VRControllerDisplayROIVolumeRequest* Arena::CreateMaybeMessage<::osirixgrpc::VRControllerDisplayROIVolumeRequest>(Arena*);
template<> ::osirixgrpc::VRControllerHideROIVolumeRequest* Arena::CreateMaybeMessage<::osirixgrpc::VRControllerHideROIVolumeRequest>(Arena*);
template<> ::osirixgrpc::VRControllerROIVolumesResponse* Arena::CreateMaybeMessage<::osirixgrpc::VRControllerROIVolumesResponse>(Arena*);
template<> ::osirixgrpc::VRControllerRenderingModeResponse* Arena::CreateMaybeMessage<::osirixgrpc::VRControllerRenderingModeResponse>(Arena*);
template<> ::osirixgrpc::VRControllerSetRenderingModeRequest* Arena::CreateMaybeMessage<::osirixgrpc::VRControllerSetRenderingModeRequest>(Arena*);
template<> ::osirixgrpc::VRControllerSetWLWWRequest* Arena::CreateMaybeMessage<::osirixgrpc::VRControllerSetWLWWRequest>(Arena*);
template<> ::osirixgrpc::VRControllerStyleResponse* Arena::CreateMaybeMessage<::osirixgrpc::VRControllerStyleResponse>(Arena*);
template<> ::osirixgrpc::VRControllerTitleResponse* Arena::CreateMaybeMessage<::osirixgrpc::VRControllerTitleResponse>(Arena*);
template<> ::osirixgrpc::VRControllerViewer2DResponse* Arena::CreateMaybeMessage<::osirixgrpc::VRControllerViewer2DResponse>(Arena*);
template<> ::osirixgrpc::VRControllerWLWWResponse* Arena::CreateMaybeMessage<::osirixgrpc::VRControllerWLWWResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osirixgrpc {

// ===================================================================

class VRControllerViewer2DResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.VRControllerViewer2DResponse) */ {
 public:
  inline VRControllerViewer2DResponse() : VRControllerViewer2DResponse(nullptr) {}
  virtual ~VRControllerViewer2DResponse();

  VRControllerViewer2DResponse(const VRControllerViewer2DResponse& from);
  VRControllerViewer2DResponse(VRControllerViewer2DResponse&& from) noexcept
    : VRControllerViewer2DResponse() {
    *this = ::std::move(from);
  }

  inline VRControllerViewer2DResponse& operator=(const VRControllerViewer2DResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRControllerViewer2DResponse& operator=(VRControllerViewer2DResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VRControllerViewer2DResponse& default_instance();

  static inline const VRControllerViewer2DResponse* internal_default_instance() {
    return reinterpret_cast<const VRControllerViewer2DResponse*>(
               &_VRControllerViewer2DResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VRControllerViewer2DResponse& a, VRControllerViewer2DResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VRControllerViewer2DResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRControllerViewer2DResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VRControllerViewer2DResponse* New() const final {
    return CreateMaybeMessage<VRControllerViewer2DResponse>(nullptr);
  }

  VRControllerViewer2DResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VRControllerViewer2DResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VRControllerViewer2DResponse& from);
  void MergeFrom(const VRControllerViewer2DResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VRControllerViewer2DResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.VRControllerViewer2DResponse";
  }
  protected:
  explicit VRControllerViewer2DResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vrcontroller_2eproto);
    return ::descriptor_table_vrcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kViewerControllerFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // .osirixgrpc.ViewerController viewer_controller = 2;
  bool has_viewer_controller() const;
  private:
  bool _internal_has_viewer_controller() const;
  public:
  void clear_viewer_controller();
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();

  // @@protoc_insertion_point(class_scope:osirixgrpc.VRControllerViewer2DResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  ::osirixgrpc::ViewerController* viewer_controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vrcontroller_2eproto;
};
// -------------------------------------------------------------------

class VRControllerBlendingControllerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.VRControllerBlendingControllerResponse) */ {
 public:
  inline VRControllerBlendingControllerResponse() : VRControllerBlendingControllerResponse(nullptr) {}
  virtual ~VRControllerBlendingControllerResponse();

  VRControllerBlendingControllerResponse(const VRControllerBlendingControllerResponse& from);
  VRControllerBlendingControllerResponse(VRControllerBlendingControllerResponse&& from) noexcept
    : VRControllerBlendingControllerResponse() {
    *this = ::std::move(from);
  }

  inline VRControllerBlendingControllerResponse& operator=(const VRControllerBlendingControllerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRControllerBlendingControllerResponse& operator=(VRControllerBlendingControllerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VRControllerBlendingControllerResponse& default_instance();

  static inline const VRControllerBlendingControllerResponse* internal_default_instance() {
    return reinterpret_cast<const VRControllerBlendingControllerResponse*>(
               &_VRControllerBlendingControllerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VRControllerBlendingControllerResponse& a, VRControllerBlendingControllerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VRControllerBlendingControllerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRControllerBlendingControllerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VRControllerBlendingControllerResponse* New() const final {
    return CreateMaybeMessage<VRControllerBlendingControllerResponse>(nullptr);
  }

  VRControllerBlendingControllerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VRControllerBlendingControllerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VRControllerBlendingControllerResponse& from);
  void MergeFrom(const VRControllerBlendingControllerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VRControllerBlendingControllerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.VRControllerBlendingControllerResponse";
  }
  protected:
  explicit VRControllerBlendingControllerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vrcontroller_2eproto);
    return ::descriptor_table_vrcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kViewerControllerFieldNumber = 2,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // .osirixgrpc.ViewerController viewer_controller = 2;
  bool has_viewer_controller() const;
  private:
  bool _internal_has_viewer_controller() const;
  public:
  void clear_viewer_controller();
  const ::osirixgrpc::ViewerController& viewer_controller() const;
  ::osirixgrpc::ViewerController* release_viewer_controller();
  ::osirixgrpc::ViewerController* mutable_viewer_controller();
  void set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller);
  private:
  const ::osirixgrpc::ViewerController& _internal_viewer_controller() const;
  ::osirixgrpc::ViewerController* _internal_mutable_viewer_controller();
  public:
  void unsafe_arena_set_allocated_viewer_controller(
      ::osirixgrpc::ViewerController* viewer_controller);
  ::osirixgrpc::ViewerController* unsafe_arena_release_viewer_controller();

  // @@protoc_insertion_point(class_scope:osirixgrpc.VRControllerBlendingControllerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  ::osirixgrpc::ViewerController* viewer_controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vrcontroller_2eproto;
};
// -------------------------------------------------------------------

class VRControllerRenderingModeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.VRControllerRenderingModeResponse) */ {
 public:
  inline VRControllerRenderingModeResponse() : VRControllerRenderingModeResponse(nullptr) {}
  virtual ~VRControllerRenderingModeResponse();

  VRControllerRenderingModeResponse(const VRControllerRenderingModeResponse& from);
  VRControllerRenderingModeResponse(VRControllerRenderingModeResponse&& from) noexcept
    : VRControllerRenderingModeResponse() {
    *this = ::std::move(from);
  }

  inline VRControllerRenderingModeResponse& operator=(const VRControllerRenderingModeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRControllerRenderingModeResponse& operator=(VRControllerRenderingModeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VRControllerRenderingModeResponse& default_instance();

  static inline const VRControllerRenderingModeResponse* internal_default_instance() {
    return reinterpret_cast<const VRControllerRenderingModeResponse*>(
               &_VRControllerRenderingModeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VRControllerRenderingModeResponse& a, VRControllerRenderingModeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VRControllerRenderingModeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRControllerRenderingModeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VRControllerRenderingModeResponse* New() const final {
    return CreateMaybeMessage<VRControllerRenderingModeResponse>(nullptr);
  }

  VRControllerRenderingModeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VRControllerRenderingModeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VRControllerRenderingModeResponse& from);
  void MergeFrom(const VRControllerRenderingModeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VRControllerRenderingModeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.VRControllerRenderingModeResponse";
  }
  protected:
  explicit VRControllerRenderingModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vrcontroller_2eproto);
    return ::descriptor_table_vrcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRenderingModeFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string rendering_mode = 2;
  void clear_rendering_mode();
  const std::string& rendering_mode() const;
  void set_rendering_mode(const std::string& value);
  void set_rendering_mode(std::string&& value);
  void set_rendering_mode(const char* value);
  void set_rendering_mode(const char* value, size_t size);
  std::string* mutable_rendering_mode();
  std::string* release_rendering_mode();
  void set_allocated_rendering_mode(std::string* rendering_mode);
  private:
  const std::string& _internal_rendering_mode() const;
  void _internal_set_rendering_mode(const std::string& value);
  std::string* _internal_mutable_rendering_mode();
  public:

  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:osirixgrpc.VRControllerRenderingModeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rendering_mode_;
  ::osirixgrpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vrcontroller_2eproto;
};
// -------------------------------------------------------------------

class VRControllerWLWWResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.VRControllerWLWWResponse) */ {
 public:
  inline VRControllerWLWWResponse() : VRControllerWLWWResponse(nullptr) {}
  virtual ~VRControllerWLWWResponse();

  VRControllerWLWWResponse(const VRControllerWLWWResponse& from);
  VRControllerWLWWResponse(VRControllerWLWWResponse&& from) noexcept
    : VRControllerWLWWResponse() {
    *this = ::std::move(from);
  }

  inline VRControllerWLWWResponse& operator=(const VRControllerWLWWResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRControllerWLWWResponse& operator=(VRControllerWLWWResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VRControllerWLWWResponse& default_instance();

  static inline const VRControllerWLWWResponse* internal_default_instance() {
    return reinterpret_cast<const VRControllerWLWWResponse*>(
               &_VRControllerWLWWResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VRControllerWLWWResponse& a, VRControllerWLWWResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VRControllerWLWWResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRControllerWLWWResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VRControllerWLWWResponse* New() const final {
    return CreateMaybeMessage<VRControllerWLWWResponse>(nullptr);
  }

  VRControllerWLWWResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VRControllerWLWWResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VRControllerWLWWResponse& from);
  void MergeFrom(const VRControllerWLWWResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VRControllerWLWWResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.VRControllerWLWWResponse";
  }
  protected:
  explicit VRControllerWLWWResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vrcontroller_2eproto);
    return ::descriptor_table_vrcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kWlFieldNumber = 2,
    kWwFieldNumber = 3,
  };
  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // float wl = 2;
  void clear_wl();
  float wl() const;
  void set_wl(float value);
  private:
  float _internal_wl() const;
  void _internal_set_wl(float value);
  public:

  // float ww = 3;
  void clear_ww();
  float ww() const;
  void set_ww(float value);
  private:
  float _internal_ww() const;
  void _internal_set_ww(float value);
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.VRControllerWLWWResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::Status* status_;
  float wl_;
  float ww_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vrcontroller_2eproto;
};
// -------------------------------------------------------------------

class VRControllerStyleResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.VRControllerStyleResponse) */ {
 public:
  inline VRControllerStyleResponse() : VRControllerStyleResponse(nullptr) {}
  virtual ~VRControllerStyleResponse();

  VRControllerStyleResponse(const VRControllerStyleResponse& from);
  VRControllerStyleResponse(VRControllerStyleResponse&& from) noexcept
    : VRControllerStyleResponse() {
    *this = ::std::move(from);
  }

  inline VRControllerStyleResponse& operator=(const VRControllerStyleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRControllerStyleResponse& operator=(VRControllerStyleResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VRControllerStyleResponse& default_instance();

  static inline const VRControllerStyleResponse* internal_default_instance() {
    return reinterpret_cast<const VRControllerStyleResponse*>(
               &_VRControllerStyleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VRControllerStyleResponse& a, VRControllerStyleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VRControllerStyleResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRControllerStyleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VRControllerStyleResponse* New() const final {
    return CreateMaybeMessage<VRControllerStyleResponse>(nullptr);
  }

  VRControllerStyleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VRControllerStyleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VRControllerStyleResponse& from);
  void MergeFrom(const VRControllerStyleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VRControllerStyleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.VRControllerStyleResponse";
  }
  protected:
  explicit VRControllerStyleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vrcontroller_2eproto);
    return ::descriptor_table_vrcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStyleFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string style = 2;
  void clear_style();
  const std::string& style() const;
  void set_style(const std::string& value);
  void set_style(std::string&& value);
  void set_style(const char* value);
  void set_style(const char* value, size_t size);
  std::string* mutable_style();
  std::string* release_style();
  void set_allocated_style(std::string* style);
  private:
  const std::string& _internal_style() const;
  void _internal_set_style(const std::string& value);
  std::string* _internal_mutable_style();
  public:

  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:osirixgrpc.VRControllerStyleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr style_;
  ::osirixgrpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vrcontroller_2eproto;
};
// -------------------------------------------------------------------

class VRControllerTitleResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.VRControllerTitleResponse) */ {
 public:
  inline VRControllerTitleResponse() : VRControllerTitleResponse(nullptr) {}
  virtual ~VRControllerTitleResponse();

  VRControllerTitleResponse(const VRControllerTitleResponse& from);
  VRControllerTitleResponse(VRControllerTitleResponse&& from) noexcept
    : VRControllerTitleResponse() {
    *this = ::std::move(from);
  }

  inline VRControllerTitleResponse& operator=(const VRControllerTitleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRControllerTitleResponse& operator=(VRControllerTitleResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VRControllerTitleResponse& default_instance();

  static inline const VRControllerTitleResponse* internal_default_instance() {
    return reinterpret_cast<const VRControllerTitleResponse*>(
               &_VRControllerTitleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VRControllerTitleResponse& a, VRControllerTitleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VRControllerTitleResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRControllerTitleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VRControllerTitleResponse* New() const final {
    return CreateMaybeMessage<VRControllerTitleResponse>(nullptr);
  }

  VRControllerTitleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VRControllerTitleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VRControllerTitleResponse& from);
  void MergeFrom(const VRControllerTitleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VRControllerTitleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.VRControllerTitleResponse";
  }
  protected:
  explicit VRControllerTitleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vrcontroller_2eproto);
    return ::descriptor_table_vrcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  void set_title(const std::string& value);
  void set_title(std::string&& value);
  void set_title(const char* value);
  void set_title(const char* value, size_t size);
  std::string* mutable_title();
  std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:osirixgrpc.VRControllerTitleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::osirixgrpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vrcontroller_2eproto;
};
// -------------------------------------------------------------------

class VRControllerROIVolumesResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.VRControllerROIVolumesResponse) */ {
 public:
  inline VRControllerROIVolumesResponse() : VRControllerROIVolumesResponse(nullptr) {}
  virtual ~VRControllerROIVolumesResponse();

  VRControllerROIVolumesResponse(const VRControllerROIVolumesResponse& from);
  VRControllerROIVolumesResponse(VRControllerROIVolumesResponse&& from) noexcept
    : VRControllerROIVolumesResponse() {
    *this = ::std::move(from);
  }

  inline VRControllerROIVolumesResponse& operator=(const VRControllerROIVolumesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRControllerROIVolumesResponse& operator=(VRControllerROIVolumesResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VRControllerROIVolumesResponse& default_instance();

  static inline const VRControllerROIVolumesResponse* internal_default_instance() {
    return reinterpret_cast<const VRControllerROIVolumesResponse*>(
               &_VRControllerROIVolumesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VRControllerROIVolumesResponse& a, VRControllerROIVolumesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VRControllerROIVolumesResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRControllerROIVolumesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VRControllerROIVolumesResponse* New() const final {
    return CreateMaybeMessage<VRControllerROIVolumesResponse>(nullptr);
  }

  VRControllerROIVolumesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VRControllerROIVolumesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VRControllerROIVolumesResponse& from);
  void MergeFrom(const VRControllerROIVolumesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VRControllerROIVolumesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.VRControllerROIVolumesResponse";
  }
  protected:
  explicit VRControllerROIVolumesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vrcontroller_2eproto);
    return ::descriptor_table_vrcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoiVolumesFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // repeated .osirixgrpc.ROIVolume roi_volumes = 2;
  int roi_volumes_size() const;
  private:
  int _internal_roi_volumes_size() const;
  public:
  void clear_roi_volumes();
  ::osirixgrpc::ROIVolume* mutable_roi_volumes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROIVolume >*
      mutable_roi_volumes();
  private:
  const ::osirixgrpc::ROIVolume& _internal_roi_volumes(int index) const;
  ::osirixgrpc::ROIVolume* _internal_add_roi_volumes();
  public:
  const ::osirixgrpc::ROIVolume& roi_volumes(int index) const;
  ::osirixgrpc::ROIVolume* add_roi_volumes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROIVolume >&
      roi_volumes() const;

  // .osirixgrpc.Status status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::osirixgrpc::Status& status() const;
  ::osirixgrpc::Status* release_status();
  ::osirixgrpc::Status* mutable_status();
  void set_allocated_status(::osirixgrpc::Status* status);
  private:
  const ::osirixgrpc::Status& _internal_status() const;
  ::osirixgrpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::osirixgrpc::Status* status);
  ::osirixgrpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:osirixgrpc.VRControllerROIVolumesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROIVolume > roi_volumes_;
  ::osirixgrpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vrcontroller_2eproto;
};
// -------------------------------------------------------------------

class VRControllerSetRenderingModeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.VRControllerSetRenderingModeRequest) */ {
 public:
  inline VRControllerSetRenderingModeRequest() : VRControllerSetRenderingModeRequest(nullptr) {}
  virtual ~VRControllerSetRenderingModeRequest();

  VRControllerSetRenderingModeRequest(const VRControllerSetRenderingModeRequest& from);
  VRControllerSetRenderingModeRequest(VRControllerSetRenderingModeRequest&& from) noexcept
    : VRControllerSetRenderingModeRequest() {
    *this = ::std::move(from);
  }

  inline VRControllerSetRenderingModeRequest& operator=(const VRControllerSetRenderingModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRControllerSetRenderingModeRequest& operator=(VRControllerSetRenderingModeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VRControllerSetRenderingModeRequest& default_instance();

  static inline const VRControllerSetRenderingModeRequest* internal_default_instance() {
    return reinterpret_cast<const VRControllerSetRenderingModeRequest*>(
               &_VRControllerSetRenderingModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VRControllerSetRenderingModeRequest& a, VRControllerSetRenderingModeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VRControllerSetRenderingModeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRControllerSetRenderingModeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VRControllerSetRenderingModeRequest* New() const final {
    return CreateMaybeMessage<VRControllerSetRenderingModeRequest>(nullptr);
  }

  VRControllerSetRenderingModeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VRControllerSetRenderingModeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VRControllerSetRenderingModeRequest& from);
  void MergeFrom(const VRControllerSetRenderingModeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VRControllerSetRenderingModeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.VRControllerSetRenderingModeRequest";
  }
  protected:
  explicit VRControllerSetRenderingModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vrcontroller_2eproto);
    return ::descriptor_table_vrcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRenderingModeFieldNumber = 2,
    kVrControllerFieldNumber = 1,
  };
  // string rendering_mode = 2;
  void clear_rendering_mode();
  const std::string& rendering_mode() const;
  void set_rendering_mode(const std::string& value);
  void set_rendering_mode(std::string&& value);
  void set_rendering_mode(const char* value);
  void set_rendering_mode(const char* value, size_t size);
  std::string* mutable_rendering_mode();
  std::string* release_rendering_mode();
  void set_allocated_rendering_mode(std::string* rendering_mode);
  private:
  const std::string& _internal_rendering_mode() const;
  void _internal_set_rendering_mode(const std::string& value);
  std::string* _internal_mutable_rendering_mode();
  public:

  // .osirixgrpc.VRController vr_controller = 1;
  bool has_vr_controller() const;
  private:
  bool _internal_has_vr_controller() const;
  public:
  void clear_vr_controller();
  const ::osirixgrpc::VRController& vr_controller() const;
  ::osirixgrpc::VRController* release_vr_controller();
  ::osirixgrpc::VRController* mutable_vr_controller();
  void set_allocated_vr_controller(::osirixgrpc::VRController* vr_controller);
  private:
  const ::osirixgrpc::VRController& _internal_vr_controller() const;
  ::osirixgrpc::VRController* _internal_mutable_vr_controller();
  public:
  void unsafe_arena_set_allocated_vr_controller(
      ::osirixgrpc::VRController* vr_controller);
  ::osirixgrpc::VRController* unsafe_arena_release_vr_controller();

  // @@protoc_insertion_point(class_scope:osirixgrpc.VRControllerSetRenderingModeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rendering_mode_;
  ::osirixgrpc::VRController* vr_controller_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vrcontroller_2eproto;
};
// -------------------------------------------------------------------

class VRControllerSetWLWWRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.VRControllerSetWLWWRequest) */ {
 public:
  inline VRControllerSetWLWWRequest() : VRControllerSetWLWWRequest(nullptr) {}
  virtual ~VRControllerSetWLWWRequest();

  VRControllerSetWLWWRequest(const VRControllerSetWLWWRequest& from);
  VRControllerSetWLWWRequest(VRControllerSetWLWWRequest&& from) noexcept
    : VRControllerSetWLWWRequest() {
    *this = ::std::move(from);
  }

  inline VRControllerSetWLWWRequest& operator=(const VRControllerSetWLWWRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRControllerSetWLWWRequest& operator=(VRControllerSetWLWWRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VRControllerSetWLWWRequest& default_instance();

  static inline const VRControllerSetWLWWRequest* internal_default_instance() {
    return reinterpret_cast<const VRControllerSetWLWWRequest*>(
               &_VRControllerSetWLWWRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VRControllerSetWLWWRequest& a, VRControllerSetWLWWRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VRControllerSetWLWWRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRControllerSetWLWWRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VRControllerSetWLWWRequest* New() const final {
    return CreateMaybeMessage<VRControllerSetWLWWRequest>(nullptr);
  }

  VRControllerSetWLWWRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VRControllerSetWLWWRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VRControllerSetWLWWRequest& from);
  void MergeFrom(const VRControllerSetWLWWRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VRControllerSetWLWWRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.VRControllerSetWLWWRequest";
  }
  protected:
  explicit VRControllerSetWLWWRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vrcontroller_2eproto);
    return ::descriptor_table_vrcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrControllerFieldNumber = 1,
    kWlFieldNumber = 2,
    kWwFieldNumber = 3,
  };
  // .osirixgrpc.VRController vr_controller = 1;
  bool has_vr_controller() const;
  private:
  bool _internal_has_vr_controller() const;
  public:
  void clear_vr_controller();
  const ::osirixgrpc::VRController& vr_controller() const;
  ::osirixgrpc::VRController* release_vr_controller();
  ::osirixgrpc::VRController* mutable_vr_controller();
  void set_allocated_vr_controller(::osirixgrpc::VRController* vr_controller);
  private:
  const ::osirixgrpc::VRController& _internal_vr_controller() const;
  ::osirixgrpc::VRController* _internal_mutable_vr_controller();
  public:
  void unsafe_arena_set_allocated_vr_controller(
      ::osirixgrpc::VRController* vr_controller);
  ::osirixgrpc::VRController* unsafe_arena_release_vr_controller();

  // float wl = 2;
  void clear_wl();
  float wl() const;
  void set_wl(float value);
  private:
  float _internal_wl() const;
  void _internal_set_wl(float value);
  public:

  // float ww = 3;
  void clear_ww();
  float ww() const;
  void set_ww(float value);
  private:
  float _internal_ww() const;
  void _internal_set_ww(float value);
  public:

  // @@protoc_insertion_point(class_scope:osirixgrpc.VRControllerSetWLWWRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::VRController* vr_controller_;
  float wl_;
  float ww_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vrcontroller_2eproto;
};
// -------------------------------------------------------------------

class VRControllerHideROIVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.VRControllerHideROIVolumeRequest) */ {
 public:
  inline VRControllerHideROIVolumeRequest() : VRControllerHideROIVolumeRequest(nullptr) {}
  virtual ~VRControllerHideROIVolumeRequest();

  VRControllerHideROIVolumeRequest(const VRControllerHideROIVolumeRequest& from);
  VRControllerHideROIVolumeRequest(VRControllerHideROIVolumeRequest&& from) noexcept
    : VRControllerHideROIVolumeRequest() {
    *this = ::std::move(from);
  }

  inline VRControllerHideROIVolumeRequest& operator=(const VRControllerHideROIVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRControllerHideROIVolumeRequest& operator=(VRControllerHideROIVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VRControllerHideROIVolumeRequest& default_instance();

  static inline const VRControllerHideROIVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const VRControllerHideROIVolumeRequest*>(
               &_VRControllerHideROIVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VRControllerHideROIVolumeRequest& a, VRControllerHideROIVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VRControllerHideROIVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRControllerHideROIVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VRControllerHideROIVolumeRequest* New() const final {
    return CreateMaybeMessage<VRControllerHideROIVolumeRequest>(nullptr);
  }

  VRControllerHideROIVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VRControllerHideROIVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VRControllerHideROIVolumeRequest& from);
  void MergeFrom(const VRControllerHideROIVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VRControllerHideROIVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.VRControllerHideROIVolumeRequest";
  }
  protected:
  explicit VRControllerHideROIVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vrcontroller_2eproto);
    return ::descriptor_table_vrcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrControllerFieldNumber = 1,
    kRoiVolumeFieldNumber = 2,
  };
  // .osirixgrpc.VRController vr_controller = 1;
  bool has_vr_controller() const;
  private:
  bool _internal_has_vr_controller() const;
  public:
  void clear_vr_controller();
  const ::osirixgrpc::VRController& vr_controller() const;
  ::osirixgrpc::VRController* release_vr_controller();
  ::osirixgrpc::VRController* mutable_vr_controller();
  void set_allocated_vr_controller(::osirixgrpc::VRController* vr_controller);
  private:
  const ::osirixgrpc::VRController& _internal_vr_controller() const;
  ::osirixgrpc::VRController* _internal_mutable_vr_controller();
  public:
  void unsafe_arena_set_allocated_vr_controller(
      ::osirixgrpc::VRController* vr_controller);
  ::osirixgrpc::VRController* unsafe_arena_release_vr_controller();

  // .osirixgrpc.ROIVolume roi_volume = 2;
  bool has_roi_volume() const;
  private:
  bool _internal_has_roi_volume() const;
  public:
  void clear_roi_volume();
  const ::osirixgrpc::ROIVolume& roi_volume() const;
  ::osirixgrpc::ROIVolume* release_roi_volume();
  ::osirixgrpc::ROIVolume* mutable_roi_volume();
  void set_allocated_roi_volume(::osirixgrpc::ROIVolume* roi_volume);
  private:
  const ::osirixgrpc::ROIVolume& _internal_roi_volume() const;
  ::osirixgrpc::ROIVolume* _internal_mutable_roi_volume();
  public:
  void unsafe_arena_set_allocated_roi_volume(
      ::osirixgrpc::ROIVolume* roi_volume);
  ::osirixgrpc::ROIVolume* unsafe_arena_release_roi_volume();

  // @@protoc_insertion_point(class_scope:osirixgrpc.VRControllerHideROIVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::VRController* vr_controller_;
  ::osirixgrpc::ROIVolume* roi_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vrcontroller_2eproto;
};
// -------------------------------------------------------------------

class VRControllerDisplayROIVolumeRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osirixgrpc.VRControllerDisplayROIVolumeRequest) */ {
 public:
  inline VRControllerDisplayROIVolumeRequest() : VRControllerDisplayROIVolumeRequest(nullptr) {}
  virtual ~VRControllerDisplayROIVolumeRequest();

  VRControllerDisplayROIVolumeRequest(const VRControllerDisplayROIVolumeRequest& from);
  VRControllerDisplayROIVolumeRequest(VRControllerDisplayROIVolumeRequest&& from) noexcept
    : VRControllerDisplayROIVolumeRequest() {
    *this = ::std::move(from);
  }

  inline VRControllerDisplayROIVolumeRequest& operator=(const VRControllerDisplayROIVolumeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VRControllerDisplayROIVolumeRequest& operator=(VRControllerDisplayROIVolumeRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VRControllerDisplayROIVolumeRequest& default_instance();

  static inline const VRControllerDisplayROIVolumeRequest* internal_default_instance() {
    return reinterpret_cast<const VRControllerDisplayROIVolumeRequest*>(
               &_VRControllerDisplayROIVolumeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VRControllerDisplayROIVolumeRequest& a, VRControllerDisplayROIVolumeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VRControllerDisplayROIVolumeRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VRControllerDisplayROIVolumeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VRControllerDisplayROIVolumeRequest* New() const final {
    return CreateMaybeMessage<VRControllerDisplayROIVolumeRequest>(nullptr);
  }

  VRControllerDisplayROIVolumeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VRControllerDisplayROIVolumeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VRControllerDisplayROIVolumeRequest& from);
  void MergeFrom(const VRControllerDisplayROIVolumeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VRControllerDisplayROIVolumeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osirixgrpc.VRControllerDisplayROIVolumeRequest";
  }
  protected:
  explicit VRControllerDisplayROIVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_vrcontroller_2eproto);
    return ::descriptor_table_vrcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVrControllerFieldNumber = 1,
    kRoiVolumeFieldNumber = 2,
  };
  // .osirixgrpc.VRController vr_controller = 1;
  bool has_vr_controller() const;
  private:
  bool _internal_has_vr_controller() const;
  public:
  void clear_vr_controller();
  const ::osirixgrpc::VRController& vr_controller() const;
  ::osirixgrpc::VRController* release_vr_controller();
  ::osirixgrpc::VRController* mutable_vr_controller();
  void set_allocated_vr_controller(::osirixgrpc::VRController* vr_controller);
  private:
  const ::osirixgrpc::VRController& _internal_vr_controller() const;
  ::osirixgrpc::VRController* _internal_mutable_vr_controller();
  public:
  void unsafe_arena_set_allocated_vr_controller(
      ::osirixgrpc::VRController* vr_controller);
  ::osirixgrpc::VRController* unsafe_arena_release_vr_controller();

  // .osirixgrpc.ROIVolume roi_volume = 2;
  bool has_roi_volume() const;
  private:
  bool _internal_has_roi_volume() const;
  public:
  void clear_roi_volume();
  const ::osirixgrpc::ROIVolume& roi_volume() const;
  ::osirixgrpc::ROIVolume* release_roi_volume();
  ::osirixgrpc::ROIVolume* mutable_roi_volume();
  void set_allocated_roi_volume(::osirixgrpc::ROIVolume* roi_volume);
  private:
  const ::osirixgrpc::ROIVolume& _internal_roi_volume() const;
  ::osirixgrpc::ROIVolume* _internal_mutable_roi_volume();
  public:
  void unsafe_arena_set_allocated_roi_volume(
      ::osirixgrpc::ROIVolume* roi_volume);
  ::osirixgrpc::ROIVolume* unsafe_arena_release_roi_volume();

  // @@protoc_insertion_point(class_scope:osirixgrpc.VRControllerDisplayROIVolumeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osirixgrpc::VRController* vr_controller_;
  ::osirixgrpc::ROIVolume* roi_volume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_vrcontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VRControllerViewer2DResponse

// .osirixgrpc.Status status = 1;
inline bool VRControllerViewer2DResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool VRControllerViewer2DResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& VRControllerViewer2DResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& VRControllerViewer2DResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerViewer2DResponse.status)
  return _internal_status();
}
inline void VRControllerViewer2DResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerViewer2DResponse.status)
}
inline ::osirixgrpc::Status* VRControllerViewer2DResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* VRControllerViewer2DResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerViewer2DResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* VRControllerViewer2DResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* VRControllerViewer2DResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerViewer2DResponse.status)
  return _internal_mutable_status();
}
inline void VRControllerViewer2DResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerViewer2DResponse.status)
}

// .osirixgrpc.ViewerController viewer_controller = 2;
inline bool VRControllerViewer2DResponse::_internal_has_viewer_controller() const {
  return this != internal_default_instance() && viewer_controller_ != nullptr;
}
inline bool VRControllerViewer2DResponse::has_viewer_controller() const {
  return _internal_has_viewer_controller();
}
inline const ::osirixgrpc::ViewerController& VRControllerViewer2DResponse::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& VRControllerViewer2DResponse::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerViewer2DResponse.viewer_controller)
  return _internal_viewer_controller();
}
inline void VRControllerViewer2DResponse::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller_);
  }
  viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerViewer2DResponse.viewer_controller)
}
inline ::osirixgrpc::ViewerController* VRControllerViewer2DResponse::release_viewer_controller() {
  
  ::osirixgrpc::ViewerController* temp = viewer_controller_;
  viewer_controller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::ViewerController* VRControllerViewer2DResponse::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerViewer2DResponse.viewer_controller)
  
  ::osirixgrpc::ViewerController* temp = viewer_controller_;
  viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* VRControllerViewer2DResponse::_internal_mutable_viewer_controller() {
  
  if (viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArena());
    viewer_controller_ = p;
  }
  return viewer_controller_;
}
inline ::osirixgrpc::ViewerController* VRControllerViewer2DResponse::mutable_viewer_controller() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerViewer2DResponse.viewer_controller)
  return _internal_mutable_viewer_controller();
}
inline void VRControllerViewer2DResponse::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller)->GetArena();
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    
  } else {
    
  }
  viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerViewer2DResponse.viewer_controller)
}

// -------------------------------------------------------------------

// VRControllerBlendingControllerResponse

// .osirixgrpc.Status status = 1;
inline bool VRControllerBlendingControllerResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool VRControllerBlendingControllerResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& VRControllerBlendingControllerResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& VRControllerBlendingControllerResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerBlendingControllerResponse.status)
  return _internal_status();
}
inline void VRControllerBlendingControllerResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerBlendingControllerResponse.status)
}
inline ::osirixgrpc::Status* VRControllerBlendingControllerResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* VRControllerBlendingControllerResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerBlendingControllerResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* VRControllerBlendingControllerResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* VRControllerBlendingControllerResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerBlendingControllerResponse.status)
  return _internal_mutable_status();
}
inline void VRControllerBlendingControllerResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerBlendingControllerResponse.status)
}

// .osirixgrpc.ViewerController viewer_controller = 2;
inline bool VRControllerBlendingControllerResponse::_internal_has_viewer_controller() const {
  return this != internal_default_instance() && viewer_controller_ != nullptr;
}
inline bool VRControllerBlendingControllerResponse::has_viewer_controller() const {
  return _internal_has_viewer_controller();
}
inline const ::osirixgrpc::ViewerController& VRControllerBlendingControllerResponse::_internal_viewer_controller() const {
  const ::osirixgrpc::ViewerController* p = viewer_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ViewerController&>(
      ::osirixgrpc::_ViewerController_default_instance_);
}
inline const ::osirixgrpc::ViewerController& VRControllerBlendingControllerResponse::viewer_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerBlendingControllerResponse.viewer_controller)
  return _internal_viewer_controller();
}
inline void VRControllerBlendingControllerResponse::unsafe_arena_set_allocated_viewer_controller(
    ::osirixgrpc::ViewerController* viewer_controller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller_);
  }
  viewer_controller_ = viewer_controller;
  if (viewer_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerBlendingControllerResponse.viewer_controller)
}
inline ::osirixgrpc::ViewerController* VRControllerBlendingControllerResponse::release_viewer_controller() {
  
  ::osirixgrpc::ViewerController* temp = viewer_controller_;
  viewer_controller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::ViewerController* VRControllerBlendingControllerResponse::unsafe_arena_release_viewer_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerBlendingControllerResponse.viewer_controller)
  
  ::osirixgrpc::ViewerController* temp = viewer_controller_;
  viewer_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ViewerController* VRControllerBlendingControllerResponse::_internal_mutable_viewer_controller() {
  
  if (viewer_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ViewerController>(GetArena());
    viewer_controller_ = p;
  }
  return viewer_controller_;
}
inline ::osirixgrpc::ViewerController* VRControllerBlendingControllerResponse::mutable_viewer_controller() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerBlendingControllerResponse.viewer_controller)
  return _internal_mutable_viewer_controller();
}
inline void VRControllerBlendingControllerResponse::set_allocated_viewer_controller(::osirixgrpc::ViewerController* viewer_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller_);
  }
  if (viewer_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewer_controller)->GetArena();
    if (message_arena != submessage_arena) {
      viewer_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewer_controller, submessage_arena);
    }
    
  } else {
    
  }
  viewer_controller_ = viewer_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerBlendingControllerResponse.viewer_controller)
}

// -------------------------------------------------------------------

// VRControllerRenderingModeResponse

// .osirixgrpc.Status status = 1;
inline bool VRControllerRenderingModeResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool VRControllerRenderingModeResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& VRControllerRenderingModeResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& VRControllerRenderingModeResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerRenderingModeResponse.status)
  return _internal_status();
}
inline void VRControllerRenderingModeResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerRenderingModeResponse.status)
}
inline ::osirixgrpc::Status* VRControllerRenderingModeResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* VRControllerRenderingModeResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerRenderingModeResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* VRControllerRenderingModeResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* VRControllerRenderingModeResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerRenderingModeResponse.status)
  return _internal_mutable_status();
}
inline void VRControllerRenderingModeResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerRenderingModeResponse.status)
}

// string rendering_mode = 2;
inline void VRControllerRenderingModeResponse::clear_rendering_mode() {
  rendering_mode_.ClearToEmpty();
}
inline const std::string& VRControllerRenderingModeResponse::rendering_mode() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerRenderingModeResponse.rendering_mode)
  return _internal_rendering_mode();
}
inline void VRControllerRenderingModeResponse::set_rendering_mode(const std::string& value) {
  _internal_set_rendering_mode(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.VRControllerRenderingModeResponse.rendering_mode)
}
inline std::string* VRControllerRenderingModeResponse::mutable_rendering_mode() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerRenderingModeResponse.rendering_mode)
  return _internal_mutable_rendering_mode();
}
inline const std::string& VRControllerRenderingModeResponse::_internal_rendering_mode() const {
  return rendering_mode_.Get();
}
inline void VRControllerRenderingModeResponse::_internal_set_rendering_mode(const std::string& value) {
  
  rendering_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VRControllerRenderingModeResponse::set_rendering_mode(std::string&& value) {
  
  rendering_mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.VRControllerRenderingModeResponse.rendering_mode)
}
inline void VRControllerRenderingModeResponse::set_rendering_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rendering_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.VRControllerRenderingModeResponse.rendering_mode)
}
inline void VRControllerRenderingModeResponse::set_rendering_mode(const char* value,
    size_t size) {
  
  rendering_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.VRControllerRenderingModeResponse.rendering_mode)
}
inline std::string* VRControllerRenderingModeResponse::_internal_mutable_rendering_mode() {
  
  return rendering_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VRControllerRenderingModeResponse::release_rendering_mode() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerRenderingModeResponse.rendering_mode)
  return rendering_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VRControllerRenderingModeResponse::set_allocated_rendering_mode(std::string* rendering_mode) {
  if (rendering_mode != nullptr) {
    
  } else {
    
  }
  rendering_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rendering_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerRenderingModeResponse.rendering_mode)
}

// -------------------------------------------------------------------

// VRControllerWLWWResponse

// .osirixgrpc.Status status = 1;
inline bool VRControllerWLWWResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool VRControllerWLWWResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& VRControllerWLWWResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& VRControllerWLWWResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerWLWWResponse.status)
  return _internal_status();
}
inline void VRControllerWLWWResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerWLWWResponse.status)
}
inline ::osirixgrpc::Status* VRControllerWLWWResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* VRControllerWLWWResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerWLWWResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* VRControllerWLWWResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* VRControllerWLWWResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerWLWWResponse.status)
  return _internal_mutable_status();
}
inline void VRControllerWLWWResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerWLWWResponse.status)
}

// float wl = 2;
inline void VRControllerWLWWResponse::clear_wl() {
  wl_ = 0;
}
inline float VRControllerWLWWResponse::_internal_wl() const {
  return wl_;
}
inline float VRControllerWLWWResponse::wl() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerWLWWResponse.wl)
  return _internal_wl();
}
inline void VRControllerWLWWResponse::_internal_set_wl(float value) {
  
  wl_ = value;
}
inline void VRControllerWLWWResponse::set_wl(float value) {
  _internal_set_wl(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.VRControllerWLWWResponse.wl)
}

// float ww = 3;
inline void VRControllerWLWWResponse::clear_ww() {
  ww_ = 0;
}
inline float VRControllerWLWWResponse::_internal_ww() const {
  return ww_;
}
inline float VRControllerWLWWResponse::ww() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerWLWWResponse.ww)
  return _internal_ww();
}
inline void VRControllerWLWWResponse::_internal_set_ww(float value) {
  
  ww_ = value;
}
inline void VRControllerWLWWResponse::set_ww(float value) {
  _internal_set_ww(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.VRControllerWLWWResponse.ww)
}

// -------------------------------------------------------------------

// VRControllerStyleResponse

// .osirixgrpc.Status status = 1;
inline bool VRControllerStyleResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool VRControllerStyleResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& VRControllerStyleResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& VRControllerStyleResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerStyleResponse.status)
  return _internal_status();
}
inline void VRControllerStyleResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerStyleResponse.status)
}
inline ::osirixgrpc::Status* VRControllerStyleResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* VRControllerStyleResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerStyleResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* VRControllerStyleResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* VRControllerStyleResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerStyleResponse.status)
  return _internal_mutable_status();
}
inline void VRControllerStyleResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerStyleResponse.status)
}

// string style = 2;
inline void VRControllerStyleResponse::clear_style() {
  style_.ClearToEmpty();
}
inline const std::string& VRControllerStyleResponse::style() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerStyleResponse.style)
  return _internal_style();
}
inline void VRControllerStyleResponse::set_style(const std::string& value) {
  _internal_set_style(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.VRControllerStyleResponse.style)
}
inline std::string* VRControllerStyleResponse::mutable_style() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerStyleResponse.style)
  return _internal_mutable_style();
}
inline const std::string& VRControllerStyleResponse::_internal_style() const {
  return style_.Get();
}
inline void VRControllerStyleResponse::_internal_set_style(const std::string& value) {
  
  style_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VRControllerStyleResponse::set_style(std::string&& value) {
  
  style_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.VRControllerStyleResponse.style)
}
inline void VRControllerStyleResponse::set_style(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  style_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.VRControllerStyleResponse.style)
}
inline void VRControllerStyleResponse::set_style(const char* value,
    size_t size) {
  
  style_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.VRControllerStyleResponse.style)
}
inline std::string* VRControllerStyleResponse::_internal_mutable_style() {
  
  return style_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VRControllerStyleResponse::release_style() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerStyleResponse.style)
  return style_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VRControllerStyleResponse::set_allocated_style(std::string* style) {
  if (style != nullptr) {
    
  } else {
    
  }
  style_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), style,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerStyleResponse.style)
}

// -------------------------------------------------------------------

// VRControllerTitleResponse

// .osirixgrpc.Status status = 1;
inline bool VRControllerTitleResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool VRControllerTitleResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& VRControllerTitleResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& VRControllerTitleResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerTitleResponse.status)
  return _internal_status();
}
inline void VRControllerTitleResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerTitleResponse.status)
}
inline ::osirixgrpc::Status* VRControllerTitleResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* VRControllerTitleResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerTitleResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* VRControllerTitleResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* VRControllerTitleResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerTitleResponse.status)
  return _internal_mutable_status();
}
inline void VRControllerTitleResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerTitleResponse.status)
}

// string title = 2;
inline void VRControllerTitleResponse::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& VRControllerTitleResponse::title() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerTitleResponse.title)
  return _internal_title();
}
inline void VRControllerTitleResponse::set_title(const std::string& value) {
  _internal_set_title(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.VRControllerTitleResponse.title)
}
inline std::string* VRControllerTitleResponse::mutable_title() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerTitleResponse.title)
  return _internal_mutable_title();
}
inline const std::string& VRControllerTitleResponse::_internal_title() const {
  return title_.Get();
}
inline void VRControllerTitleResponse::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VRControllerTitleResponse::set_title(std::string&& value) {
  
  title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.VRControllerTitleResponse.title)
}
inline void VRControllerTitleResponse::set_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.VRControllerTitleResponse.title)
}
inline void VRControllerTitleResponse::set_title(const char* value,
    size_t size) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.VRControllerTitleResponse.title)
}
inline std::string* VRControllerTitleResponse::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VRControllerTitleResponse::release_title() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerTitleResponse.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VRControllerTitleResponse::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerTitleResponse.title)
}

// -------------------------------------------------------------------

// VRControllerROIVolumesResponse

// .osirixgrpc.Status status = 1;
inline bool VRControllerROIVolumesResponse::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool VRControllerROIVolumesResponse::has_status() const {
  return _internal_has_status();
}
inline const ::osirixgrpc::Status& VRControllerROIVolumesResponse::_internal_status() const {
  const ::osirixgrpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::Status&>(
      ::osirixgrpc::_Status_default_instance_);
}
inline const ::osirixgrpc::Status& VRControllerROIVolumesResponse::status() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerROIVolumesResponse.status)
  return _internal_status();
}
inline void VRControllerROIVolumesResponse::unsafe_arena_set_allocated_status(
    ::osirixgrpc::Status* status) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerROIVolumesResponse.status)
}
inline ::osirixgrpc::Status* VRControllerROIVolumesResponse::release_status() {
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::Status* VRControllerROIVolumesResponse::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerROIVolumesResponse.status)
  
  ::osirixgrpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::osirixgrpc::Status* VRControllerROIVolumesResponse::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::Status>(GetArena());
    status_ = p;
  }
  return status_;
}
inline ::osirixgrpc::Status* VRControllerROIVolumesResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerROIVolumesResponse.status)
  return _internal_mutable_status();
}
inline void VRControllerROIVolumesResponse::set_allocated_status(::osirixgrpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerROIVolumesResponse.status)
}

// repeated .osirixgrpc.ROIVolume roi_volumes = 2;
inline int VRControllerROIVolumesResponse::_internal_roi_volumes_size() const {
  return roi_volumes_.size();
}
inline int VRControllerROIVolumesResponse::roi_volumes_size() const {
  return _internal_roi_volumes_size();
}
inline ::osirixgrpc::ROIVolume* VRControllerROIVolumesResponse::mutable_roi_volumes(int index) {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerROIVolumesResponse.roi_volumes)
  return roi_volumes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROIVolume >*
VRControllerROIVolumesResponse::mutable_roi_volumes() {
  // @@protoc_insertion_point(field_mutable_list:osirixgrpc.VRControllerROIVolumesResponse.roi_volumes)
  return &roi_volumes_;
}
inline const ::osirixgrpc::ROIVolume& VRControllerROIVolumesResponse::_internal_roi_volumes(int index) const {
  return roi_volumes_.Get(index);
}
inline const ::osirixgrpc::ROIVolume& VRControllerROIVolumesResponse::roi_volumes(int index) const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerROIVolumesResponse.roi_volumes)
  return _internal_roi_volumes(index);
}
inline ::osirixgrpc::ROIVolume* VRControllerROIVolumesResponse::_internal_add_roi_volumes() {
  return roi_volumes_.Add();
}
inline ::osirixgrpc::ROIVolume* VRControllerROIVolumesResponse::add_roi_volumes() {
  // @@protoc_insertion_point(field_add:osirixgrpc.VRControllerROIVolumesResponse.roi_volumes)
  return _internal_add_roi_volumes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osirixgrpc::ROIVolume >&
VRControllerROIVolumesResponse::roi_volumes() const {
  // @@protoc_insertion_point(field_list:osirixgrpc.VRControllerROIVolumesResponse.roi_volumes)
  return roi_volumes_;
}

// -------------------------------------------------------------------

// VRControllerSetRenderingModeRequest

// .osirixgrpc.VRController vr_controller = 1;
inline bool VRControllerSetRenderingModeRequest::_internal_has_vr_controller() const {
  return this != internal_default_instance() && vr_controller_ != nullptr;
}
inline bool VRControllerSetRenderingModeRequest::has_vr_controller() const {
  return _internal_has_vr_controller();
}
inline const ::osirixgrpc::VRController& VRControllerSetRenderingModeRequest::_internal_vr_controller() const {
  const ::osirixgrpc::VRController* p = vr_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::VRController&>(
      ::osirixgrpc::_VRController_default_instance_);
}
inline const ::osirixgrpc::VRController& VRControllerSetRenderingModeRequest::vr_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerSetRenderingModeRequest.vr_controller)
  return _internal_vr_controller();
}
inline void VRControllerSetRenderingModeRequest::unsafe_arena_set_allocated_vr_controller(
    ::osirixgrpc::VRController* vr_controller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller_);
  }
  vr_controller_ = vr_controller;
  if (vr_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerSetRenderingModeRequest.vr_controller)
}
inline ::osirixgrpc::VRController* VRControllerSetRenderingModeRequest::release_vr_controller() {
  
  ::osirixgrpc::VRController* temp = vr_controller_;
  vr_controller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::VRController* VRControllerSetRenderingModeRequest::unsafe_arena_release_vr_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerSetRenderingModeRequest.vr_controller)
  
  ::osirixgrpc::VRController* temp = vr_controller_;
  vr_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::VRController* VRControllerSetRenderingModeRequest::_internal_mutable_vr_controller() {
  
  if (vr_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::VRController>(GetArena());
    vr_controller_ = p;
  }
  return vr_controller_;
}
inline ::osirixgrpc::VRController* VRControllerSetRenderingModeRequest::mutable_vr_controller() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerSetRenderingModeRequest.vr_controller)
  return _internal_mutable_vr_controller();
}
inline void VRControllerSetRenderingModeRequest::set_allocated_vr_controller(::osirixgrpc::VRController* vr_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller_);
  }
  if (vr_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller)->GetArena();
    if (message_arena != submessage_arena) {
      vr_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vr_controller, submessage_arena);
    }
    
  } else {
    
  }
  vr_controller_ = vr_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerSetRenderingModeRequest.vr_controller)
}

// string rendering_mode = 2;
inline void VRControllerSetRenderingModeRequest::clear_rendering_mode() {
  rendering_mode_.ClearToEmpty();
}
inline const std::string& VRControllerSetRenderingModeRequest::rendering_mode() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerSetRenderingModeRequest.rendering_mode)
  return _internal_rendering_mode();
}
inline void VRControllerSetRenderingModeRequest::set_rendering_mode(const std::string& value) {
  _internal_set_rendering_mode(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.VRControllerSetRenderingModeRequest.rendering_mode)
}
inline std::string* VRControllerSetRenderingModeRequest::mutable_rendering_mode() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerSetRenderingModeRequest.rendering_mode)
  return _internal_mutable_rendering_mode();
}
inline const std::string& VRControllerSetRenderingModeRequest::_internal_rendering_mode() const {
  return rendering_mode_.Get();
}
inline void VRControllerSetRenderingModeRequest::_internal_set_rendering_mode(const std::string& value) {
  
  rendering_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VRControllerSetRenderingModeRequest::set_rendering_mode(std::string&& value) {
  
  rendering_mode_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osirixgrpc.VRControllerSetRenderingModeRequest.rendering_mode)
}
inline void VRControllerSetRenderingModeRequest::set_rendering_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rendering_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osirixgrpc.VRControllerSetRenderingModeRequest.rendering_mode)
}
inline void VRControllerSetRenderingModeRequest::set_rendering_mode(const char* value,
    size_t size) {
  
  rendering_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osirixgrpc.VRControllerSetRenderingModeRequest.rendering_mode)
}
inline std::string* VRControllerSetRenderingModeRequest::_internal_mutable_rendering_mode() {
  
  return rendering_mode_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VRControllerSetRenderingModeRequest::release_rendering_mode() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerSetRenderingModeRequest.rendering_mode)
  return rendering_mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VRControllerSetRenderingModeRequest::set_allocated_rendering_mode(std::string* rendering_mode) {
  if (rendering_mode != nullptr) {
    
  } else {
    
  }
  rendering_mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rendering_mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerSetRenderingModeRequest.rendering_mode)
}

// -------------------------------------------------------------------

// VRControllerSetWLWWRequest

// .osirixgrpc.VRController vr_controller = 1;
inline bool VRControllerSetWLWWRequest::_internal_has_vr_controller() const {
  return this != internal_default_instance() && vr_controller_ != nullptr;
}
inline bool VRControllerSetWLWWRequest::has_vr_controller() const {
  return _internal_has_vr_controller();
}
inline const ::osirixgrpc::VRController& VRControllerSetWLWWRequest::_internal_vr_controller() const {
  const ::osirixgrpc::VRController* p = vr_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::VRController&>(
      ::osirixgrpc::_VRController_default_instance_);
}
inline const ::osirixgrpc::VRController& VRControllerSetWLWWRequest::vr_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerSetWLWWRequest.vr_controller)
  return _internal_vr_controller();
}
inline void VRControllerSetWLWWRequest::unsafe_arena_set_allocated_vr_controller(
    ::osirixgrpc::VRController* vr_controller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller_);
  }
  vr_controller_ = vr_controller;
  if (vr_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerSetWLWWRequest.vr_controller)
}
inline ::osirixgrpc::VRController* VRControllerSetWLWWRequest::release_vr_controller() {
  
  ::osirixgrpc::VRController* temp = vr_controller_;
  vr_controller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::VRController* VRControllerSetWLWWRequest::unsafe_arena_release_vr_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerSetWLWWRequest.vr_controller)
  
  ::osirixgrpc::VRController* temp = vr_controller_;
  vr_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::VRController* VRControllerSetWLWWRequest::_internal_mutable_vr_controller() {
  
  if (vr_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::VRController>(GetArena());
    vr_controller_ = p;
  }
  return vr_controller_;
}
inline ::osirixgrpc::VRController* VRControllerSetWLWWRequest::mutable_vr_controller() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerSetWLWWRequest.vr_controller)
  return _internal_mutable_vr_controller();
}
inline void VRControllerSetWLWWRequest::set_allocated_vr_controller(::osirixgrpc::VRController* vr_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller_);
  }
  if (vr_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller)->GetArena();
    if (message_arena != submessage_arena) {
      vr_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vr_controller, submessage_arena);
    }
    
  } else {
    
  }
  vr_controller_ = vr_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerSetWLWWRequest.vr_controller)
}

// float wl = 2;
inline void VRControllerSetWLWWRequest::clear_wl() {
  wl_ = 0;
}
inline float VRControllerSetWLWWRequest::_internal_wl() const {
  return wl_;
}
inline float VRControllerSetWLWWRequest::wl() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerSetWLWWRequest.wl)
  return _internal_wl();
}
inline void VRControllerSetWLWWRequest::_internal_set_wl(float value) {
  
  wl_ = value;
}
inline void VRControllerSetWLWWRequest::set_wl(float value) {
  _internal_set_wl(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.VRControllerSetWLWWRequest.wl)
}

// float ww = 3;
inline void VRControllerSetWLWWRequest::clear_ww() {
  ww_ = 0;
}
inline float VRControllerSetWLWWRequest::_internal_ww() const {
  return ww_;
}
inline float VRControllerSetWLWWRequest::ww() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerSetWLWWRequest.ww)
  return _internal_ww();
}
inline void VRControllerSetWLWWRequest::_internal_set_ww(float value) {
  
  ww_ = value;
}
inline void VRControllerSetWLWWRequest::set_ww(float value) {
  _internal_set_ww(value);
  // @@protoc_insertion_point(field_set:osirixgrpc.VRControllerSetWLWWRequest.ww)
}

// -------------------------------------------------------------------

// VRControllerHideROIVolumeRequest

// .osirixgrpc.VRController vr_controller = 1;
inline bool VRControllerHideROIVolumeRequest::_internal_has_vr_controller() const {
  return this != internal_default_instance() && vr_controller_ != nullptr;
}
inline bool VRControllerHideROIVolumeRequest::has_vr_controller() const {
  return _internal_has_vr_controller();
}
inline const ::osirixgrpc::VRController& VRControllerHideROIVolumeRequest::_internal_vr_controller() const {
  const ::osirixgrpc::VRController* p = vr_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::VRController&>(
      ::osirixgrpc::_VRController_default_instance_);
}
inline const ::osirixgrpc::VRController& VRControllerHideROIVolumeRequest::vr_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerHideROIVolumeRequest.vr_controller)
  return _internal_vr_controller();
}
inline void VRControllerHideROIVolumeRequest::unsafe_arena_set_allocated_vr_controller(
    ::osirixgrpc::VRController* vr_controller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller_);
  }
  vr_controller_ = vr_controller;
  if (vr_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerHideROIVolumeRequest.vr_controller)
}
inline ::osirixgrpc::VRController* VRControllerHideROIVolumeRequest::release_vr_controller() {
  
  ::osirixgrpc::VRController* temp = vr_controller_;
  vr_controller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::VRController* VRControllerHideROIVolumeRequest::unsafe_arena_release_vr_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerHideROIVolumeRequest.vr_controller)
  
  ::osirixgrpc::VRController* temp = vr_controller_;
  vr_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::VRController* VRControllerHideROIVolumeRequest::_internal_mutable_vr_controller() {
  
  if (vr_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::VRController>(GetArena());
    vr_controller_ = p;
  }
  return vr_controller_;
}
inline ::osirixgrpc::VRController* VRControllerHideROIVolumeRequest::mutable_vr_controller() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerHideROIVolumeRequest.vr_controller)
  return _internal_mutable_vr_controller();
}
inline void VRControllerHideROIVolumeRequest::set_allocated_vr_controller(::osirixgrpc::VRController* vr_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller_);
  }
  if (vr_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller)->GetArena();
    if (message_arena != submessage_arena) {
      vr_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vr_controller, submessage_arena);
    }
    
  } else {
    
  }
  vr_controller_ = vr_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerHideROIVolumeRequest.vr_controller)
}

// .osirixgrpc.ROIVolume roi_volume = 2;
inline bool VRControllerHideROIVolumeRequest::_internal_has_roi_volume() const {
  return this != internal_default_instance() && roi_volume_ != nullptr;
}
inline bool VRControllerHideROIVolumeRequest::has_roi_volume() const {
  return _internal_has_roi_volume();
}
inline const ::osirixgrpc::ROIVolume& VRControllerHideROIVolumeRequest::_internal_roi_volume() const {
  const ::osirixgrpc::ROIVolume* p = roi_volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ROIVolume&>(
      ::osirixgrpc::_ROIVolume_default_instance_);
}
inline const ::osirixgrpc::ROIVolume& VRControllerHideROIVolumeRequest::roi_volume() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerHideROIVolumeRequest.roi_volume)
  return _internal_roi_volume();
}
inline void VRControllerHideROIVolumeRequest::unsafe_arena_set_allocated_roi_volume(
    ::osirixgrpc::ROIVolume* roi_volume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_volume_);
  }
  roi_volume_ = roi_volume;
  if (roi_volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerHideROIVolumeRequest.roi_volume)
}
inline ::osirixgrpc::ROIVolume* VRControllerHideROIVolumeRequest::release_roi_volume() {
  
  ::osirixgrpc::ROIVolume* temp = roi_volume_;
  roi_volume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::ROIVolume* VRControllerHideROIVolumeRequest::unsafe_arena_release_roi_volume() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerHideROIVolumeRequest.roi_volume)
  
  ::osirixgrpc::ROIVolume* temp = roi_volume_;
  roi_volume_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ROIVolume* VRControllerHideROIVolumeRequest::_internal_mutable_roi_volume() {
  
  if (roi_volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ROIVolume>(GetArena());
    roi_volume_ = p;
  }
  return roi_volume_;
}
inline ::osirixgrpc::ROIVolume* VRControllerHideROIVolumeRequest::mutable_roi_volume() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerHideROIVolumeRequest.roi_volume)
  return _internal_mutable_roi_volume();
}
inline void VRControllerHideROIVolumeRequest::set_allocated_roi_volume(::osirixgrpc::ROIVolume* roi_volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_volume_);
  }
  if (roi_volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_volume)->GetArena();
    if (message_arena != submessage_arena) {
      roi_volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi_volume, submessage_arena);
    }
    
  } else {
    
  }
  roi_volume_ = roi_volume;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerHideROIVolumeRequest.roi_volume)
}

// -------------------------------------------------------------------

// VRControllerDisplayROIVolumeRequest

// .osirixgrpc.VRController vr_controller = 1;
inline bool VRControllerDisplayROIVolumeRequest::_internal_has_vr_controller() const {
  return this != internal_default_instance() && vr_controller_ != nullptr;
}
inline bool VRControllerDisplayROIVolumeRequest::has_vr_controller() const {
  return _internal_has_vr_controller();
}
inline const ::osirixgrpc::VRController& VRControllerDisplayROIVolumeRequest::_internal_vr_controller() const {
  const ::osirixgrpc::VRController* p = vr_controller_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::VRController&>(
      ::osirixgrpc::_VRController_default_instance_);
}
inline const ::osirixgrpc::VRController& VRControllerDisplayROIVolumeRequest::vr_controller() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerDisplayROIVolumeRequest.vr_controller)
  return _internal_vr_controller();
}
inline void VRControllerDisplayROIVolumeRequest::unsafe_arena_set_allocated_vr_controller(
    ::osirixgrpc::VRController* vr_controller) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller_);
  }
  vr_controller_ = vr_controller;
  if (vr_controller) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerDisplayROIVolumeRequest.vr_controller)
}
inline ::osirixgrpc::VRController* VRControllerDisplayROIVolumeRequest::release_vr_controller() {
  
  ::osirixgrpc::VRController* temp = vr_controller_;
  vr_controller_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::VRController* VRControllerDisplayROIVolumeRequest::unsafe_arena_release_vr_controller() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerDisplayROIVolumeRequest.vr_controller)
  
  ::osirixgrpc::VRController* temp = vr_controller_;
  vr_controller_ = nullptr;
  return temp;
}
inline ::osirixgrpc::VRController* VRControllerDisplayROIVolumeRequest::_internal_mutable_vr_controller() {
  
  if (vr_controller_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::VRController>(GetArena());
    vr_controller_ = p;
  }
  return vr_controller_;
}
inline ::osirixgrpc::VRController* VRControllerDisplayROIVolumeRequest::mutable_vr_controller() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerDisplayROIVolumeRequest.vr_controller)
  return _internal_mutable_vr_controller();
}
inline void VRControllerDisplayROIVolumeRequest::set_allocated_vr_controller(::osirixgrpc::VRController* vr_controller) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller_);
  }
  if (vr_controller) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vr_controller)->GetArena();
    if (message_arena != submessage_arena) {
      vr_controller = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vr_controller, submessage_arena);
    }
    
  } else {
    
  }
  vr_controller_ = vr_controller;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerDisplayROIVolumeRequest.vr_controller)
}

// .osirixgrpc.ROIVolume roi_volume = 2;
inline bool VRControllerDisplayROIVolumeRequest::_internal_has_roi_volume() const {
  return this != internal_default_instance() && roi_volume_ != nullptr;
}
inline bool VRControllerDisplayROIVolumeRequest::has_roi_volume() const {
  return _internal_has_roi_volume();
}
inline const ::osirixgrpc::ROIVolume& VRControllerDisplayROIVolumeRequest::_internal_roi_volume() const {
  const ::osirixgrpc::ROIVolume* p = roi_volume_;
  return p != nullptr ? *p : reinterpret_cast<const ::osirixgrpc::ROIVolume&>(
      ::osirixgrpc::_ROIVolume_default_instance_);
}
inline const ::osirixgrpc::ROIVolume& VRControllerDisplayROIVolumeRequest::roi_volume() const {
  // @@protoc_insertion_point(field_get:osirixgrpc.VRControllerDisplayROIVolumeRequest.roi_volume)
  return _internal_roi_volume();
}
inline void VRControllerDisplayROIVolumeRequest::unsafe_arena_set_allocated_roi_volume(
    ::osirixgrpc::ROIVolume* roi_volume) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_volume_);
  }
  roi_volume_ = roi_volume;
  if (roi_volume) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osirixgrpc.VRControllerDisplayROIVolumeRequest.roi_volume)
}
inline ::osirixgrpc::ROIVolume* VRControllerDisplayROIVolumeRequest::release_roi_volume() {
  
  ::osirixgrpc::ROIVolume* temp = roi_volume_;
  roi_volume_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osirixgrpc::ROIVolume* VRControllerDisplayROIVolumeRequest::unsafe_arena_release_roi_volume() {
  // @@protoc_insertion_point(field_release:osirixgrpc.VRControllerDisplayROIVolumeRequest.roi_volume)
  
  ::osirixgrpc::ROIVolume* temp = roi_volume_;
  roi_volume_ = nullptr;
  return temp;
}
inline ::osirixgrpc::ROIVolume* VRControllerDisplayROIVolumeRequest::_internal_mutable_roi_volume() {
  
  if (roi_volume_ == nullptr) {
    auto* p = CreateMaybeMessage<::osirixgrpc::ROIVolume>(GetArena());
    roi_volume_ = p;
  }
  return roi_volume_;
}
inline ::osirixgrpc::ROIVolume* VRControllerDisplayROIVolumeRequest::mutable_roi_volume() {
  // @@protoc_insertion_point(field_mutable:osirixgrpc.VRControllerDisplayROIVolumeRequest.roi_volume)
  return _internal_mutable_roi_volume();
}
inline void VRControllerDisplayROIVolumeRequest::set_allocated_roi_volume(::osirixgrpc::ROIVolume* roi_volume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_volume_);
  }
  if (roi_volume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(roi_volume)->GetArena();
    if (message_arena != submessage_arena) {
      roi_volume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, roi_volume, submessage_arena);
    }
    
  } else {
    
  }
  roi_volume_ = roi_volume;
  // @@protoc_insertion_point(field_set_allocated:osirixgrpc.VRControllerDisplayROIVolumeRequest.roi_volume)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osirixgrpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_vrcontroller_2eproto
