// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vrcontroller.proto

#include "vrcontroller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROIVolume_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_utilities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_utilities_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VRController_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ViewerController_types_2eproto;
namespace osirixgrpc {
class VRControllerViewer2DResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VRControllerViewer2DResponse> _instance;
} _VRControllerViewer2DResponse_default_instance_;
class VRControllerBlendingControllerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VRControllerBlendingControllerResponse> _instance;
} _VRControllerBlendingControllerResponse_default_instance_;
class VRControllerRenderingModeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VRControllerRenderingModeResponse> _instance;
} _VRControllerRenderingModeResponse_default_instance_;
class VRControllerWLWWResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VRControllerWLWWResponse> _instance;
} _VRControllerWLWWResponse_default_instance_;
class VRControllerStyleResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VRControllerStyleResponse> _instance;
} _VRControllerStyleResponse_default_instance_;
class VRControllerTitleResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VRControllerTitleResponse> _instance;
} _VRControllerTitleResponse_default_instance_;
class VRControllerROIVolumesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VRControllerROIVolumesResponse> _instance;
} _VRControllerROIVolumesResponse_default_instance_;
class VRControllerSetRenderingModeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VRControllerSetRenderingModeRequest> _instance;
} _VRControllerSetRenderingModeRequest_default_instance_;
class VRControllerSetWLWWRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VRControllerSetWLWWRequest> _instance;
} _VRControllerSetWLWWRequest_default_instance_;
class VRControllerHideROIVolumeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VRControllerHideROIVolumeRequest> _instance;
} _VRControllerHideROIVolumeRequest_default_instance_;
class VRControllerDisplayROIVolumeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VRControllerDisplayROIVolumeRequest> _instance;
} _VRControllerDisplayROIVolumeRequest_default_instance_;
}  // namespace osirixgrpc
static void InitDefaultsscc_info_VRControllerBlendingControllerResponse_vrcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_VRControllerBlendingControllerResponse_default_instance_;
    new (ptr) ::osirixgrpc::VRControllerBlendingControllerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VRControllerBlendingControllerResponse_vrcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VRControllerBlendingControllerResponse_vrcontroller_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,
      &scc_info_ViewerController_types_2eproto.base,}};

static void InitDefaultsscc_info_VRControllerDisplayROIVolumeRequest_vrcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_VRControllerDisplayROIVolumeRequest_default_instance_;
    new (ptr) ::osirixgrpc::VRControllerDisplayROIVolumeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VRControllerDisplayROIVolumeRequest_vrcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VRControllerDisplayROIVolumeRequest_vrcontroller_2eproto}, {
      &scc_info_VRController_types_2eproto.base,
      &scc_info_ROIVolume_types_2eproto.base,}};

static void InitDefaultsscc_info_VRControllerHideROIVolumeRequest_vrcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_VRControllerHideROIVolumeRequest_default_instance_;
    new (ptr) ::osirixgrpc::VRControllerHideROIVolumeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VRControllerHideROIVolumeRequest_vrcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VRControllerHideROIVolumeRequest_vrcontroller_2eproto}, {
      &scc_info_VRController_types_2eproto.base,
      &scc_info_ROIVolume_types_2eproto.base,}};

static void InitDefaultsscc_info_VRControllerROIVolumesResponse_vrcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_VRControllerROIVolumesResponse_default_instance_;
    new (ptr) ::osirixgrpc::VRControllerROIVolumesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VRControllerROIVolumesResponse_vrcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VRControllerROIVolumesResponse_vrcontroller_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,
      &scc_info_ROIVolume_types_2eproto.base,}};

static void InitDefaultsscc_info_VRControllerRenderingModeResponse_vrcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_VRControllerRenderingModeResponse_default_instance_;
    new (ptr) ::osirixgrpc::VRControllerRenderingModeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VRControllerRenderingModeResponse_vrcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VRControllerRenderingModeResponse_vrcontroller_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static void InitDefaultsscc_info_VRControllerSetRenderingModeRequest_vrcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_VRControllerSetRenderingModeRequest_default_instance_;
    new (ptr) ::osirixgrpc::VRControllerSetRenderingModeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VRControllerSetRenderingModeRequest_vrcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VRControllerSetRenderingModeRequest_vrcontroller_2eproto}, {
      &scc_info_VRController_types_2eproto.base,}};

static void InitDefaultsscc_info_VRControllerSetWLWWRequest_vrcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_VRControllerSetWLWWRequest_default_instance_;
    new (ptr) ::osirixgrpc::VRControllerSetWLWWRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VRControllerSetWLWWRequest_vrcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VRControllerSetWLWWRequest_vrcontroller_2eproto}, {
      &scc_info_VRController_types_2eproto.base,}};

static void InitDefaultsscc_info_VRControllerStyleResponse_vrcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_VRControllerStyleResponse_default_instance_;
    new (ptr) ::osirixgrpc::VRControllerStyleResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VRControllerStyleResponse_vrcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VRControllerStyleResponse_vrcontroller_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static void InitDefaultsscc_info_VRControllerTitleResponse_vrcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_VRControllerTitleResponse_default_instance_;
    new (ptr) ::osirixgrpc::VRControllerTitleResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VRControllerTitleResponse_vrcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VRControllerTitleResponse_vrcontroller_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static void InitDefaultsscc_info_VRControllerViewer2DResponse_vrcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_VRControllerViewer2DResponse_default_instance_;
    new (ptr) ::osirixgrpc::VRControllerViewer2DResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VRControllerViewer2DResponse_vrcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VRControllerViewer2DResponse_vrcontroller_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,
      &scc_info_ViewerController_types_2eproto.base,}};

static void InitDefaultsscc_info_VRControllerWLWWResponse_vrcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_VRControllerWLWWResponse_default_instance_;
    new (ptr) ::osirixgrpc::VRControllerWLWWResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_VRControllerWLWWResponse_vrcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_VRControllerWLWWResponse_vrcontroller_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_vrcontroller_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_vrcontroller_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_vrcontroller_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_vrcontroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerViewer2DResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerViewer2DResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerViewer2DResponse, viewer_controller_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerBlendingControllerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerBlendingControllerResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerBlendingControllerResponse, viewer_controller_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerRenderingModeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerRenderingModeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerRenderingModeResponse, rendering_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerWLWWResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerWLWWResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerWLWWResponse, wl_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerWLWWResponse, ww_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerStyleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerStyleResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerStyleResponse, style_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerTitleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerTitleResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerTitleResponse, title_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerROIVolumesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerROIVolumesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerROIVolumesResponse, roi_volumes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerSetRenderingModeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerSetRenderingModeRequest, vr_controller_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerSetRenderingModeRequest, rendering_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerSetWLWWRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerSetWLWWRequest, vr_controller_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerSetWLWWRequest, wl_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerSetWLWWRequest, ww_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerHideROIVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerHideROIVolumeRequest, vr_controller_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerHideROIVolumeRequest, roi_volume_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerDisplayROIVolumeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerDisplayROIVolumeRequest, vr_controller_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::VRControllerDisplayROIVolumeRequest, roi_volume_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osirixgrpc::VRControllerViewer2DResponse)},
  { 7, -1, sizeof(::osirixgrpc::VRControllerBlendingControllerResponse)},
  { 14, -1, sizeof(::osirixgrpc::VRControllerRenderingModeResponse)},
  { 21, -1, sizeof(::osirixgrpc::VRControllerWLWWResponse)},
  { 29, -1, sizeof(::osirixgrpc::VRControllerStyleResponse)},
  { 36, -1, sizeof(::osirixgrpc::VRControllerTitleResponse)},
  { 43, -1, sizeof(::osirixgrpc::VRControllerROIVolumesResponse)},
  { 50, -1, sizeof(::osirixgrpc::VRControllerSetRenderingModeRequest)},
  { 57, -1, sizeof(::osirixgrpc::VRControllerSetWLWWRequest)},
  { 65, -1, sizeof(::osirixgrpc::VRControllerHideROIVolumeRequest)},
  { 72, -1, sizeof(::osirixgrpc::VRControllerDisplayROIVolumeRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_VRControllerViewer2DResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_VRControllerBlendingControllerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_VRControllerRenderingModeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_VRControllerWLWWResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_VRControllerStyleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_VRControllerTitleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_VRControllerROIVolumesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_VRControllerSetRenderingModeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_VRControllerSetWLWWRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_VRControllerHideROIVolumeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_VRControllerDisplayROIVolumeRequest_default_instance_),
};

const char descriptor_table_protodef_vrcontroller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022vrcontroller.proto\022\nosirixgrpc\032\017utilit"
  "ies.proto\032\013types.proto\"{\n\034VRControllerVi"
  "ewer2DResponse\022\"\n\006status\030\001 \001(\0132\022.osirixg"
  "rpc.Status\0227\n\021viewer_controller\030\002 \001(\0132\034."
  "osirixgrpc.ViewerController\"\205\001\n&VRContro"
  "llerBlendingControllerResponse\022\"\n\006status"
  "\030\001 \001(\0132\022.osirixgrpc.Status\0227\n\021viewer_con"
  "troller\030\002 \001(\0132\034.osirixgrpc.ViewerControl"
  "ler\"_\n!VRControllerRenderingModeResponse"
  "\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Status\022\026\n\016"
  "rendering_mode\030\002 \001(\t\"V\n\030VRControllerWLWW"
  "Response\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc.St"
  "atus\022\n\n\002wl\030\002 \001(\002\022\n\n\002ww\030\003 \001(\002\"N\n\031VRContro"
  "llerStyleResponse\022\"\n\006status\030\001 \001(\0132\022.osir"
  "ixgrpc.Status\022\r\n\005style\030\002 \001(\t\"N\n\031VRContro"
  "llerTitleResponse\022\"\n\006status\030\001 \001(\0132\022.osir"
  "ixgrpc.Status\022\r\n\005title\030\002 \001(\t\"p\n\036VRContro"
  "llerROIVolumesResponse\022\"\n\006status\030\001 \001(\0132\022"
  ".osirixgrpc.Status\022*\n\013roi_volumes\030\002 \003(\0132"
  "\025.osirixgrpc.ROIVolume\"n\n#VRControllerSe"
  "tRenderingModeRequest\022/\n\rvr_controller\030\001"
  " \001(\0132\030.osirixgrpc.VRController\022\026\n\016render"
  "ing_mode\030\002 \001(\t\"e\n\032VRControllerSetWLWWReq"
  "uest\022/\n\rvr_controller\030\001 \001(\0132\030.osirixgrpc"
  ".VRController\022\n\n\002wl\030\002 \001(\002\022\n\n\002ww\030\003 \001(\002\"~\n"
  " VRControllerHideROIVolumeRequest\022/\n\rvr_"
  "controller\030\001 \001(\0132\030.osirixgrpc.VRControll"
  "er\022)\n\nroi_volume\030\002 \001(\0132\025.osirixgrpc.ROIV"
  "olume\"\201\001\n#VRControllerDisplayROIVolumeRe"
  "quest\022/\n\rvr_controller\030\001 \001(\0132\030.osirixgrp"
  "c.VRController\022)\n\nroi_volume\030\002 \001(\0132\025.osi"
  "rixgrpc.ROIVolumeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_vrcontroller_2eproto_deps[2] = {
  &::descriptor_table_types_2eproto,
  &::descriptor_table_utilities_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_vrcontroller_2eproto_sccs[11] = {
  &scc_info_VRControllerBlendingControllerResponse_vrcontroller_2eproto.base,
  &scc_info_VRControllerDisplayROIVolumeRequest_vrcontroller_2eproto.base,
  &scc_info_VRControllerHideROIVolumeRequest_vrcontroller_2eproto.base,
  &scc_info_VRControllerROIVolumesResponse_vrcontroller_2eproto.base,
  &scc_info_VRControllerRenderingModeResponse_vrcontroller_2eproto.base,
  &scc_info_VRControllerSetRenderingModeRequest_vrcontroller_2eproto.base,
  &scc_info_VRControllerSetWLWWRequest_vrcontroller_2eproto.base,
  &scc_info_VRControllerStyleResponse_vrcontroller_2eproto.base,
  &scc_info_VRControllerTitleResponse_vrcontroller_2eproto.base,
  &scc_info_VRControllerViewer2DResponse_vrcontroller_2eproto.base,
  &scc_info_VRControllerWLWWResponse_vrcontroller_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_vrcontroller_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_vrcontroller_2eproto = {
  false, false, descriptor_table_protodef_vrcontroller_2eproto, "vrcontroller.proto", 1265,
  &descriptor_table_vrcontroller_2eproto_once, descriptor_table_vrcontroller_2eproto_sccs, descriptor_table_vrcontroller_2eproto_deps, 11, 2,
  schemas, file_default_instances, TableStruct_vrcontroller_2eproto::offsets,
  file_level_metadata_vrcontroller_2eproto, 11, file_level_enum_descriptors_vrcontroller_2eproto, file_level_service_descriptors_vrcontroller_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_vrcontroller_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_vrcontroller_2eproto)), true);
namespace osirixgrpc {

// ===================================================================

class VRControllerViewer2DResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const VRControllerViewer2DResponse* msg);
  static const ::osirixgrpc::ViewerController& viewer_controller(const VRControllerViewer2DResponse* msg);
};

const ::osirixgrpc::Status&
VRControllerViewer2DResponse::_Internal::status(const VRControllerViewer2DResponse* msg) {
  return *msg->status_;
}
const ::osirixgrpc::ViewerController&
VRControllerViewer2DResponse::_Internal::viewer_controller(const VRControllerViewer2DResponse* msg) {
  return *msg->viewer_controller_;
}
void VRControllerViewer2DResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void VRControllerViewer2DResponse::clear_viewer_controller() {
  if (GetArena() == nullptr && viewer_controller_ != nullptr) {
    delete viewer_controller_;
  }
  viewer_controller_ = nullptr;
}
VRControllerViewer2DResponse::VRControllerViewer2DResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.VRControllerViewer2DResponse)
}
VRControllerViewer2DResponse::VRControllerViewer2DResponse(const VRControllerViewer2DResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_viewer_controller()) {
    viewer_controller_ = new ::osirixgrpc::ViewerController(*from.viewer_controller_);
  } else {
    viewer_controller_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.VRControllerViewer2DResponse)
}

void VRControllerViewer2DResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VRControllerViewer2DResponse_vrcontroller_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&viewer_controller_) -
      reinterpret_cast<char*>(&status_)) + sizeof(viewer_controller_));
}

VRControllerViewer2DResponse::~VRControllerViewer2DResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.VRControllerViewer2DResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VRControllerViewer2DResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete viewer_controller_;
}

void VRControllerViewer2DResponse::ArenaDtor(void* object) {
  VRControllerViewer2DResponse* _this = reinterpret_cast< VRControllerViewer2DResponse* >(object);
  (void)_this;
}
void VRControllerViewer2DResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VRControllerViewer2DResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VRControllerViewer2DResponse& VRControllerViewer2DResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VRControllerViewer2DResponse_vrcontroller_2eproto.base);
  return *internal_default_instance();
}


void VRControllerViewer2DResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.VRControllerViewer2DResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && viewer_controller_ != nullptr) {
    delete viewer_controller_;
  }
  viewer_controller_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VRControllerViewer2DResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osirixgrpc.ViewerController viewer_controller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewer_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VRControllerViewer2DResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.VRControllerViewer2DResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .osirixgrpc.ViewerController viewer_controller = 2;
  if (this->has_viewer_controller()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::viewer_controller(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.VRControllerViewer2DResponse)
  return target;
}

size_t VRControllerViewer2DResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.VRControllerViewer2DResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .osirixgrpc.ViewerController viewer_controller = 2;
  if (this->has_viewer_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *viewer_controller_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VRControllerViewer2DResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.VRControllerViewer2DResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VRControllerViewer2DResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VRControllerViewer2DResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.VRControllerViewer2DResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.VRControllerViewer2DResponse)
    MergeFrom(*source);
  }
}

void VRControllerViewer2DResponse::MergeFrom(const VRControllerViewer2DResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.VRControllerViewer2DResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (from.has_viewer_controller()) {
    _internal_mutable_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(from._internal_viewer_controller());
  }
}

void VRControllerViewer2DResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.VRControllerViewer2DResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VRControllerViewer2DResponse::CopyFrom(const VRControllerViewer2DResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.VRControllerViewer2DResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRControllerViewer2DResponse::IsInitialized() const {
  return true;
}

void VRControllerViewer2DResponse::InternalSwap(VRControllerViewer2DResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VRControllerViewer2DResponse, viewer_controller_)
      + sizeof(VRControllerViewer2DResponse::viewer_controller_)
      - PROTOBUF_FIELD_OFFSET(VRControllerViewer2DResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VRControllerViewer2DResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VRControllerBlendingControllerResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const VRControllerBlendingControllerResponse* msg);
  static const ::osirixgrpc::ViewerController& viewer_controller(const VRControllerBlendingControllerResponse* msg);
};

const ::osirixgrpc::Status&
VRControllerBlendingControllerResponse::_Internal::status(const VRControllerBlendingControllerResponse* msg) {
  return *msg->status_;
}
const ::osirixgrpc::ViewerController&
VRControllerBlendingControllerResponse::_Internal::viewer_controller(const VRControllerBlendingControllerResponse* msg) {
  return *msg->viewer_controller_;
}
void VRControllerBlendingControllerResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void VRControllerBlendingControllerResponse::clear_viewer_controller() {
  if (GetArena() == nullptr && viewer_controller_ != nullptr) {
    delete viewer_controller_;
  }
  viewer_controller_ = nullptr;
}
VRControllerBlendingControllerResponse::VRControllerBlendingControllerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.VRControllerBlendingControllerResponse)
}
VRControllerBlendingControllerResponse::VRControllerBlendingControllerResponse(const VRControllerBlendingControllerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_viewer_controller()) {
    viewer_controller_ = new ::osirixgrpc::ViewerController(*from.viewer_controller_);
  } else {
    viewer_controller_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.VRControllerBlendingControllerResponse)
}

void VRControllerBlendingControllerResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VRControllerBlendingControllerResponse_vrcontroller_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&viewer_controller_) -
      reinterpret_cast<char*>(&status_)) + sizeof(viewer_controller_));
}

VRControllerBlendingControllerResponse::~VRControllerBlendingControllerResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.VRControllerBlendingControllerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VRControllerBlendingControllerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete viewer_controller_;
}

void VRControllerBlendingControllerResponse::ArenaDtor(void* object) {
  VRControllerBlendingControllerResponse* _this = reinterpret_cast< VRControllerBlendingControllerResponse* >(object);
  (void)_this;
}
void VRControllerBlendingControllerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VRControllerBlendingControllerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VRControllerBlendingControllerResponse& VRControllerBlendingControllerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VRControllerBlendingControllerResponse_vrcontroller_2eproto.base);
  return *internal_default_instance();
}


void VRControllerBlendingControllerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.VRControllerBlendingControllerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && viewer_controller_ != nullptr) {
    delete viewer_controller_;
  }
  viewer_controller_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VRControllerBlendingControllerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osirixgrpc.ViewerController viewer_controller = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_viewer_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VRControllerBlendingControllerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.VRControllerBlendingControllerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .osirixgrpc.ViewerController viewer_controller = 2;
  if (this->has_viewer_controller()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::viewer_controller(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.VRControllerBlendingControllerResponse)
  return target;
}

size_t VRControllerBlendingControllerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.VRControllerBlendingControllerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .osirixgrpc.ViewerController viewer_controller = 2;
  if (this->has_viewer_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *viewer_controller_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VRControllerBlendingControllerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.VRControllerBlendingControllerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VRControllerBlendingControllerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VRControllerBlendingControllerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.VRControllerBlendingControllerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.VRControllerBlendingControllerResponse)
    MergeFrom(*source);
  }
}

void VRControllerBlendingControllerResponse::MergeFrom(const VRControllerBlendingControllerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.VRControllerBlendingControllerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (from.has_viewer_controller()) {
    _internal_mutable_viewer_controller()->::osirixgrpc::ViewerController::MergeFrom(from._internal_viewer_controller());
  }
}

void VRControllerBlendingControllerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.VRControllerBlendingControllerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VRControllerBlendingControllerResponse::CopyFrom(const VRControllerBlendingControllerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.VRControllerBlendingControllerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRControllerBlendingControllerResponse::IsInitialized() const {
  return true;
}

void VRControllerBlendingControllerResponse::InternalSwap(VRControllerBlendingControllerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VRControllerBlendingControllerResponse, viewer_controller_)
      + sizeof(VRControllerBlendingControllerResponse::viewer_controller_)
      - PROTOBUF_FIELD_OFFSET(VRControllerBlendingControllerResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VRControllerBlendingControllerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VRControllerRenderingModeResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const VRControllerRenderingModeResponse* msg);
};

const ::osirixgrpc::Status&
VRControllerRenderingModeResponse::_Internal::status(const VRControllerRenderingModeResponse* msg) {
  return *msg->status_;
}
void VRControllerRenderingModeResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
VRControllerRenderingModeResponse::VRControllerRenderingModeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.VRControllerRenderingModeResponse)
}
VRControllerRenderingModeResponse::VRControllerRenderingModeResponse(const VRControllerRenderingModeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rendering_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rendering_mode().empty()) {
    rendering_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rendering_mode(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.VRControllerRenderingModeResponse)
}

void VRControllerRenderingModeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VRControllerRenderingModeResponse_vrcontroller_2eproto.base);
  rendering_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

VRControllerRenderingModeResponse::~VRControllerRenderingModeResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.VRControllerRenderingModeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VRControllerRenderingModeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rendering_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void VRControllerRenderingModeResponse::ArenaDtor(void* object) {
  VRControllerRenderingModeResponse* _this = reinterpret_cast< VRControllerRenderingModeResponse* >(object);
  (void)_this;
}
void VRControllerRenderingModeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VRControllerRenderingModeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VRControllerRenderingModeResponse& VRControllerRenderingModeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VRControllerRenderingModeResponse_vrcontroller_2eproto.base);
  return *internal_default_instance();
}


void VRControllerRenderingModeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.VRControllerRenderingModeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rendering_mode_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VRControllerRenderingModeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rendering_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rendering_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osirixgrpc.VRControllerRenderingModeResponse.rendering_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VRControllerRenderingModeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.VRControllerRenderingModeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string rendering_mode = 2;
  if (this->rendering_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rendering_mode().data(), static_cast<int>(this->_internal_rendering_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osirixgrpc.VRControllerRenderingModeResponse.rendering_mode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rendering_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.VRControllerRenderingModeResponse)
  return target;
}

size_t VRControllerRenderingModeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.VRControllerRenderingModeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rendering_mode = 2;
  if (this->rendering_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rendering_mode());
  }

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VRControllerRenderingModeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.VRControllerRenderingModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VRControllerRenderingModeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VRControllerRenderingModeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.VRControllerRenderingModeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.VRControllerRenderingModeResponse)
    MergeFrom(*source);
  }
}

void VRControllerRenderingModeResponse::MergeFrom(const VRControllerRenderingModeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.VRControllerRenderingModeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rendering_mode().size() > 0) {
    _internal_set_rendering_mode(from._internal_rendering_mode());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
}

void VRControllerRenderingModeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.VRControllerRenderingModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VRControllerRenderingModeResponse::CopyFrom(const VRControllerRenderingModeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.VRControllerRenderingModeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRControllerRenderingModeResponse::IsInitialized() const {
  return true;
}

void VRControllerRenderingModeResponse::InternalSwap(VRControllerRenderingModeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rendering_mode_.Swap(&other->rendering_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VRControllerRenderingModeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VRControllerWLWWResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const VRControllerWLWWResponse* msg);
};

const ::osirixgrpc::Status&
VRControllerWLWWResponse::_Internal::status(const VRControllerWLWWResponse* msg) {
  return *msg->status_;
}
void VRControllerWLWWResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
VRControllerWLWWResponse::VRControllerWLWWResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.VRControllerWLWWResponse)
}
VRControllerWLWWResponse::VRControllerWLWWResponse(const VRControllerWLWWResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&wl_, &from.wl_,
    static_cast<size_t>(reinterpret_cast<char*>(&ww_) -
    reinterpret_cast<char*>(&wl_)) + sizeof(ww_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.VRControllerWLWWResponse)
}

void VRControllerWLWWResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VRControllerWLWWResponse_vrcontroller_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ww_) -
      reinterpret_cast<char*>(&status_)) + sizeof(ww_));
}

VRControllerWLWWResponse::~VRControllerWLWWResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.VRControllerWLWWResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VRControllerWLWWResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void VRControllerWLWWResponse::ArenaDtor(void* object) {
  VRControllerWLWWResponse* _this = reinterpret_cast< VRControllerWLWWResponse* >(object);
  (void)_this;
}
void VRControllerWLWWResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VRControllerWLWWResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VRControllerWLWWResponse& VRControllerWLWWResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VRControllerWLWWResponse_vrcontroller_2eproto.base);
  return *internal_default_instance();
}


void VRControllerWLWWResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.VRControllerWLWWResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&wl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ww_) -
      reinterpret_cast<char*>(&wl_)) + sizeof(ww_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VRControllerWLWWResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float wl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          wl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ww = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ww_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VRControllerWLWWResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.VRControllerWLWWResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // float wl = 2;
  if (!(this->wl() <= 0 && this->wl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_wl(), target);
  }

  // float ww = 3;
  if (!(this->ww() <= 0 && this->ww() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_ww(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.VRControllerWLWWResponse)
  return target;
}

size_t VRControllerWLWWResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.VRControllerWLWWResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // float wl = 2;
  if (!(this->wl() <= 0 && this->wl() >= 0)) {
    total_size += 1 + 4;
  }

  // float ww = 3;
  if (!(this->ww() <= 0 && this->ww() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VRControllerWLWWResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.VRControllerWLWWResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VRControllerWLWWResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VRControllerWLWWResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.VRControllerWLWWResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.VRControllerWLWWResponse)
    MergeFrom(*source);
  }
}

void VRControllerWLWWResponse::MergeFrom(const VRControllerWLWWResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.VRControllerWLWWResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (!(from.wl() <= 0 && from.wl() >= 0)) {
    _internal_set_wl(from._internal_wl());
  }
  if (!(from.ww() <= 0 && from.ww() >= 0)) {
    _internal_set_ww(from._internal_ww());
  }
}

void VRControllerWLWWResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.VRControllerWLWWResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VRControllerWLWWResponse::CopyFrom(const VRControllerWLWWResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.VRControllerWLWWResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRControllerWLWWResponse::IsInitialized() const {
  return true;
}

void VRControllerWLWWResponse::InternalSwap(VRControllerWLWWResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VRControllerWLWWResponse, ww_)
      + sizeof(VRControllerWLWWResponse::ww_)
      - PROTOBUF_FIELD_OFFSET(VRControllerWLWWResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VRControllerWLWWResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VRControllerStyleResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const VRControllerStyleResponse* msg);
};

const ::osirixgrpc::Status&
VRControllerStyleResponse::_Internal::status(const VRControllerStyleResponse* msg) {
  return *msg->status_;
}
void VRControllerStyleResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
VRControllerStyleResponse::VRControllerStyleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.VRControllerStyleResponse)
}
VRControllerStyleResponse::VRControllerStyleResponse(const VRControllerStyleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_style().empty()) {
    style_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_style(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.VRControllerStyleResponse)
}

void VRControllerStyleResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VRControllerStyleResponse_vrcontroller_2eproto.base);
  style_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

VRControllerStyleResponse::~VRControllerStyleResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.VRControllerStyleResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VRControllerStyleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  style_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void VRControllerStyleResponse::ArenaDtor(void* object) {
  VRControllerStyleResponse* _this = reinterpret_cast< VRControllerStyleResponse* >(object);
  (void)_this;
}
void VRControllerStyleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VRControllerStyleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VRControllerStyleResponse& VRControllerStyleResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VRControllerStyleResponse_vrcontroller_2eproto.base);
  return *internal_default_instance();
}


void VRControllerStyleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.VRControllerStyleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  style_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VRControllerStyleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string style = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_style();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osirixgrpc.VRControllerStyleResponse.style"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VRControllerStyleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.VRControllerStyleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string style = 2;
  if (this->style().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_style().data(), static_cast<int>(this->_internal_style().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osirixgrpc.VRControllerStyleResponse.style");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.VRControllerStyleResponse)
  return target;
}

size_t VRControllerStyleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.VRControllerStyleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string style = 2;
  if (this->style().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_style());
  }

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VRControllerStyleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.VRControllerStyleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VRControllerStyleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VRControllerStyleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.VRControllerStyleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.VRControllerStyleResponse)
    MergeFrom(*source);
  }
}

void VRControllerStyleResponse::MergeFrom(const VRControllerStyleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.VRControllerStyleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.style().size() > 0) {
    _internal_set_style(from._internal_style());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
}

void VRControllerStyleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.VRControllerStyleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VRControllerStyleResponse::CopyFrom(const VRControllerStyleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.VRControllerStyleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRControllerStyleResponse::IsInitialized() const {
  return true;
}

void VRControllerStyleResponse::InternalSwap(VRControllerStyleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  style_.Swap(&other->style_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VRControllerStyleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VRControllerTitleResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const VRControllerTitleResponse* msg);
};

const ::osirixgrpc::Status&
VRControllerTitleResponse::_Internal::status(const VRControllerTitleResponse* msg) {
  return *msg->status_;
}
void VRControllerTitleResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
VRControllerTitleResponse::VRControllerTitleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.VRControllerTitleResponse)
}
VRControllerTitleResponse::VRControllerTitleResponse(const VRControllerTitleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.VRControllerTitleResponse)
}

void VRControllerTitleResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VRControllerTitleResponse_vrcontroller_2eproto.base);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

VRControllerTitleResponse::~VRControllerTitleResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.VRControllerTitleResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VRControllerTitleResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void VRControllerTitleResponse::ArenaDtor(void* object) {
  VRControllerTitleResponse* _this = reinterpret_cast< VRControllerTitleResponse* >(object);
  (void)_this;
}
void VRControllerTitleResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VRControllerTitleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VRControllerTitleResponse& VRControllerTitleResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VRControllerTitleResponse_vrcontroller_2eproto.base);
  return *internal_default_instance();
}


void VRControllerTitleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.VRControllerTitleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VRControllerTitleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osirixgrpc.VRControllerTitleResponse.title"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VRControllerTitleResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.VRControllerTitleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osirixgrpc.VRControllerTitleResponse.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.VRControllerTitleResponse)
  return target;
}

size_t VRControllerTitleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.VRControllerTitleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VRControllerTitleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.VRControllerTitleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VRControllerTitleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VRControllerTitleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.VRControllerTitleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.VRControllerTitleResponse)
    MergeFrom(*source);
  }
}

void VRControllerTitleResponse::MergeFrom(const VRControllerTitleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.VRControllerTitleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.title().size() > 0) {
    _internal_set_title(from._internal_title());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
}

void VRControllerTitleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.VRControllerTitleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VRControllerTitleResponse::CopyFrom(const VRControllerTitleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.VRControllerTitleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRControllerTitleResponse::IsInitialized() const {
  return true;
}

void VRControllerTitleResponse::InternalSwap(VRControllerTitleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  title_.Swap(&other->title_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VRControllerTitleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VRControllerROIVolumesResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const VRControllerROIVolumesResponse* msg);
};

const ::osirixgrpc::Status&
VRControllerROIVolumesResponse::_Internal::status(const VRControllerROIVolumesResponse* msg) {
  return *msg->status_;
}
void VRControllerROIVolumesResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void VRControllerROIVolumesResponse::clear_roi_volumes() {
  roi_volumes_.Clear();
}
VRControllerROIVolumesResponse::VRControllerROIVolumesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  roi_volumes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.VRControllerROIVolumesResponse)
}
VRControllerROIVolumesResponse::VRControllerROIVolumesResponse(const VRControllerROIVolumesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      roi_volumes_(from.roi_volumes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.VRControllerROIVolumesResponse)
}

void VRControllerROIVolumesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VRControllerROIVolumesResponse_vrcontroller_2eproto.base);
  status_ = nullptr;
}

VRControllerROIVolumesResponse::~VRControllerROIVolumesResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.VRControllerROIVolumesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VRControllerROIVolumesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void VRControllerROIVolumesResponse::ArenaDtor(void* object) {
  VRControllerROIVolumesResponse* _this = reinterpret_cast< VRControllerROIVolumesResponse* >(object);
  (void)_this;
}
void VRControllerROIVolumesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VRControllerROIVolumesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VRControllerROIVolumesResponse& VRControllerROIVolumesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VRControllerROIVolumesResponse_vrcontroller_2eproto.base);
  return *internal_default_instance();
}


void VRControllerROIVolumesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.VRControllerROIVolumesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roi_volumes_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VRControllerROIVolumesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .osirixgrpc.ROIVolume roi_volumes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_roi_volumes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VRControllerROIVolumesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.VRControllerROIVolumesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated .osirixgrpc.ROIVolume roi_volumes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_roi_volumes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_roi_volumes(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.VRControllerROIVolumesResponse)
  return target;
}

size_t VRControllerROIVolumesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.VRControllerROIVolumesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .osirixgrpc.ROIVolume roi_volumes = 2;
  total_size += 1UL * this->_internal_roi_volumes_size();
  for (const auto& msg : this->roi_volumes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VRControllerROIVolumesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.VRControllerROIVolumesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const VRControllerROIVolumesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VRControllerROIVolumesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.VRControllerROIVolumesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.VRControllerROIVolumesResponse)
    MergeFrom(*source);
  }
}

void VRControllerROIVolumesResponse::MergeFrom(const VRControllerROIVolumesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.VRControllerROIVolumesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roi_volumes_.MergeFrom(from.roi_volumes_);
  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
}

void VRControllerROIVolumesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.VRControllerROIVolumesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VRControllerROIVolumesResponse::CopyFrom(const VRControllerROIVolumesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.VRControllerROIVolumesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRControllerROIVolumesResponse::IsInitialized() const {
  return true;
}

void VRControllerROIVolumesResponse::InternalSwap(VRControllerROIVolumesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  roi_volumes_.InternalSwap(&other->roi_volumes_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VRControllerROIVolumesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VRControllerSetRenderingModeRequest::_Internal {
 public:
  static const ::osirixgrpc::VRController& vr_controller(const VRControllerSetRenderingModeRequest* msg);
};

const ::osirixgrpc::VRController&
VRControllerSetRenderingModeRequest::_Internal::vr_controller(const VRControllerSetRenderingModeRequest* msg) {
  return *msg->vr_controller_;
}
void VRControllerSetRenderingModeRequest::clear_vr_controller() {
  if (GetArena() == nullptr && vr_controller_ != nullptr) {
    delete vr_controller_;
  }
  vr_controller_ = nullptr;
}
VRControllerSetRenderingModeRequest::VRControllerSetRenderingModeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.VRControllerSetRenderingModeRequest)
}
VRControllerSetRenderingModeRequest::VRControllerSetRenderingModeRequest(const VRControllerSetRenderingModeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rendering_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rendering_mode().empty()) {
    rendering_mode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rendering_mode(), 
      GetArena());
  }
  if (from._internal_has_vr_controller()) {
    vr_controller_ = new ::osirixgrpc::VRController(*from.vr_controller_);
  } else {
    vr_controller_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.VRControllerSetRenderingModeRequest)
}

void VRControllerSetRenderingModeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VRControllerSetRenderingModeRequest_vrcontroller_2eproto.base);
  rendering_mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vr_controller_ = nullptr;
}

VRControllerSetRenderingModeRequest::~VRControllerSetRenderingModeRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.VRControllerSetRenderingModeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VRControllerSetRenderingModeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  rendering_mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vr_controller_;
}

void VRControllerSetRenderingModeRequest::ArenaDtor(void* object) {
  VRControllerSetRenderingModeRequest* _this = reinterpret_cast< VRControllerSetRenderingModeRequest* >(object);
  (void)_this;
}
void VRControllerSetRenderingModeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VRControllerSetRenderingModeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VRControllerSetRenderingModeRequest& VRControllerSetRenderingModeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VRControllerSetRenderingModeRequest_vrcontroller_2eproto.base);
  return *internal_default_instance();
}


void VRControllerSetRenderingModeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.VRControllerSetRenderingModeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rendering_mode_.ClearToEmpty();
  if (GetArena() == nullptr && vr_controller_ != nullptr) {
    delete vr_controller_;
  }
  vr_controller_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VRControllerSetRenderingModeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.VRController vr_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vr_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rendering_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rendering_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osirixgrpc.VRControllerSetRenderingModeRequest.rendering_mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VRControllerSetRenderingModeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.VRControllerSetRenderingModeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.VRController vr_controller = 1;
  if (this->has_vr_controller()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vr_controller(this), target, stream);
  }

  // string rendering_mode = 2;
  if (this->rendering_mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rendering_mode().data(), static_cast<int>(this->_internal_rendering_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osirixgrpc.VRControllerSetRenderingModeRequest.rendering_mode");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rendering_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.VRControllerSetRenderingModeRequest)
  return target;
}

size_t VRControllerSetRenderingModeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.VRControllerSetRenderingModeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string rendering_mode = 2;
  if (this->rendering_mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rendering_mode());
  }

  // .osirixgrpc.VRController vr_controller = 1;
  if (this->has_vr_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vr_controller_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VRControllerSetRenderingModeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.VRControllerSetRenderingModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VRControllerSetRenderingModeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VRControllerSetRenderingModeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.VRControllerSetRenderingModeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.VRControllerSetRenderingModeRequest)
    MergeFrom(*source);
  }
}

void VRControllerSetRenderingModeRequest::MergeFrom(const VRControllerSetRenderingModeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.VRControllerSetRenderingModeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rendering_mode().size() > 0) {
    _internal_set_rendering_mode(from._internal_rendering_mode());
  }
  if (from.has_vr_controller()) {
    _internal_mutable_vr_controller()->::osirixgrpc::VRController::MergeFrom(from._internal_vr_controller());
  }
}

void VRControllerSetRenderingModeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.VRControllerSetRenderingModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VRControllerSetRenderingModeRequest::CopyFrom(const VRControllerSetRenderingModeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.VRControllerSetRenderingModeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRControllerSetRenderingModeRequest::IsInitialized() const {
  return true;
}

void VRControllerSetRenderingModeRequest::InternalSwap(VRControllerSetRenderingModeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  rendering_mode_.Swap(&other->rendering_mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(vr_controller_, other->vr_controller_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VRControllerSetRenderingModeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VRControllerSetWLWWRequest::_Internal {
 public:
  static const ::osirixgrpc::VRController& vr_controller(const VRControllerSetWLWWRequest* msg);
};

const ::osirixgrpc::VRController&
VRControllerSetWLWWRequest::_Internal::vr_controller(const VRControllerSetWLWWRequest* msg) {
  return *msg->vr_controller_;
}
void VRControllerSetWLWWRequest::clear_vr_controller() {
  if (GetArena() == nullptr && vr_controller_ != nullptr) {
    delete vr_controller_;
  }
  vr_controller_ = nullptr;
}
VRControllerSetWLWWRequest::VRControllerSetWLWWRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.VRControllerSetWLWWRequest)
}
VRControllerSetWLWWRequest::VRControllerSetWLWWRequest(const VRControllerSetWLWWRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vr_controller()) {
    vr_controller_ = new ::osirixgrpc::VRController(*from.vr_controller_);
  } else {
    vr_controller_ = nullptr;
  }
  ::memcpy(&wl_, &from.wl_,
    static_cast<size_t>(reinterpret_cast<char*>(&ww_) -
    reinterpret_cast<char*>(&wl_)) + sizeof(ww_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.VRControllerSetWLWWRequest)
}

void VRControllerSetWLWWRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VRControllerSetWLWWRequest_vrcontroller_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vr_controller_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&ww_) -
      reinterpret_cast<char*>(&vr_controller_)) + sizeof(ww_));
}

VRControllerSetWLWWRequest::~VRControllerSetWLWWRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.VRControllerSetWLWWRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VRControllerSetWLWWRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vr_controller_;
}

void VRControllerSetWLWWRequest::ArenaDtor(void* object) {
  VRControllerSetWLWWRequest* _this = reinterpret_cast< VRControllerSetWLWWRequest* >(object);
  (void)_this;
}
void VRControllerSetWLWWRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VRControllerSetWLWWRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VRControllerSetWLWWRequest& VRControllerSetWLWWRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VRControllerSetWLWWRequest_vrcontroller_2eproto.base);
  return *internal_default_instance();
}


void VRControllerSetWLWWRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.VRControllerSetWLWWRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vr_controller_ != nullptr) {
    delete vr_controller_;
  }
  vr_controller_ = nullptr;
  ::memset(&wl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ww_) -
      reinterpret_cast<char*>(&wl_)) + sizeof(ww_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VRControllerSetWLWWRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.VRController vr_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vr_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float wl = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          wl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float ww = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          ww_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VRControllerSetWLWWRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.VRControllerSetWLWWRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.VRController vr_controller = 1;
  if (this->has_vr_controller()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vr_controller(this), target, stream);
  }

  // float wl = 2;
  if (!(this->wl() <= 0 && this->wl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_wl(), target);
  }

  // float ww = 3;
  if (!(this->ww() <= 0 && this->ww() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_ww(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.VRControllerSetWLWWRequest)
  return target;
}

size_t VRControllerSetWLWWRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.VRControllerSetWLWWRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.VRController vr_controller = 1;
  if (this->has_vr_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vr_controller_);
  }

  // float wl = 2;
  if (!(this->wl() <= 0 && this->wl() >= 0)) {
    total_size += 1 + 4;
  }

  // float ww = 3;
  if (!(this->ww() <= 0 && this->ww() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VRControllerSetWLWWRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.VRControllerSetWLWWRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VRControllerSetWLWWRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VRControllerSetWLWWRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.VRControllerSetWLWWRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.VRControllerSetWLWWRequest)
    MergeFrom(*source);
  }
}

void VRControllerSetWLWWRequest::MergeFrom(const VRControllerSetWLWWRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.VRControllerSetWLWWRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vr_controller()) {
    _internal_mutable_vr_controller()->::osirixgrpc::VRController::MergeFrom(from._internal_vr_controller());
  }
  if (!(from.wl() <= 0 && from.wl() >= 0)) {
    _internal_set_wl(from._internal_wl());
  }
  if (!(from.ww() <= 0 && from.ww() >= 0)) {
    _internal_set_ww(from._internal_ww());
  }
}

void VRControllerSetWLWWRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.VRControllerSetWLWWRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VRControllerSetWLWWRequest::CopyFrom(const VRControllerSetWLWWRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.VRControllerSetWLWWRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRControllerSetWLWWRequest::IsInitialized() const {
  return true;
}

void VRControllerSetWLWWRequest::InternalSwap(VRControllerSetWLWWRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VRControllerSetWLWWRequest, ww_)
      + sizeof(VRControllerSetWLWWRequest::ww_)
      - PROTOBUF_FIELD_OFFSET(VRControllerSetWLWWRequest, vr_controller_)>(
          reinterpret_cast<char*>(&vr_controller_),
          reinterpret_cast<char*>(&other->vr_controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VRControllerSetWLWWRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VRControllerHideROIVolumeRequest::_Internal {
 public:
  static const ::osirixgrpc::VRController& vr_controller(const VRControllerHideROIVolumeRequest* msg);
  static const ::osirixgrpc::ROIVolume& roi_volume(const VRControllerHideROIVolumeRequest* msg);
};

const ::osirixgrpc::VRController&
VRControllerHideROIVolumeRequest::_Internal::vr_controller(const VRControllerHideROIVolumeRequest* msg) {
  return *msg->vr_controller_;
}
const ::osirixgrpc::ROIVolume&
VRControllerHideROIVolumeRequest::_Internal::roi_volume(const VRControllerHideROIVolumeRequest* msg) {
  return *msg->roi_volume_;
}
void VRControllerHideROIVolumeRequest::clear_vr_controller() {
  if (GetArena() == nullptr && vr_controller_ != nullptr) {
    delete vr_controller_;
  }
  vr_controller_ = nullptr;
}
void VRControllerHideROIVolumeRequest::clear_roi_volume() {
  if (GetArena() == nullptr && roi_volume_ != nullptr) {
    delete roi_volume_;
  }
  roi_volume_ = nullptr;
}
VRControllerHideROIVolumeRequest::VRControllerHideROIVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.VRControllerHideROIVolumeRequest)
}
VRControllerHideROIVolumeRequest::VRControllerHideROIVolumeRequest(const VRControllerHideROIVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vr_controller()) {
    vr_controller_ = new ::osirixgrpc::VRController(*from.vr_controller_);
  } else {
    vr_controller_ = nullptr;
  }
  if (from._internal_has_roi_volume()) {
    roi_volume_ = new ::osirixgrpc::ROIVolume(*from.roi_volume_);
  } else {
    roi_volume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.VRControllerHideROIVolumeRequest)
}

void VRControllerHideROIVolumeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VRControllerHideROIVolumeRequest_vrcontroller_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vr_controller_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&roi_volume_) -
      reinterpret_cast<char*>(&vr_controller_)) + sizeof(roi_volume_));
}

VRControllerHideROIVolumeRequest::~VRControllerHideROIVolumeRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.VRControllerHideROIVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VRControllerHideROIVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vr_controller_;
  if (this != internal_default_instance()) delete roi_volume_;
}

void VRControllerHideROIVolumeRequest::ArenaDtor(void* object) {
  VRControllerHideROIVolumeRequest* _this = reinterpret_cast< VRControllerHideROIVolumeRequest* >(object);
  (void)_this;
}
void VRControllerHideROIVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VRControllerHideROIVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VRControllerHideROIVolumeRequest& VRControllerHideROIVolumeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VRControllerHideROIVolumeRequest_vrcontroller_2eproto.base);
  return *internal_default_instance();
}


void VRControllerHideROIVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.VRControllerHideROIVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vr_controller_ != nullptr) {
    delete vr_controller_;
  }
  vr_controller_ = nullptr;
  if (GetArena() == nullptr && roi_volume_ != nullptr) {
    delete roi_volume_;
  }
  roi_volume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VRControllerHideROIVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.VRController vr_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vr_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osirixgrpc.ROIVolume roi_volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VRControllerHideROIVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.VRControllerHideROIVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.VRController vr_controller = 1;
  if (this->has_vr_controller()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vr_controller(this), target, stream);
  }

  // .osirixgrpc.ROIVolume roi_volume = 2;
  if (this->has_roi_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roi_volume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.VRControllerHideROIVolumeRequest)
  return target;
}

size_t VRControllerHideROIVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.VRControllerHideROIVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.VRController vr_controller = 1;
  if (this->has_vr_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vr_controller_);
  }

  // .osirixgrpc.ROIVolume roi_volume = 2;
  if (this->has_roi_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roi_volume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VRControllerHideROIVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.VRControllerHideROIVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VRControllerHideROIVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VRControllerHideROIVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.VRControllerHideROIVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.VRControllerHideROIVolumeRequest)
    MergeFrom(*source);
  }
}

void VRControllerHideROIVolumeRequest::MergeFrom(const VRControllerHideROIVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.VRControllerHideROIVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vr_controller()) {
    _internal_mutable_vr_controller()->::osirixgrpc::VRController::MergeFrom(from._internal_vr_controller());
  }
  if (from.has_roi_volume()) {
    _internal_mutable_roi_volume()->::osirixgrpc::ROIVolume::MergeFrom(from._internal_roi_volume());
  }
}

void VRControllerHideROIVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.VRControllerHideROIVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VRControllerHideROIVolumeRequest::CopyFrom(const VRControllerHideROIVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.VRControllerHideROIVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRControllerHideROIVolumeRequest::IsInitialized() const {
  return true;
}

void VRControllerHideROIVolumeRequest::InternalSwap(VRControllerHideROIVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VRControllerHideROIVolumeRequest, roi_volume_)
      + sizeof(VRControllerHideROIVolumeRequest::roi_volume_)
      - PROTOBUF_FIELD_OFFSET(VRControllerHideROIVolumeRequest, vr_controller_)>(
          reinterpret_cast<char*>(&vr_controller_),
          reinterpret_cast<char*>(&other->vr_controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VRControllerHideROIVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class VRControllerDisplayROIVolumeRequest::_Internal {
 public:
  static const ::osirixgrpc::VRController& vr_controller(const VRControllerDisplayROIVolumeRequest* msg);
  static const ::osirixgrpc::ROIVolume& roi_volume(const VRControllerDisplayROIVolumeRequest* msg);
};

const ::osirixgrpc::VRController&
VRControllerDisplayROIVolumeRequest::_Internal::vr_controller(const VRControllerDisplayROIVolumeRequest* msg) {
  return *msg->vr_controller_;
}
const ::osirixgrpc::ROIVolume&
VRControllerDisplayROIVolumeRequest::_Internal::roi_volume(const VRControllerDisplayROIVolumeRequest* msg) {
  return *msg->roi_volume_;
}
void VRControllerDisplayROIVolumeRequest::clear_vr_controller() {
  if (GetArena() == nullptr && vr_controller_ != nullptr) {
    delete vr_controller_;
  }
  vr_controller_ = nullptr;
}
void VRControllerDisplayROIVolumeRequest::clear_roi_volume() {
  if (GetArena() == nullptr && roi_volume_ != nullptr) {
    delete roi_volume_;
  }
  roi_volume_ = nullptr;
}
VRControllerDisplayROIVolumeRequest::VRControllerDisplayROIVolumeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.VRControllerDisplayROIVolumeRequest)
}
VRControllerDisplayROIVolumeRequest::VRControllerDisplayROIVolumeRequest(const VRControllerDisplayROIVolumeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vr_controller()) {
    vr_controller_ = new ::osirixgrpc::VRController(*from.vr_controller_);
  } else {
    vr_controller_ = nullptr;
  }
  if (from._internal_has_roi_volume()) {
    roi_volume_ = new ::osirixgrpc::ROIVolume(*from.roi_volume_);
  } else {
    roi_volume_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.VRControllerDisplayROIVolumeRequest)
}

void VRControllerDisplayROIVolumeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VRControllerDisplayROIVolumeRequest_vrcontroller_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&vr_controller_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&roi_volume_) -
      reinterpret_cast<char*>(&vr_controller_)) + sizeof(roi_volume_));
}

VRControllerDisplayROIVolumeRequest::~VRControllerDisplayROIVolumeRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.VRControllerDisplayROIVolumeRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VRControllerDisplayROIVolumeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete vr_controller_;
  if (this != internal_default_instance()) delete roi_volume_;
}

void VRControllerDisplayROIVolumeRequest::ArenaDtor(void* object) {
  VRControllerDisplayROIVolumeRequest* _this = reinterpret_cast< VRControllerDisplayROIVolumeRequest* >(object);
  (void)_this;
}
void VRControllerDisplayROIVolumeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VRControllerDisplayROIVolumeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VRControllerDisplayROIVolumeRequest& VRControllerDisplayROIVolumeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VRControllerDisplayROIVolumeRequest_vrcontroller_2eproto.base);
  return *internal_default_instance();
}


void VRControllerDisplayROIVolumeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.VRControllerDisplayROIVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && vr_controller_ != nullptr) {
    delete vr_controller_;
  }
  vr_controller_ = nullptr;
  if (GetArena() == nullptr && roi_volume_ != nullptr) {
    delete roi_volume_;
  }
  roi_volume_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VRControllerDisplayROIVolumeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.VRController vr_controller = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_vr_controller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osirixgrpc.ROIVolume roi_volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi_volume(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VRControllerDisplayROIVolumeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.VRControllerDisplayROIVolumeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.VRController vr_controller = 1;
  if (this->has_vr_controller()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::vr_controller(this), target, stream);
  }

  // .osirixgrpc.ROIVolume roi_volume = 2;
  if (this->has_roi_volume()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roi_volume(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.VRControllerDisplayROIVolumeRequest)
  return target;
}

size_t VRControllerDisplayROIVolumeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.VRControllerDisplayROIVolumeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.VRController vr_controller = 1;
  if (this->has_vr_controller()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vr_controller_);
  }

  // .osirixgrpc.ROIVolume roi_volume = 2;
  if (this->has_roi_volume()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roi_volume_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VRControllerDisplayROIVolumeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.VRControllerDisplayROIVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VRControllerDisplayROIVolumeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VRControllerDisplayROIVolumeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.VRControllerDisplayROIVolumeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.VRControllerDisplayROIVolumeRequest)
    MergeFrom(*source);
  }
}

void VRControllerDisplayROIVolumeRequest::MergeFrom(const VRControllerDisplayROIVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.VRControllerDisplayROIVolumeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_vr_controller()) {
    _internal_mutable_vr_controller()->::osirixgrpc::VRController::MergeFrom(from._internal_vr_controller());
  }
  if (from.has_roi_volume()) {
    _internal_mutable_roi_volume()->::osirixgrpc::ROIVolume::MergeFrom(from._internal_roi_volume());
  }
}

void VRControllerDisplayROIVolumeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.VRControllerDisplayROIVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VRControllerDisplayROIVolumeRequest::CopyFrom(const VRControllerDisplayROIVolumeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.VRControllerDisplayROIVolumeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRControllerDisplayROIVolumeRequest::IsInitialized() const {
  return true;
}

void VRControllerDisplayROIVolumeRequest::InternalSwap(VRControllerDisplayROIVolumeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VRControllerDisplayROIVolumeRequest, roi_volume_)
      + sizeof(VRControllerDisplayROIVolumeRequest::roi_volume_)
      - PROTOBUF_FIELD_OFFSET(VRControllerDisplayROIVolumeRequest, vr_controller_)>(
          reinterpret_cast<char*>(&vr_controller_),
          reinterpret_cast<char*>(&other->vr_controller_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VRControllerDisplayROIVolumeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osirixgrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osirixgrpc::VRControllerViewer2DResponse* Arena::CreateMaybeMessage< ::osirixgrpc::VRControllerViewer2DResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::VRControllerViewer2DResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::VRControllerBlendingControllerResponse* Arena::CreateMaybeMessage< ::osirixgrpc::VRControllerBlendingControllerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::VRControllerBlendingControllerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::VRControllerRenderingModeResponse* Arena::CreateMaybeMessage< ::osirixgrpc::VRControllerRenderingModeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::VRControllerRenderingModeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::VRControllerWLWWResponse* Arena::CreateMaybeMessage< ::osirixgrpc::VRControllerWLWWResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::VRControllerWLWWResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::VRControllerStyleResponse* Arena::CreateMaybeMessage< ::osirixgrpc::VRControllerStyleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::VRControllerStyleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::VRControllerTitleResponse* Arena::CreateMaybeMessage< ::osirixgrpc::VRControllerTitleResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::VRControllerTitleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::VRControllerROIVolumesResponse* Arena::CreateMaybeMessage< ::osirixgrpc::VRControllerROIVolumesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::VRControllerROIVolumesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::VRControllerSetRenderingModeRequest* Arena::CreateMaybeMessage< ::osirixgrpc::VRControllerSetRenderingModeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::VRControllerSetRenderingModeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::VRControllerSetWLWWRequest* Arena::CreateMaybeMessage< ::osirixgrpc::VRControllerSetWLWWRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::VRControllerSetWLWWRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::VRControllerHideROIVolumeRequest* Arena::CreateMaybeMessage< ::osirixgrpc::VRControllerHideROIVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::VRControllerHideROIVolumeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::VRControllerDisplayROIVolumeRequest* Arena::CreateMaybeMessage< ::osirixgrpc::VRControllerDisplayROIVolumeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::VRControllerDisplayROIVolumeRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
