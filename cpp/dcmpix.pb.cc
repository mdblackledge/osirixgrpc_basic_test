// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dcmpix.proto

#include "dcmpix.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DCMPix_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DicomImage_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DicomSeries_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DicomStudy_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_types_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ROI_types_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_utilities_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Status_utilities_2eproto;
namespace osirixgrpc {
class DCMPixIsRGBResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixIsRGBResponse> _instance;
} _DCMPixIsRGBResponse_default_instance_;
class DCMPixComputeROIResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixComputeROIResponse> _instance;
} _DCMPixComputeROIResponse_default_instance_;
class DCMPixROIValuesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixROIValuesResponse> _instance;
} _DCMPixROIValuesResponse_default_instance_;
class DCMPixDicomImageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixDicomImageResponse> _instance;
} _DCMPixDicomImageResponse_default_instance_;
class DCMPixDicomSeriesResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixDicomSeriesResponse> _instance;
} _DCMPixDicomSeriesResponse_default_instance_;
class DCMPixDicomStudyResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixDicomStudyResponse> _instance;
} _DCMPixDicomStudyResponse_default_instance_;
class DCMPixImageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixImageResponse> _instance;
} _DCMPixImageResponse_default_instance_;
class DCMPixGetMapFromROIResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixGetMapFromROIResponse> _instance;
} _DCMPixGetMapFromROIResponse_default_instance_;
class DCMPixShapeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixShapeResponse> _instance;
} _DCMPixShapeResponse_default_instance_;
class DCMPixSpacingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixSpacingResponse> _instance;
} _DCMPixSpacingResponse_default_instance_;
class DCMPixOriginResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixOriginResponse> _instance;
} _DCMPixOriginResponse_default_instance_;
class DCMPixOrientationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixOrientationResponse> _instance;
} _DCMPixOrientationResponse_default_instance_;
class DCMPixSliceLocationResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixSliceLocationResponse> _instance;
} _DCMPixSliceLocationResponse_default_instance_;
class DCMPixSourceFileResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixSourceFileResponse> _instance;
} _DCMPixSourceFileResponse_default_instance_;
class DCMPixConvertToRGBRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixConvertToRGBRequest> _instance;
} _DCMPixConvertToRGBRequest_default_instance_;
class DCMPixConvertToBWRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixConvertToBWRequest> _instance;
} _DCMPixConvertToBWRequest_default_instance_;
class DCMPixComputeROIRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixComputeROIRequest> _instance;
} _DCMPixComputeROIRequest_default_instance_;
class DCMPixROIValuesRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixROIValuesRequest> _instance;
} _DCMPixROIValuesRequest_default_instance_;
class DCMPixSetImageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixSetImageRequest> _instance;
} _DCMPixSetImageRequest_default_instance_;
class DCMPixGetMapFromROIRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DCMPixGetMapFromROIRequest> _instance;
} _DCMPixGetMapFromROIRequest_default_instance_;
}  // namespace osirixgrpc
static void InitDefaultsscc_info_DCMPixComputeROIRequest_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixComputeROIRequest_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixComputeROIRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DCMPixComputeROIRequest_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DCMPixComputeROIRequest_dcmpix_2eproto}, {
      &scc_info_DCMPix_types_2eproto.base,
      &scc_info_ROI_types_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixComputeROIResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixComputeROIResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixComputeROIResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixComputeROIResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixComputeROIResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixConvertToBWRequest_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixConvertToBWRequest_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixConvertToBWRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixConvertToBWRequest_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixConvertToBWRequest_dcmpix_2eproto}, {
      &scc_info_DCMPix_types_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixConvertToRGBRequest_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixConvertToRGBRequest_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixConvertToRGBRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixConvertToRGBRequest_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixConvertToRGBRequest_dcmpix_2eproto}, {
      &scc_info_DCMPix_types_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixDicomImageResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixDicomImageResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixDicomImageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DCMPixDicomImageResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DCMPixDicomImageResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,
      &scc_info_DicomImage_types_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixDicomSeriesResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixDicomSeriesResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixDicomSeriesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DCMPixDicomSeriesResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DCMPixDicomSeriesResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,
      &scc_info_DicomSeries_types_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixDicomStudyResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixDicomStudyResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixDicomStudyResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DCMPixDicomStudyResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DCMPixDicomStudyResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,
      &scc_info_DicomStudy_types_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixGetMapFromROIRequest_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixGetMapFromROIRequest_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixGetMapFromROIRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DCMPixGetMapFromROIRequest_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DCMPixGetMapFromROIRequest_dcmpix_2eproto}, {
      &scc_info_DCMPix_types_2eproto.base,
      &scc_info_ROI_types_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixGetMapFromROIResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixGetMapFromROIResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixGetMapFromROIResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixGetMapFromROIResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixGetMapFromROIResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixImageResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixImageResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixImageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixImageResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixImageResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixIsRGBResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixIsRGBResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixIsRGBResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixIsRGBResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixIsRGBResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixOrientationResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixOrientationResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixOrientationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixOrientationResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixOrientationResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixOriginResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixOriginResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixOriginResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixOriginResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixOriginResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixROIValuesRequest_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixROIValuesRequest_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixROIValuesRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DCMPixROIValuesRequest_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DCMPixROIValuesRequest_dcmpix_2eproto}, {
      &scc_info_DCMPix_types_2eproto.base,
      &scc_info_ROI_types_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixROIValuesResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixROIValuesResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixROIValuesResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixROIValuesResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixROIValuesResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixSetImageRequest_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixSetImageRequest_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixSetImageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixSetImageRequest_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixSetImageRequest_dcmpix_2eproto}, {
      &scc_info_DCMPix_types_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixShapeResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixShapeResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixShapeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixShapeResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixShapeResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixSliceLocationResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixSliceLocationResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixSliceLocationResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixSliceLocationResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixSliceLocationResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixSourceFileResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixSourceFileResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixSourceFileResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixSourceFileResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixSourceFileResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static void InitDefaultsscc_info_DCMPixSpacingResponse_dcmpix_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::osirixgrpc::_DCMPixSpacingResponse_default_instance_;
    new (ptr) ::osirixgrpc::DCMPixSpacingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DCMPixSpacingResponse_dcmpix_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DCMPixSpacingResponse_dcmpix_2eproto}, {
      &scc_info_Status_utilities_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dcmpix_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dcmpix_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dcmpix_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dcmpix_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixIsRGBResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixIsRGBResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixIsRGBResponse, is_rgb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, mean_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, total_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, std_dev_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, min_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, max_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, skewness_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIResponse, kurtosis_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesResponse, values_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesResponse, row_indices_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesResponse, column_indices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomImageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomImageResponse, dicom_image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomSeriesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomSeriesResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomSeriesResponse, dicom_series_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomStudyResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomStudyResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixDicomStudyResponse, dicom_study_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, rows_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, columns_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, is_argb_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, image_data_float_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixImageResponse, image_data_argb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIResponse, rows_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIResponse, columns_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIResponse, map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixShapeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixShapeResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixShapeResponse, rows_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixShapeResponse, columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSpacingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSpacingResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSpacingResponse, spacing_rows_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSpacingResponse, spacing_columns_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOriginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOriginResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOriginResponse, origin_rows_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOriginResponse, origin_columns_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOriginResponse, origin_slices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOrientationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOrientationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixOrientationResponse, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSliceLocationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSliceLocationResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSliceLocationResponse, slice_location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSourceFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSourceFileResponse, status_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSourceFileResponse, source_file_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToRGBRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToRGBRequest, pix_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToRGBRequest, rgb_channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToBWRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToBWRequest, pix_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixConvertToBWRequest, bw_channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIRequest, pix_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixComputeROIRequest, roi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesRequest, pix_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixROIValuesRequest, roi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSetImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSetImageRequest, pix_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSetImageRequest, image_data_float_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixSetImageRequest, image_data_argb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIRequest, pix_),
  PROTOBUF_FIELD_OFFSET(::osirixgrpc::DCMPixGetMapFromROIRequest, roi_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::osirixgrpc::DCMPixIsRGBResponse)},
  { 7, -1, sizeof(::osirixgrpc::DCMPixComputeROIResponse)},
  { 20, -1, sizeof(::osirixgrpc::DCMPixROIValuesResponse)},
  { 29, -1, sizeof(::osirixgrpc::DCMPixDicomImageResponse)},
  { 36, -1, sizeof(::osirixgrpc::DCMPixDicomSeriesResponse)},
  { 43, -1, sizeof(::osirixgrpc::DCMPixDicomStudyResponse)},
  { 50, -1, sizeof(::osirixgrpc::DCMPixImageResponse)},
  { 61, -1, sizeof(::osirixgrpc::DCMPixGetMapFromROIResponse)},
  { 70, -1, sizeof(::osirixgrpc::DCMPixShapeResponse)},
  { 78, -1, sizeof(::osirixgrpc::DCMPixSpacingResponse)},
  { 86, -1, sizeof(::osirixgrpc::DCMPixOriginResponse)},
  { 95, -1, sizeof(::osirixgrpc::DCMPixOrientationResponse)},
  { 102, -1, sizeof(::osirixgrpc::DCMPixSliceLocationResponse)},
  { 109, -1, sizeof(::osirixgrpc::DCMPixSourceFileResponse)},
  { 116, -1, sizeof(::osirixgrpc::DCMPixConvertToRGBRequest)},
  { 123, -1, sizeof(::osirixgrpc::DCMPixConvertToBWRequest)},
  { 130, -1, sizeof(::osirixgrpc::DCMPixComputeROIRequest)},
  { 137, -1, sizeof(::osirixgrpc::DCMPixROIValuesRequest)},
  { 144, -1, sizeof(::osirixgrpc::DCMPixSetImageRequest)},
  { 152, -1, sizeof(::osirixgrpc::DCMPixGetMapFromROIRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixIsRGBResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixComputeROIResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixROIValuesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixDicomImageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixDicomSeriesResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixDicomStudyResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixImageResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixGetMapFromROIResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixShapeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixSpacingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixOriginResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixOrientationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixSliceLocationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixSourceFileResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixConvertToRGBRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixConvertToBWRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixComputeROIRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixROIValuesRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixSetImageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::osirixgrpc::_DCMPixGetMapFromROIRequest_default_instance_),
};

const char descriptor_table_protodef_dcmpix_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014dcmpix.proto\022\nosirixgrpc\032\017utilities.pr"
  "oto\032\013types.proto\"I\n\023DCMPixIsRGBResponse\022"
  "\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Status\022\016\n\006i"
  "s_rgb\030\002 \001(\010\"\252\001\n\030DCMPixComputeROIResponse"
  "\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Status\022\014\n\004"
  "mean\030\002 \001(\002\022\r\n\005total\030\003 \001(\002\022\017\n\007std_dev\030\004 \001"
  "(\002\022\013\n\003min\030\005 \001(\002\022\013\n\003max\030\006 \001(\002\022\020\n\010skewness"
  "\030\007 \001(\002\022\020\n\010kurtosis\030\010 \001(\002\"z\n\027DCMPixROIVal"
  "uesResponse\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc"
  ".Status\022\016\n\006values\030\002 \003(\002\022\023\n\013row_indices\030\003"
  " \003(\005\022\026\n\016column_indices\030\004 \003(\005\"k\n\030DCMPixDi"
  "comImageResponse\022\"\n\006status\030\001 \001(\0132\022.osiri"
  "xgrpc.Status\022+\n\013dicom_image\030\002 \001(\0132\026.osir"
  "ixgrpc.DicomImage\"n\n\031DCMPixDicomSeriesRe"
  "sponse\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Stat"
  "us\022-\n\014dicom_series\030\002 \001(\0132\027.osirixgrpc.Di"
  "comSeries\"k\n\030DCMPixDicomStudyResponse\022\"\n"
  "\006status\030\001 \001(\0132\022.osirixgrpc.Status\022+\n\013dic"
  "om_study\030\002 \001(\0132\026.osirixgrpc.DicomStudy\"\234"
  "\001\n\023DCMPixImageResponse\022\"\n\006status\030\001 \001(\0132\022"
  ".osirixgrpc.Status\022\014\n\004rows\030\002 \001(\005\022\017\n\007colu"
  "mns\030\003 \001(\005\022\017\n\007is_argb\030\004 \001(\010\022\030\n\020image_data"
  "_float\030\005 \003(\002\022\027\n\017image_data_argb\030\006 \003(\005\"m\n"
  "\033DCMPixGetMapFromROIResponse\022\"\n\006status\030\001"
  " \001(\0132\022.osirixgrpc.Status\022\014\n\004rows\030\002 \001(\005\022\017"
  "\n\007columns\030\003 \001(\005\022\013\n\003map\030\004 \003(\010\"X\n\023DCMPixSh"
  "apeResponse\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc"
  ".Status\022\014\n\004rows\030\002 \001(\005\022\017\n\007columns\030\003 \001(\005\"j"
  "\n\025DCMPixSpacingResponse\022\"\n\006status\030\001 \001(\0132"
  "\022.osirixgrpc.Status\022\024\n\014spacing_rows\030\002 \001("
  "\002\022\027\n\017spacing_columns\030\003 \001(\002\"~\n\024DCMPixOrig"
  "inResponse\022\"\n\006status\030\001 \001(\0132\022.osirixgrpc."
  "Status\022\023\n\013origin_rows\030\002 \001(\002\022\026\n\016origin_co"
  "lumns\030\003 \001(\002\022\025\n\rorigin_slices\030\004 \001(\002\"T\n\031DC"
  "MPixOrientationResponse\022\"\n\006status\030\001 \001(\0132"
  "\022.osirixgrpc.Status\022\023\n\013orientation\030\002 \003(\002"
  "\"Y\n\033DCMPixSliceLocationResponse\022\"\n\006statu"
  "s\030\001 \001(\0132\022.osirixgrpc.Status\022\026\n\016slice_loc"
  "ation\030\002 \001(\002\"S\n\030DCMPixSourceFileResponse\022"
  "\"\n\006status\030\001 \001(\0132\022.osirixgrpc.Status\022\023\n\013s"
  "ource_file\030\002 \001(\t\"Q\n\031DCMPixConvertToRGBRe"
  "quest\022\037\n\003pix\030\001 \001(\0132\022.osirixgrpc.DCMPix\022\023"
  "\n\013rgb_channel\030\002 \001(\005\"O\n\030DCMPixConvertToBW"
  "Request\022\037\n\003pix\030\001 \001(\0132\022.osirixgrpc.DCMPix"
  "\022\022\n\nbw_channel\030\002 \001(\005\"X\n\027DCMPixComputeROI"
  "Request\022\037\n\003pix\030\001 \001(\0132\022.osirixgrpc.DCMPix"
  "\022\034\n\003roi\030\002 \001(\0132\017.osirixgrpc.ROI\"W\n\026DCMPix"
  "ROIValuesRequest\022\037\n\003pix\030\001 \001(\0132\022.osirixgr"
  "pc.DCMPix\022\034\n\003roi\030\002 \001(\0132\017.osirixgrpc.ROI\""
  "k\n\025DCMPixSetImageRequest\022\037\n\003pix\030\001 \001(\0132\022."
  "osirixgrpc.DCMPix\022\030\n\020image_data_float\030\002 "
  "\003(\002\022\027\n\017image_data_argb\030\003 \003(\005\"[\n\032DCMPixGe"
  "tMapFromROIRequest\022\037\n\003pix\030\001 \001(\0132\022.osirix"
  "grpc.DCMPix\022\034\n\003roi\030\002 \001(\0132\017.osirixgrpc.RO"
  "Ib\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dcmpix_2eproto_deps[2] = {
  &::descriptor_table_types_2eproto,
  &::descriptor_table_utilities_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dcmpix_2eproto_sccs[20] = {
  &scc_info_DCMPixComputeROIRequest_dcmpix_2eproto.base,
  &scc_info_DCMPixComputeROIResponse_dcmpix_2eproto.base,
  &scc_info_DCMPixConvertToBWRequest_dcmpix_2eproto.base,
  &scc_info_DCMPixConvertToRGBRequest_dcmpix_2eproto.base,
  &scc_info_DCMPixDicomImageResponse_dcmpix_2eproto.base,
  &scc_info_DCMPixDicomSeriesResponse_dcmpix_2eproto.base,
  &scc_info_DCMPixDicomStudyResponse_dcmpix_2eproto.base,
  &scc_info_DCMPixGetMapFromROIRequest_dcmpix_2eproto.base,
  &scc_info_DCMPixGetMapFromROIResponse_dcmpix_2eproto.base,
  &scc_info_DCMPixImageResponse_dcmpix_2eproto.base,
  &scc_info_DCMPixIsRGBResponse_dcmpix_2eproto.base,
  &scc_info_DCMPixOrientationResponse_dcmpix_2eproto.base,
  &scc_info_DCMPixOriginResponse_dcmpix_2eproto.base,
  &scc_info_DCMPixROIValuesRequest_dcmpix_2eproto.base,
  &scc_info_DCMPixROIValuesResponse_dcmpix_2eproto.base,
  &scc_info_DCMPixSetImageRequest_dcmpix_2eproto.base,
  &scc_info_DCMPixShapeResponse_dcmpix_2eproto.base,
  &scc_info_DCMPixSliceLocationResponse_dcmpix_2eproto.base,
  &scc_info_DCMPixSourceFileResponse_dcmpix_2eproto.base,
  &scc_info_DCMPixSpacingResponse_dcmpix_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dcmpix_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dcmpix_2eproto = {
  false, false, descriptor_table_protodef_dcmpix_2eproto, "dcmpix.proto", 2169,
  &descriptor_table_dcmpix_2eproto_once, descriptor_table_dcmpix_2eproto_sccs, descriptor_table_dcmpix_2eproto_deps, 20, 2,
  schemas, file_default_instances, TableStruct_dcmpix_2eproto::offsets,
  file_level_metadata_dcmpix_2eproto, 20, file_level_enum_descriptors_dcmpix_2eproto, file_level_service_descriptors_dcmpix_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dcmpix_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dcmpix_2eproto)), true);
namespace osirixgrpc {

// ===================================================================

class DCMPixIsRGBResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixIsRGBResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixIsRGBResponse::_Internal::status(const DCMPixIsRGBResponse* msg) {
  return *msg->status_;
}
void DCMPixIsRGBResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DCMPixIsRGBResponse::DCMPixIsRGBResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixIsRGBResponse)
}
DCMPixIsRGBResponse::DCMPixIsRGBResponse(const DCMPixIsRGBResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  is_rgb_ = from.is_rgb_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixIsRGBResponse)
}

void DCMPixIsRGBResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixIsRGBResponse_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_rgb_) -
      reinterpret_cast<char*>(&status_)) + sizeof(is_rgb_));
}

DCMPixIsRGBResponse::~DCMPixIsRGBResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixIsRGBResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixIsRGBResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void DCMPixIsRGBResponse::ArenaDtor(void* object) {
  DCMPixIsRGBResponse* _this = reinterpret_cast< DCMPixIsRGBResponse* >(object);
  (void)_this;
}
void DCMPixIsRGBResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixIsRGBResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixIsRGBResponse& DCMPixIsRGBResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixIsRGBResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixIsRGBResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixIsRGBResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  is_rgb_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixIsRGBResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_rgb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          is_rgb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixIsRGBResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixIsRGBResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // bool is_rgb = 2;
  if (this->is_rgb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_is_rgb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixIsRGBResponse)
  return target;
}

size_t DCMPixIsRGBResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixIsRGBResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // bool is_rgb = 2;
  if (this->is_rgb() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixIsRGBResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixIsRGBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixIsRGBResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixIsRGBResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixIsRGBResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixIsRGBResponse)
    MergeFrom(*source);
  }
}

void DCMPixIsRGBResponse::MergeFrom(const DCMPixIsRGBResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixIsRGBResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (from.is_rgb() != 0) {
    _internal_set_is_rgb(from._internal_is_rgb());
  }
}

void DCMPixIsRGBResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixIsRGBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixIsRGBResponse::CopyFrom(const DCMPixIsRGBResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixIsRGBResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixIsRGBResponse::IsInitialized() const {
  return true;
}

void DCMPixIsRGBResponse::InternalSwap(DCMPixIsRGBResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixIsRGBResponse, is_rgb_)
      + sizeof(DCMPixIsRGBResponse::is_rgb_)
      - PROTOBUF_FIELD_OFFSET(DCMPixIsRGBResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixIsRGBResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixComputeROIResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixComputeROIResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixComputeROIResponse::_Internal::status(const DCMPixComputeROIResponse* msg) {
  return *msg->status_;
}
void DCMPixComputeROIResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DCMPixComputeROIResponse::DCMPixComputeROIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixComputeROIResponse)
}
DCMPixComputeROIResponse::DCMPixComputeROIResponse(const DCMPixComputeROIResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&mean_, &from.mean_,
    static_cast<size_t>(reinterpret_cast<char*>(&kurtosis_) -
    reinterpret_cast<char*>(&mean_)) + sizeof(kurtosis_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixComputeROIResponse)
}

void DCMPixComputeROIResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixComputeROIResponse_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&kurtosis_) -
      reinterpret_cast<char*>(&status_)) + sizeof(kurtosis_));
}

DCMPixComputeROIResponse::~DCMPixComputeROIResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixComputeROIResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixComputeROIResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void DCMPixComputeROIResponse::ArenaDtor(void* object) {
  DCMPixComputeROIResponse* _this = reinterpret_cast< DCMPixComputeROIResponse* >(object);
  (void)_this;
}
void DCMPixComputeROIResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixComputeROIResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixComputeROIResponse& DCMPixComputeROIResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixComputeROIResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixComputeROIResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixComputeROIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&mean_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kurtosis_) -
      reinterpret_cast<char*>(&mean_)) + sizeof(kurtosis_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixComputeROIResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float mean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          total_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float std_dev = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          std_dev_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float min = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float skewness = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          skewness_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float kurtosis = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          kurtosis_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixComputeROIResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixComputeROIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // float mean = 2;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_mean(), target);
  }

  // float total = 3;
  if (!(this->total() <= 0 && this->total() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_total(), target);
  }

  // float std_dev = 4;
  if (!(this->std_dev() <= 0 && this->std_dev() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_std_dev(), target);
  }

  // float min = 5;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_min(), target);
  }

  // float max = 6;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_max(), target);
  }

  // float skewness = 7;
  if (!(this->skewness() <= 0 && this->skewness() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_skewness(), target);
  }

  // float kurtosis = 8;
  if (!(this->kurtosis() <= 0 && this->kurtosis() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_kurtosis(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixComputeROIResponse)
  return target;
}

size_t DCMPixComputeROIResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixComputeROIResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // float mean = 2;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    total_size += 1 + 4;
  }

  // float total = 3;
  if (!(this->total() <= 0 && this->total() >= 0)) {
    total_size += 1 + 4;
  }

  // float std_dev = 4;
  if (!(this->std_dev() <= 0 && this->std_dev() >= 0)) {
    total_size += 1 + 4;
  }

  // float min = 5;
  if (!(this->min() <= 0 && this->min() >= 0)) {
    total_size += 1 + 4;
  }

  // float max = 6;
  if (!(this->max() <= 0 && this->max() >= 0)) {
    total_size += 1 + 4;
  }

  // float skewness = 7;
  if (!(this->skewness() <= 0 && this->skewness() >= 0)) {
    total_size += 1 + 4;
  }

  // float kurtosis = 8;
  if (!(this->kurtosis() <= 0 && this->kurtosis() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixComputeROIResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixComputeROIResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixComputeROIResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixComputeROIResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixComputeROIResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixComputeROIResponse)
    MergeFrom(*source);
  }
}

void DCMPixComputeROIResponse::MergeFrom(const DCMPixComputeROIResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixComputeROIResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (!(from.mean() <= 0 && from.mean() >= 0)) {
    _internal_set_mean(from._internal_mean());
  }
  if (!(from.total() <= 0 && from.total() >= 0)) {
    _internal_set_total(from._internal_total());
  }
  if (!(from.std_dev() <= 0 && from.std_dev() >= 0)) {
    _internal_set_std_dev(from._internal_std_dev());
  }
  if (!(from.min() <= 0 && from.min() >= 0)) {
    _internal_set_min(from._internal_min());
  }
  if (!(from.max() <= 0 && from.max() >= 0)) {
    _internal_set_max(from._internal_max());
  }
  if (!(from.skewness() <= 0 && from.skewness() >= 0)) {
    _internal_set_skewness(from._internal_skewness());
  }
  if (!(from.kurtosis() <= 0 && from.kurtosis() >= 0)) {
    _internal_set_kurtosis(from._internal_kurtosis());
  }
}

void DCMPixComputeROIResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixComputeROIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixComputeROIResponse::CopyFrom(const DCMPixComputeROIResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixComputeROIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixComputeROIResponse::IsInitialized() const {
  return true;
}

void DCMPixComputeROIResponse::InternalSwap(DCMPixComputeROIResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixComputeROIResponse, kurtosis_)
      + sizeof(DCMPixComputeROIResponse::kurtosis_)
      - PROTOBUF_FIELD_OFFSET(DCMPixComputeROIResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixComputeROIResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixROIValuesResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixROIValuesResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixROIValuesResponse::_Internal::status(const DCMPixROIValuesResponse* msg) {
  return *msg->status_;
}
void DCMPixROIValuesResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DCMPixROIValuesResponse::DCMPixROIValuesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena),
  row_indices_(arena),
  column_indices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixROIValuesResponse)
}
DCMPixROIValuesResponse::DCMPixROIValuesResponse(const DCMPixROIValuesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_),
      row_indices_(from.row_indices_),
      column_indices_(from.column_indices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixROIValuesResponse)
}

void DCMPixROIValuesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixROIValuesResponse_dcmpix_2eproto.base);
  status_ = nullptr;
}

DCMPixROIValuesResponse::~DCMPixROIValuesResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixROIValuesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixROIValuesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void DCMPixROIValuesResponse::ArenaDtor(void* object) {
  DCMPixROIValuesResponse* _this = reinterpret_cast< DCMPixROIValuesResponse* >(object);
  (void)_this;
}
void DCMPixROIValuesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixROIValuesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixROIValuesResponse& DCMPixROIValuesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixROIValuesResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixROIValuesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixROIValuesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  row_indices_.Clear();
  column_indices_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixROIValuesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 row_indices = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_row_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_row_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 column_indices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_column_indices(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_column_indices(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixROIValuesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixROIValuesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  // repeated int32 row_indices = 3;
  {
    int byte_size = _row_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_row_indices(), byte_size, target);
    }
  }

  // repeated int32 column_indices = 4;
  {
    int byte_size = _column_indices_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_column_indices(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixROIValuesResponse)
  return target;
}

size_t DCMPixROIValuesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixROIValuesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 row_indices = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->row_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _row_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 column_indices = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->column_indices_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _column_indices_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixROIValuesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixROIValuesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixROIValuesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixROIValuesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixROIValuesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixROIValuesResponse)
    MergeFrom(*source);
  }
}

void DCMPixROIValuesResponse::MergeFrom(const DCMPixROIValuesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixROIValuesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  row_indices_.MergeFrom(from.row_indices_);
  column_indices_.MergeFrom(from.column_indices_);
  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
}

void DCMPixROIValuesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixROIValuesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixROIValuesResponse::CopyFrom(const DCMPixROIValuesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixROIValuesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixROIValuesResponse::IsInitialized() const {
  return true;
}

void DCMPixROIValuesResponse::InternalSwap(DCMPixROIValuesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  row_indices_.InternalSwap(&other->row_indices_);
  column_indices_.InternalSwap(&other->column_indices_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixROIValuesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixDicomImageResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixDicomImageResponse* msg);
  static const ::osirixgrpc::DicomImage& dicom_image(const DCMPixDicomImageResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixDicomImageResponse::_Internal::status(const DCMPixDicomImageResponse* msg) {
  return *msg->status_;
}
const ::osirixgrpc::DicomImage&
DCMPixDicomImageResponse::_Internal::dicom_image(const DCMPixDicomImageResponse* msg) {
  return *msg->dicom_image_;
}
void DCMPixDicomImageResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void DCMPixDicomImageResponse::clear_dicom_image() {
  if (GetArena() == nullptr && dicom_image_ != nullptr) {
    delete dicom_image_;
  }
  dicom_image_ = nullptr;
}
DCMPixDicomImageResponse::DCMPixDicomImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixDicomImageResponse)
}
DCMPixDicomImageResponse::DCMPixDicomImageResponse(const DCMPixDicomImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_dicom_image()) {
    dicom_image_ = new ::osirixgrpc::DicomImage(*from.dicom_image_);
  } else {
    dicom_image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixDicomImageResponse)
}

void DCMPixDicomImageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixDicomImageResponse_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dicom_image_) -
      reinterpret_cast<char*>(&status_)) + sizeof(dicom_image_));
}

DCMPixDicomImageResponse::~DCMPixDicomImageResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixDicomImageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixDicomImageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete dicom_image_;
}

void DCMPixDicomImageResponse::ArenaDtor(void* object) {
  DCMPixDicomImageResponse* _this = reinterpret_cast< DCMPixDicomImageResponse* >(object);
  (void)_this;
}
void DCMPixDicomImageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixDicomImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixDicomImageResponse& DCMPixDicomImageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixDicomImageResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixDicomImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixDicomImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && dicom_image_ != nullptr) {
    delete dicom_image_;
  }
  dicom_image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixDicomImageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osirixgrpc.DicomImage dicom_image = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dicom_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixDicomImageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixDicomImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .osirixgrpc.DicomImage dicom_image = 2;
  if (this->has_dicom_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dicom_image(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixDicomImageResponse)
  return target;
}

size_t DCMPixDicomImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixDicomImageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .osirixgrpc.DicomImage dicom_image = 2;
  if (this->has_dicom_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dicom_image_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixDicomImageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixDicomImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixDicomImageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixDicomImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixDicomImageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixDicomImageResponse)
    MergeFrom(*source);
  }
}

void DCMPixDicomImageResponse::MergeFrom(const DCMPixDicomImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixDicomImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (from.has_dicom_image()) {
    _internal_mutable_dicom_image()->::osirixgrpc::DicomImage::MergeFrom(from._internal_dicom_image());
  }
}

void DCMPixDicomImageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixDicomImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixDicomImageResponse::CopyFrom(const DCMPixDicomImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixDicomImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixDicomImageResponse::IsInitialized() const {
  return true;
}

void DCMPixDicomImageResponse::InternalSwap(DCMPixDicomImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixDicomImageResponse, dicom_image_)
      + sizeof(DCMPixDicomImageResponse::dicom_image_)
      - PROTOBUF_FIELD_OFFSET(DCMPixDicomImageResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixDicomImageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixDicomSeriesResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixDicomSeriesResponse* msg);
  static const ::osirixgrpc::DicomSeries& dicom_series(const DCMPixDicomSeriesResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixDicomSeriesResponse::_Internal::status(const DCMPixDicomSeriesResponse* msg) {
  return *msg->status_;
}
const ::osirixgrpc::DicomSeries&
DCMPixDicomSeriesResponse::_Internal::dicom_series(const DCMPixDicomSeriesResponse* msg) {
  return *msg->dicom_series_;
}
void DCMPixDicomSeriesResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void DCMPixDicomSeriesResponse::clear_dicom_series() {
  if (GetArena() == nullptr && dicom_series_ != nullptr) {
    delete dicom_series_;
  }
  dicom_series_ = nullptr;
}
DCMPixDicomSeriesResponse::DCMPixDicomSeriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixDicomSeriesResponse)
}
DCMPixDicomSeriesResponse::DCMPixDicomSeriesResponse(const DCMPixDicomSeriesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_dicom_series()) {
    dicom_series_ = new ::osirixgrpc::DicomSeries(*from.dicom_series_);
  } else {
    dicom_series_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixDicomSeriesResponse)
}

void DCMPixDicomSeriesResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixDicomSeriesResponse_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dicom_series_) -
      reinterpret_cast<char*>(&status_)) + sizeof(dicom_series_));
}

DCMPixDicomSeriesResponse::~DCMPixDicomSeriesResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixDicomSeriesResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixDicomSeriesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete dicom_series_;
}

void DCMPixDicomSeriesResponse::ArenaDtor(void* object) {
  DCMPixDicomSeriesResponse* _this = reinterpret_cast< DCMPixDicomSeriesResponse* >(object);
  (void)_this;
}
void DCMPixDicomSeriesResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixDicomSeriesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixDicomSeriesResponse& DCMPixDicomSeriesResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixDicomSeriesResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixDicomSeriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixDicomSeriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && dicom_series_ != nullptr) {
    delete dicom_series_;
  }
  dicom_series_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixDicomSeriesResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osirixgrpc.DicomSeries dicom_series = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dicom_series(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixDicomSeriesResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixDicomSeriesResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .osirixgrpc.DicomSeries dicom_series = 2;
  if (this->has_dicom_series()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dicom_series(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixDicomSeriesResponse)
  return target;
}

size_t DCMPixDicomSeriesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixDicomSeriesResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .osirixgrpc.DicomSeries dicom_series = 2;
  if (this->has_dicom_series()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dicom_series_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixDicomSeriesResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixDicomSeriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixDicomSeriesResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixDicomSeriesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixDicomSeriesResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixDicomSeriesResponse)
    MergeFrom(*source);
  }
}

void DCMPixDicomSeriesResponse::MergeFrom(const DCMPixDicomSeriesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixDicomSeriesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (from.has_dicom_series()) {
    _internal_mutable_dicom_series()->::osirixgrpc::DicomSeries::MergeFrom(from._internal_dicom_series());
  }
}

void DCMPixDicomSeriesResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixDicomSeriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixDicomSeriesResponse::CopyFrom(const DCMPixDicomSeriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixDicomSeriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixDicomSeriesResponse::IsInitialized() const {
  return true;
}

void DCMPixDicomSeriesResponse::InternalSwap(DCMPixDicomSeriesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixDicomSeriesResponse, dicom_series_)
      + sizeof(DCMPixDicomSeriesResponse::dicom_series_)
      - PROTOBUF_FIELD_OFFSET(DCMPixDicomSeriesResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixDicomSeriesResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixDicomStudyResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixDicomStudyResponse* msg);
  static const ::osirixgrpc::DicomStudy& dicom_study(const DCMPixDicomStudyResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixDicomStudyResponse::_Internal::status(const DCMPixDicomStudyResponse* msg) {
  return *msg->status_;
}
const ::osirixgrpc::DicomStudy&
DCMPixDicomStudyResponse::_Internal::dicom_study(const DCMPixDicomStudyResponse* msg) {
  return *msg->dicom_study_;
}
void DCMPixDicomStudyResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
void DCMPixDicomStudyResponse::clear_dicom_study() {
  if (GetArena() == nullptr && dicom_study_ != nullptr) {
    delete dicom_study_;
  }
  dicom_study_ = nullptr;
}
DCMPixDicomStudyResponse::DCMPixDicomStudyResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixDicomStudyResponse)
}
DCMPixDicomStudyResponse::DCMPixDicomStudyResponse(const DCMPixDicomStudyResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_dicom_study()) {
    dicom_study_ = new ::osirixgrpc::DicomStudy(*from.dicom_study_);
  } else {
    dicom_study_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixDicomStudyResponse)
}

void DCMPixDicomStudyResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixDicomStudyResponse_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&dicom_study_) -
      reinterpret_cast<char*>(&status_)) + sizeof(dicom_study_));
}

DCMPixDicomStudyResponse::~DCMPixDicomStudyResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixDicomStudyResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixDicomStudyResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete dicom_study_;
}

void DCMPixDicomStudyResponse::ArenaDtor(void* object) {
  DCMPixDicomStudyResponse* _this = reinterpret_cast< DCMPixDicomStudyResponse* >(object);
  (void)_this;
}
void DCMPixDicomStudyResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixDicomStudyResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixDicomStudyResponse& DCMPixDicomStudyResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixDicomStudyResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixDicomStudyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixDicomStudyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArena() == nullptr && dicom_study_ != nullptr) {
    delete dicom_study_;
  }
  dicom_study_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixDicomStudyResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osirixgrpc.DicomStudy dicom_study = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dicom_study(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixDicomStudyResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixDicomStudyResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .osirixgrpc.DicomStudy dicom_study = 2;
  if (this->has_dicom_study()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::dicom_study(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixDicomStudyResponse)
  return target;
}

size_t DCMPixDicomStudyResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixDicomStudyResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .osirixgrpc.DicomStudy dicom_study = 2;
  if (this->has_dicom_study()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dicom_study_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixDicomStudyResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixDicomStudyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixDicomStudyResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixDicomStudyResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixDicomStudyResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixDicomStudyResponse)
    MergeFrom(*source);
  }
}

void DCMPixDicomStudyResponse::MergeFrom(const DCMPixDicomStudyResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixDicomStudyResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (from.has_dicom_study()) {
    _internal_mutable_dicom_study()->::osirixgrpc::DicomStudy::MergeFrom(from._internal_dicom_study());
  }
}

void DCMPixDicomStudyResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixDicomStudyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixDicomStudyResponse::CopyFrom(const DCMPixDicomStudyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixDicomStudyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixDicomStudyResponse::IsInitialized() const {
  return true;
}

void DCMPixDicomStudyResponse::InternalSwap(DCMPixDicomStudyResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixDicomStudyResponse, dicom_study_)
      + sizeof(DCMPixDicomStudyResponse::dicom_study_)
      - PROTOBUF_FIELD_OFFSET(DCMPixDicomStudyResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixDicomStudyResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixImageResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixImageResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixImageResponse::_Internal::status(const DCMPixImageResponse* msg) {
  return *msg->status_;
}
void DCMPixImageResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DCMPixImageResponse::DCMPixImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  image_data_float_(arena),
  image_data_argb_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixImageResponse)
}
DCMPixImageResponse::DCMPixImageResponse(const DCMPixImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      image_data_float_(from.image_data_float_),
      image_data_argb_(from.image_data_argb_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_argb_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(is_argb_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixImageResponse)
}

void DCMPixImageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixImageResponse_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&is_argb_) -
      reinterpret_cast<char*>(&status_)) + sizeof(is_argb_));
}

DCMPixImageResponse::~DCMPixImageResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixImageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixImageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void DCMPixImageResponse::ArenaDtor(void* object) {
  DCMPixImageResponse* _this = reinterpret_cast< DCMPixImageResponse* >(object);
  (void)_this;
}
void DCMPixImageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixImageResponse& DCMPixImageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixImageResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_data_float_.Clear();
  image_data_argb_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_argb_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(is_argb_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixImageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_argb = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          is_argb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float image_data_float = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_image_data_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45) {
          _internal_add_image_data_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 image_data_argb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_image_data_argb(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_image_data_argb(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixImageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixImageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 rows = 2;
  if (this->rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rows(), target);
  }

  // int32 columns = 3;
  if (this->columns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_columns(), target);
  }

  // bool is_argb = 4;
  if (this->is_argb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_is_argb(), target);
  }

  // repeated float image_data_float = 5;
  if (this->_internal_image_data_float_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_image_data_float(), target);
  }

  // repeated int32 image_data_argb = 6;
  {
    int byte_size = _image_data_argb_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_image_data_argb(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixImageResponse)
  return target;
}

size_t DCMPixImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixImageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float image_data_float = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_image_data_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _image_data_float_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 image_data_argb = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->image_data_argb_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _image_data_argb_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 rows = 2;
  if (this->rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rows());
  }

  // int32 columns = 3;
  if (this->columns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_columns());
  }

  // bool is_argb = 4;
  if (this->is_argb() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixImageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixImageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixImageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixImageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixImageResponse)
    MergeFrom(*source);
  }
}

void DCMPixImageResponse::MergeFrom(const DCMPixImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_data_float_.MergeFrom(from.image_data_float_);
  image_data_argb_.MergeFrom(from.image_data_argb_);
  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (from.rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (from.columns() != 0) {
    _internal_set_columns(from._internal_columns());
  }
  if (from.is_argb() != 0) {
    _internal_set_is_argb(from._internal_is_argb());
  }
}

void DCMPixImageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixImageResponse::CopyFrom(const DCMPixImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixImageResponse::IsInitialized() const {
  return true;
}

void DCMPixImageResponse::InternalSwap(DCMPixImageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_data_float_.InternalSwap(&other->image_data_float_);
  image_data_argb_.InternalSwap(&other->image_data_argb_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixImageResponse, is_argb_)
      + sizeof(DCMPixImageResponse::is_argb_)
      - PROTOBUF_FIELD_OFFSET(DCMPixImageResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixImageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixGetMapFromROIResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixGetMapFromROIResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixGetMapFromROIResponse::_Internal::status(const DCMPixGetMapFromROIResponse* msg) {
  return *msg->status_;
}
void DCMPixGetMapFromROIResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DCMPixGetMapFromROIResponse::DCMPixGetMapFromROIResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixGetMapFromROIResponse)
}
DCMPixGetMapFromROIResponse::DCMPixGetMapFromROIResponse(const DCMPixGetMapFromROIResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      map_(from.map_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&columns_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(columns_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixGetMapFromROIResponse)
}

void DCMPixGetMapFromROIResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixGetMapFromROIResponse_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&columns_) -
      reinterpret_cast<char*>(&status_)) + sizeof(columns_));
}

DCMPixGetMapFromROIResponse::~DCMPixGetMapFromROIResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixGetMapFromROIResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixGetMapFromROIResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void DCMPixGetMapFromROIResponse::ArenaDtor(void* object) {
  DCMPixGetMapFromROIResponse* _this = reinterpret_cast< DCMPixGetMapFromROIResponse* >(object);
  (void)_this;
}
void DCMPixGetMapFromROIResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixGetMapFromROIResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixGetMapFromROIResponse& DCMPixGetMapFromROIResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixGetMapFromROIResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixGetMapFromROIResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixGetMapFromROIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&columns_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(columns_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixGetMapFromROIResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool map = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_map(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_map(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixGetMapFromROIResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixGetMapFromROIResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 rows = 2;
  if (this->rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rows(), target);
  }

  // int32 columns = 3;
  if (this->columns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_columns(), target);
  }

  // repeated bool map = 4;
  if (this->_internal_map_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_map(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixGetMapFromROIResponse)
  return target;
}

size_t DCMPixGetMapFromROIResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixGetMapFromROIResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool map = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_map_size());
    size_t data_size = 1UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _map_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 rows = 2;
  if (this->rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rows());
  }

  // int32 columns = 3;
  if (this->columns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_columns());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixGetMapFromROIResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixGetMapFromROIResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixGetMapFromROIResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixGetMapFromROIResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixGetMapFromROIResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixGetMapFromROIResponse)
    MergeFrom(*source);
  }
}

void DCMPixGetMapFromROIResponse::MergeFrom(const DCMPixGetMapFromROIResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixGetMapFromROIResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_.MergeFrom(from.map_);
  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (from.rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (from.columns() != 0) {
    _internal_set_columns(from._internal_columns());
  }
}

void DCMPixGetMapFromROIResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixGetMapFromROIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixGetMapFromROIResponse::CopyFrom(const DCMPixGetMapFromROIResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixGetMapFromROIResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixGetMapFromROIResponse::IsInitialized() const {
  return true;
}

void DCMPixGetMapFromROIResponse::InternalSwap(DCMPixGetMapFromROIResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  map_.InternalSwap(&other->map_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixGetMapFromROIResponse, columns_)
      + sizeof(DCMPixGetMapFromROIResponse::columns_)
      - PROTOBUF_FIELD_OFFSET(DCMPixGetMapFromROIResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixGetMapFromROIResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixShapeResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixShapeResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixShapeResponse::_Internal::status(const DCMPixShapeResponse* msg) {
  return *msg->status_;
}
void DCMPixShapeResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DCMPixShapeResponse::DCMPixShapeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixShapeResponse)
}
DCMPixShapeResponse::DCMPixShapeResponse(const DCMPixShapeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&rows_, &from.rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&columns_) -
    reinterpret_cast<char*>(&rows_)) + sizeof(columns_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixShapeResponse)
}

void DCMPixShapeResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixShapeResponse_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&columns_) -
      reinterpret_cast<char*>(&status_)) + sizeof(columns_));
}

DCMPixShapeResponse::~DCMPixShapeResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixShapeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixShapeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void DCMPixShapeResponse::ArenaDtor(void* object) {
  DCMPixShapeResponse* _this = reinterpret_cast< DCMPixShapeResponse* >(object);
  (void)_this;
}
void DCMPixShapeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixShapeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixShapeResponse& DCMPixShapeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixShapeResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixShapeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixShapeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&columns_) -
      reinterpret_cast<char*>(&rows_)) + sizeof(columns_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixShapeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          columns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixShapeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixShapeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // int32 rows = 2;
  if (this->rows() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rows(), target);
  }

  // int32 columns = 3;
  if (this->columns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_columns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixShapeResponse)
  return target;
}

size_t DCMPixShapeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixShapeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // int32 rows = 2;
  if (this->rows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rows());
  }

  // int32 columns = 3;
  if (this->columns() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_columns());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixShapeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixShapeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixShapeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixShapeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixShapeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixShapeResponse)
    MergeFrom(*source);
  }
}

void DCMPixShapeResponse::MergeFrom(const DCMPixShapeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixShapeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (from.rows() != 0) {
    _internal_set_rows(from._internal_rows());
  }
  if (from.columns() != 0) {
    _internal_set_columns(from._internal_columns());
  }
}

void DCMPixShapeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixShapeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixShapeResponse::CopyFrom(const DCMPixShapeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixShapeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixShapeResponse::IsInitialized() const {
  return true;
}

void DCMPixShapeResponse::InternalSwap(DCMPixShapeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixShapeResponse, columns_)
      + sizeof(DCMPixShapeResponse::columns_)
      - PROTOBUF_FIELD_OFFSET(DCMPixShapeResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixShapeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixSpacingResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixSpacingResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixSpacingResponse::_Internal::status(const DCMPixSpacingResponse* msg) {
  return *msg->status_;
}
void DCMPixSpacingResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DCMPixSpacingResponse::DCMPixSpacingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixSpacingResponse)
}
DCMPixSpacingResponse::DCMPixSpacingResponse(const DCMPixSpacingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&spacing_rows_, &from.spacing_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&spacing_columns_) -
    reinterpret_cast<char*>(&spacing_rows_)) + sizeof(spacing_columns_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixSpacingResponse)
}

void DCMPixSpacingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixSpacingResponse_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&spacing_columns_) -
      reinterpret_cast<char*>(&status_)) + sizeof(spacing_columns_));
}

DCMPixSpacingResponse::~DCMPixSpacingResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixSpacingResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixSpacingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void DCMPixSpacingResponse::ArenaDtor(void* object) {
  DCMPixSpacingResponse* _this = reinterpret_cast< DCMPixSpacingResponse* >(object);
  (void)_this;
}
void DCMPixSpacingResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixSpacingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixSpacingResponse& DCMPixSpacingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixSpacingResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixSpacingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixSpacingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&spacing_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&spacing_columns_) -
      reinterpret_cast<char*>(&spacing_rows_)) + sizeof(spacing_columns_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixSpacingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float spacing_rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          spacing_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float spacing_columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          spacing_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixSpacingResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixSpacingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // float spacing_rows = 2;
  if (!(this->spacing_rows() <= 0 && this->spacing_rows() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_spacing_rows(), target);
  }

  // float spacing_columns = 3;
  if (!(this->spacing_columns() <= 0 && this->spacing_columns() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_spacing_columns(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixSpacingResponse)
  return target;
}

size_t DCMPixSpacingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixSpacingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // float spacing_rows = 2;
  if (!(this->spacing_rows() <= 0 && this->spacing_rows() >= 0)) {
    total_size += 1 + 4;
  }

  // float spacing_columns = 3;
  if (!(this->spacing_columns() <= 0 && this->spacing_columns() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixSpacingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixSpacingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixSpacingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixSpacingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixSpacingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixSpacingResponse)
    MergeFrom(*source);
  }
}

void DCMPixSpacingResponse::MergeFrom(const DCMPixSpacingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixSpacingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (!(from.spacing_rows() <= 0 && from.spacing_rows() >= 0)) {
    _internal_set_spacing_rows(from._internal_spacing_rows());
  }
  if (!(from.spacing_columns() <= 0 && from.spacing_columns() >= 0)) {
    _internal_set_spacing_columns(from._internal_spacing_columns());
  }
}

void DCMPixSpacingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixSpacingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixSpacingResponse::CopyFrom(const DCMPixSpacingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixSpacingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixSpacingResponse::IsInitialized() const {
  return true;
}

void DCMPixSpacingResponse::InternalSwap(DCMPixSpacingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixSpacingResponse, spacing_columns_)
      + sizeof(DCMPixSpacingResponse::spacing_columns_)
      - PROTOBUF_FIELD_OFFSET(DCMPixSpacingResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixSpacingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixOriginResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixOriginResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixOriginResponse::_Internal::status(const DCMPixOriginResponse* msg) {
  return *msg->status_;
}
void DCMPixOriginResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DCMPixOriginResponse::DCMPixOriginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixOriginResponse)
}
DCMPixOriginResponse::DCMPixOriginResponse(const DCMPixOriginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  ::memcpy(&origin_rows_, &from.origin_rows_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_slices_) -
    reinterpret_cast<char*>(&origin_rows_)) + sizeof(origin_slices_));
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixOriginResponse)
}

void DCMPixOriginResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixOriginResponse_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&origin_slices_) -
      reinterpret_cast<char*>(&status_)) + sizeof(origin_slices_));
}

DCMPixOriginResponse::~DCMPixOriginResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixOriginResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixOriginResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void DCMPixOriginResponse::ArenaDtor(void* object) {
  DCMPixOriginResponse* _this = reinterpret_cast< DCMPixOriginResponse* >(object);
  (void)_this;
}
void DCMPixOriginResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixOriginResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixOriginResponse& DCMPixOriginResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixOriginResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixOriginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixOriginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  ::memset(&origin_rows_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_slices_) -
      reinterpret_cast<char*>(&origin_rows_)) + sizeof(origin_slices_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixOriginResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float origin_rows = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          origin_rows_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float origin_columns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          origin_columns_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float origin_slices = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          origin_slices_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixOriginResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixOriginResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // float origin_rows = 2;
  if (!(this->origin_rows() <= 0 && this->origin_rows() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_origin_rows(), target);
  }

  // float origin_columns = 3;
  if (!(this->origin_columns() <= 0 && this->origin_columns() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_origin_columns(), target);
  }

  // float origin_slices = 4;
  if (!(this->origin_slices() <= 0 && this->origin_slices() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_origin_slices(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixOriginResponse)
  return target;
}

size_t DCMPixOriginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixOriginResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // float origin_rows = 2;
  if (!(this->origin_rows() <= 0 && this->origin_rows() >= 0)) {
    total_size += 1 + 4;
  }

  // float origin_columns = 3;
  if (!(this->origin_columns() <= 0 && this->origin_columns() >= 0)) {
    total_size += 1 + 4;
  }

  // float origin_slices = 4;
  if (!(this->origin_slices() <= 0 && this->origin_slices() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixOriginResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixOriginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixOriginResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixOriginResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixOriginResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixOriginResponse)
    MergeFrom(*source);
  }
}

void DCMPixOriginResponse::MergeFrom(const DCMPixOriginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixOriginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (!(from.origin_rows() <= 0 && from.origin_rows() >= 0)) {
    _internal_set_origin_rows(from._internal_origin_rows());
  }
  if (!(from.origin_columns() <= 0 && from.origin_columns() >= 0)) {
    _internal_set_origin_columns(from._internal_origin_columns());
  }
  if (!(from.origin_slices() <= 0 && from.origin_slices() >= 0)) {
    _internal_set_origin_slices(from._internal_origin_slices());
  }
}

void DCMPixOriginResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixOriginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixOriginResponse::CopyFrom(const DCMPixOriginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixOriginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixOriginResponse::IsInitialized() const {
  return true;
}

void DCMPixOriginResponse::InternalSwap(DCMPixOriginResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixOriginResponse, origin_slices_)
      + sizeof(DCMPixOriginResponse::origin_slices_)
      - PROTOBUF_FIELD_OFFSET(DCMPixOriginResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixOriginResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixOrientationResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixOrientationResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixOrientationResponse::_Internal::status(const DCMPixOrientationResponse* msg) {
  return *msg->status_;
}
void DCMPixOrientationResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DCMPixOrientationResponse::DCMPixOrientationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  orientation_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixOrientationResponse)
}
DCMPixOrientationResponse::DCMPixOrientationResponse(const DCMPixOrientationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      orientation_(from.orientation_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixOrientationResponse)
}

void DCMPixOrientationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixOrientationResponse_dcmpix_2eproto.base);
  status_ = nullptr;
}

DCMPixOrientationResponse::~DCMPixOrientationResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixOrientationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixOrientationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void DCMPixOrientationResponse::ArenaDtor(void* object) {
  DCMPixOrientationResponse* _this = reinterpret_cast< DCMPixOrientationResponse* >(object);
  (void)_this;
}
void DCMPixOrientationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixOrientationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixOrientationResponse& DCMPixOrientationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixOrientationResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixOrientationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixOrientationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  orientation_.Clear();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixOrientationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float orientation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_orientation(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_orientation(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixOrientationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixOrientationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // repeated float orientation = 2;
  if (this->_internal_orientation_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixOrientationResponse)
  return target;
}

size_t DCMPixOrientationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixOrientationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float orientation = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_orientation_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _orientation_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixOrientationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixOrientationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixOrientationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixOrientationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixOrientationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixOrientationResponse)
    MergeFrom(*source);
  }
}

void DCMPixOrientationResponse::MergeFrom(const DCMPixOrientationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixOrientationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  orientation_.MergeFrom(from.orientation_);
  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
}

void DCMPixOrientationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixOrientationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixOrientationResponse::CopyFrom(const DCMPixOrientationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixOrientationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixOrientationResponse::IsInitialized() const {
  return true;
}

void DCMPixOrientationResponse::InternalSwap(DCMPixOrientationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  orientation_.InternalSwap(&other->orientation_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixOrientationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixSliceLocationResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixSliceLocationResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixSliceLocationResponse::_Internal::status(const DCMPixSliceLocationResponse* msg) {
  return *msg->status_;
}
void DCMPixSliceLocationResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DCMPixSliceLocationResponse::DCMPixSliceLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixSliceLocationResponse)
}
DCMPixSliceLocationResponse::DCMPixSliceLocationResponse(const DCMPixSliceLocationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  slice_location_ = from.slice_location_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixSliceLocationResponse)
}

void DCMPixSliceLocationResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixSliceLocationResponse_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&slice_location_) -
      reinterpret_cast<char*>(&status_)) + sizeof(slice_location_));
}

DCMPixSliceLocationResponse::~DCMPixSliceLocationResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixSliceLocationResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixSliceLocationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void DCMPixSliceLocationResponse::ArenaDtor(void* object) {
  DCMPixSliceLocationResponse* _this = reinterpret_cast< DCMPixSliceLocationResponse* >(object);
  (void)_this;
}
void DCMPixSliceLocationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixSliceLocationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixSliceLocationResponse& DCMPixSliceLocationResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixSliceLocationResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixSliceLocationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixSliceLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  slice_location_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixSliceLocationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float slice_location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          slice_location_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixSliceLocationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixSliceLocationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // float slice_location = 2;
  if (!(this->slice_location() <= 0 && this->slice_location() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_slice_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixSliceLocationResponse)
  return target;
}

size_t DCMPixSliceLocationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixSliceLocationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // float slice_location = 2;
  if (!(this->slice_location() <= 0 && this->slice_location() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixSliceLocationResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixSliceLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixSliceLocationResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixSliceLocationResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixSliceLocationResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixSliceLocationResponse)
    MergeFrom(*source);
  }
}

void DCMPixSliceLocationResponse::MergeFrom(const DCMPixSliceLocationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixSliceLocationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
  if (!(from.slice_location() <= 0 && from.slice_location() >= 0)) {
    _internal_set_slice_location(from._internal_slice_location());
  }
}

void DCMPixSliceLocationResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixSliceLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixSliceLocationResponse::CopyFrom(const DCMPixSliceLocationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixSliceLocationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixSliceLocationResponse::IsInitialized() const {
  return true;
}

void DCMPixSliceLocationResponse::InternalSwap(DCMPixSliceLocationResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixSliceLocationResponse, slice_location_)
      + sizeof(DCMPixSliceLocationResponse::slice_location_)
      - PROTOBUF_FIELD_OFFSET(DCMPixSliceLocationResponse, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixSliceLocationResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixSourceFileResponse::_Internal {
 public:
  static const ::osirixgrpc::Status& status(const DCMPixSourceFileResponse* msg);
};

const ::osirixgrpc::Status&
DCMPixSourceFileResponse::_Internal::status(const DCMPixSourceFileResponse* msg) {
  return *msg->status_;
}
void DCMPixSourceFileResponse::clear_status() {
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
DCMPixSourceFileResponse::DCMPixSourceFileResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixSourceFileResponse)
}
DCMPixSourceFileResponse::DCMPixSourceFileResponse(const DCMPixSourceFileResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_file().empty()) {
    source_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_file(), 
      GetArena());
  }
  if (from._internal_has_status()) {
    status_ = new ::osirixgrpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixSourceFileResponse)
}

void DCMPixSourceFileResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixSourceFileResponse_dcmpix_2eproto.base);
  source_file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

DCMPixSourceFileResponse::~DCMPixSourceFileResponse() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixSourceFileResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixSourceFileResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void DCMPixSourceFileResponse::ArenaDtor(void* object) {
  DCMPixSourceFileResponse* _this = reinterpret_cast< DCMPixSourceFileResponse* >(object);
  (void)_this;
}
void DCMPixSourceFileResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixSourceFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixSourceFileResponse& DCMPixSourceFileResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixSourceFileResponse_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixSourceFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixSourceFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_file_.ClearToEmpty();
  if (GetArena() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixSourceFileResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_file = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_file();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "osirixgrpc.DCMPixSourceFileResponse.source_file"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixSourceFileResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixSourceFileResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // string source_file = 2;
  if (this->source_file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_file().data(), static_cast<int>(this->_internal_source_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "osirixgrpc.DCMPixSourceFileResponse.source_file");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_file(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixSourceFileResponse)
  return target;
}

size_t DCMPixSourceFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixSourceFileResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_file = 2;
  if (this->source_file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_file());
  }

  // .osirixgrpc.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixSourceFileResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixSourceFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixSourceFileResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixSourceFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixSourceFileResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixSourceFileResponse)
    MergeFrom(*source);
  }
}

void DCMPixSourceFileResponse::MergeFrom(const DCMPixSourceFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixSourceFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_file().size() > 0) {
    _internal_set_source_file(from._internal_source_file());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::osirixgrpc::Status::MergeFrom(from._internal_status());
  }
}

void DCMPixSourceFileResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixSourceFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixSourceFileResponse::CopyFrom(const DCMPixSourceFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixSourceFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixSourceFileResponse::IsInitialized() const {
  return true;
}

void DCMPixSourceFileResponse::InternalSwap(DCMPixSourceFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_file_.Swap(&other->source_file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixSourceFileResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixConvertToRGBRequest::_Internal {
 public:
  static const ::osirixgrpc::DCMPix& pix(const DCMPixConvertToRGBRequest* msg);
};

const ::osirixgrpc::DCMPix&
DCMPixConvertToRGBRequest::_Internal::pix(const DCMPixConvertToRGBRequest* msg) {
  return *msg->pix_;
}
void DCMPixConvertToRGBRequest::clear_pix() {
  if (GetArena() == nullptr && pix_ != nullptr) {
    delete pix_;
  }
  pix_ = nullptr;
}
DCMPixConvertToRGBRequest::DCMPixConvertToRGBRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixConvertToRGBRequest)
}
DCMPixConvertToRGBRequest::DCMPixConvertToRGBRequest(const DCMPixConvertToRGBRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pix()) {
    pix_ = new ::osirixgrpc::DCMPix(*from.pix_);
  } else {
    pix_ = nullptr;
  }
  rgb_channel_ = from.rgb_channel_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixConvertToRGBRequest)
}

void DCMPixConvertToRGBRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixConvertToRGBRequest_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pix_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&rgb_channel_) -
      reinterpret_cast<char*>(&pix_)) + sizeof(rgb_channel_));
}

DCMPixConvertToRGBRequest::~DCMPixConvertToRGBRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixConvertToRGBRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixConvertToRGBRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pix_;
}

void DCMPixConvertToRGBRequest::ArenaDtor(void* object) {
  DCMPixConvertToRGBRequest* _this = reinterpret_cast< DCMPixConvertToRGBRequest* >(object);
  (void)_this;
}
void DCMPixConvertToRGBRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixConvertToRGBRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixConvertToRGBRequest& DCMPixConvertToRGBRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixConvertToRGBRequest_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixConvertToRGBRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixConvertToRGBRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pix_ != nullptr) {
    delete pix_;
  }
  pix_ = nullptr;
  rgb_channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixConvertToRGBRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.DCMPix pix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rgb_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rgb_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixConvertToRGBRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixConvertToRGBRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.DCMPix pix = 1;
  if (this->has_pix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pix(this), target, stream);
  }

  // int32 rgb_channel = 2;
  if (this->rgb_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rgb_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixConvertToRGBRequest)
  return target;
}

size_t DCMPixConvertToRGBRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixConvertToRGBRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.DCMPix pix = 1;
  if (this->has_pix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pix_);
  }

  // int32 rgb_channel = 2;
  if (this->rgb_channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rgb_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixConvertToRGBRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixConvertToRGBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixConvertToRGBRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixConvertToRGBRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixConvertToRGBRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixConvertToRGBRequest)
    MergeFrom(*source);
  }
}

void DCMPixConvertToRGBRequest::MergeFrom(const DCMPixConvertToRGBRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixConvertToRGBRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pix()) {
    _internal_mutable_pix()->::osirixgrpc::DCMPix::MergeFrom(from._internal_pix());
  }
  if (from.rgb_channel() != 0) {
    _internal_set_rgb_channel(from._internal_rgb_channel());
  }
}

void DCMPixConvertToRGBRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixConvertToRGBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixConvertToRGBRequest::CopyFrom(const DCMPixConvertToRGBRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixConvertToRGBRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixConvertToRGBRequest::IsInitialized() const {
  return true;
}

void DCMPixConvertToRGBRequest::InternalSwap(DCMPixConvertToRGBRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixConvertToRGBRequest, rgb_channel_)
      + sizeof(DCMPixConvertToRGBRequest::rgb_channel_)
      - PROTOBUF_FIELD_OFFSET(DCMPixConvertToRGBRequest, pix_)>(
          reinterpret_cast<char*>(&pix_),
          reinterpret_cast<char*>(&other->pix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixConvertToRGBRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixConvertToBWRequest::_Internal {
 public:
  static const ::osirixgrpc::DCMPix& pix(const DCMPixConvertToBWRequest* msg);
};

const ::osirixgrpc::DCMPix&
DCMPixConvertToBWRequest::_Internal::pix(const DCMPixConvertToBWRequest* msg) {
  return *msg->pix_;
}
void DCMPixConvertToBWRequest::clear_pix() {
  if (GetArena() == nullptr && pix_ != nullptr) {
    delete pix_;
  }
  pix_ = nullptr;
}
DCMPixConvertToBWRequest::DCMPixConvertToBWRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixConvertToBWRequest)
}
DCMPixConvertToBWRequest::DCMPixConvertToBWRequest(const DCMPixConvertToBWRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pix()) {
    pix_ = new ::osirixgrpc::DCMPix(*from.pix_);
  } else {
    pix_ = nullptr;
  }
  bw_channel_ = from.bw_channel_;
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixConvertToBWRequest)
}

void DCMPixConvertToBWRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixConvertToBWRequest_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pix_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&bw_channel_) -
      reinterpret_cast<char*>(&pix_)) + sizeof(bw_channel_));
}

DCMPixConvertToBWRequest::~DCMPixConvertToBWRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixConvertToBWRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixConvertToBWRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pix_;
}

void DCMPixConvertToBWRequest::ArenaDtor(void* object) {
  DCMPixConvertToBWRequest* _this = reinterpret_cast< DCMPixConvertToBWRequest* >(object);
  (void)_this;
}
void DCMPixConvertToBWRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixConvertToBWRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixConvertToBWRequest& DCMPixConvertToBWRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixConvertToBWRequest_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixConvertToBWRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixConvertToBWRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pix_ != nullptr) {
    delete pix_;
  }
  pix_ = nullptr;
  bw_channel_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixConvertToBWRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.DCMPix pix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 bw_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          bw_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixConvertToBWRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixConvertToBWRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.DCMPix pix = 1;
  if (this->has_pix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pix(this), target, stream);
  }

  // int32 bw_channel = 2;
  if (this->bw_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_bw_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixConvertToBWRequest)
  return target;
}

size_t DCMPixConvertToBWRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixConvertToBWRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.DCMPix pix = 1;
  if (this->has_pix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pix_);
  }

  // int32 bw_channel = 2;
  if (this->bw_channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_bw_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixConvertToBWRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixConvertToBWRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixConvertToBWRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixConvertToBWRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixConvertToBWRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixConvertToBWRequest)
    MergeFrom(*source);
  }
}

void DCMPixConvertToBWRequest::MergeFrom(const DCMPixConvertToBWRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixConvertToBWRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pix()) {
    _internal_mutable_pix()->::osirixgrpc::DCMPix::MergeFrom(from._internal_pix());
  }
  if (from.bw_channel() != 0) {
    _internal_set_bw_channel(from._internal_bw_channel());
  }
}

void DCMPixConvertToBWRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixConvertToBWRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixConvertToBWRequest::CopyFrom(const DCMPixConvertToBWRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixConvertToBWRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixConvertToBWRequest::IsInitialized() const {
  return true;
}

void DCMPixConvertToBWRequest::InternalSwap(DCMPixConvertToBWRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixConvertToBWRequest, bw_channel_)
      + sizeof(DCMPixConvertToBWRequest::bw_channel_)
      - PROTOBUF_FIELD_OFFSET(DCMPixConvertToBWRequest, pix_)>(
          reinterpret_cast<char*>(&pix_),
          reinterpret_cast<char*>(&other->pix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixConvertToBWRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixComputeROIRequest::_Internal {
 public:
  static const ::osirixgrpc::DCMPix& pix(const DCMPixComputeROIRequest* msg);
  static const ::osirixgrpc::ROI& roi(const DCMPixComputeROIRequest* msg);
};

const ::osirixgrpc::DCMPix&
DCMPixComputeROIRequest::_Internal::pix(const DCMPixComputeROIRequest* msg) {
  return *msg->pix_;
}
const ::osirixgrpc::ROI&
DCMPixComputeROIRequest::_Internal::roi(const DCMPixComputeROIRequest* msg) {
  return *msg->roi_;
}
void DCMPixComputeROIRequest::clear_pix() {
  if (GetArena() == nullptr && pix_ != nullptr) {
    delete pix_;
  }
  pix_ = nullptr;
}
void DCMPixComputeROIRequest::clear_roi() {
  if (GetArena() == nullptr && roi_ != nullptr) {
    delete roi_;
  }
  roi_ = nullptr;
}
DCMPixComputeROIRequest::DCMPixComputeROIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixComputeROIRequest)
}
DCMPixComputeROIRequest::DCMPixComputeROIRequest(const DCMPixComputeROIRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pix()) {
    pix_ = new ::osirixgrpc::DCMPix(*from.pix_);
  } else {
    pix_ = nullptr;
  }
  if (from._internal_has_roi()) {
    roi_ = new ::osirixgrpc::ROI(*from.roi_);
  } else {
    roi_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixComputeROIRequest)
}

void DCMPixComputeROIRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixComputeROIRequest_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pix_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&roi_) -
      reinterpret_cast<char*>(&pix_)) + sizeof(roi_));
}

DCMPixComputeROIRequest::~DCMPixComputeROIRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixComputeROIRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixComputeROIRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pix_;
  if (this != internal_default_instance()) delete roi_;
}

void DCMPixComputeROIRequest::ArenaDtor(void* object) {
  DCMPixComputeROIRequest* _this = reinterpret_cast< DCMPixComputeROIRequest* >(object);
  (void)_this;
}
void DCMPixComputeROIRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixComputeROIRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixComputeROIRequest& DCMPixComputeROIRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixComputeROIRequest_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixComputeROIRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixComputeROIRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pix_ != nullptr) {
    delete pix_;
  }
  pix_ = nullptr;
  if (GetArena() == nullptr && roi_ != nullptr) {
    delete roi_;
  }
  roi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixComputeROIRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.DCMPix pix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osirixgrpc.ROI roi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixComputeROIRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixComputeROIRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.DCMPix pix = 1;
  if (this->has_pix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pix(this), target, stream);
  }

  // .osirixgrpc.ROI roi = 2;
  if (this->has_roi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixComputeROIRequest)
  return target;
}

size_t DCMPixComputeROIRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixComputeROIRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.DCMPix pix = 1;
  if (this->has_pix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pix_);
  }

  // .osirixgrpc.ROI roi = 2;
  if (this->has_roi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roi_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixComputeROIRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixComputeROIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixComputeROIRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixComputeROIRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixComputeROIRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixComputeROIRequest)
    MergeFrom(*source);
  }
}

void DCMPixComputeROIRequest::MergeFrom(const DCMPixComputeROIRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixComputeROIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pix()) {
    _internal_mutable_pix()->::osirixgrpc::DCMPix::MergeFrom(from._internal_pix());
  }
  if (from.has_roi()) {
    _internal_mutable_roi()->::osirixgrpc::ROI::MergeFrom(from._internal_roi());
  }
}

void DCMPixComputeROIRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixComputeROIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixComputeROIRequest::CopyFrom(const DCMPixComputeROIRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixComputeROIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixComputeROIRequest::IsInitialized() const {
  return true;
}

void DCMPixComputeROIRequest::InternalSwap(DCMPixComputeROIRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixComputeROIRequest, roi_)
      + sizeof(DCMPixComputeROIRequest::roi_)
      - PROTOBUF_FIELD_OFFSET(DCMPixComputeROIRequest, pix_)>(
          reinterpret_cast<char*>(&pix_),
          reinterpret_cast<char*>(&other->pix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixComputeROIRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixROIValuesRequest::_Internal {
 public:
  static const ::osirixgrpc::DCMPix& pix(const DCMPixROIValuesRequest* msg);
  static const ::osirixgrpc::ROI& roi(const DCMPixROIValuesRequest* msg);
};

const ::osirixgrpc::DCMPix&
DCMPixROIValuesRequest::_Internal::pix(const DCMPixROIValuesRequest* msg) {
  return *msg->pix_;
}
const ::osirixgrpc::ROI&
DCMPixROIValuesRequest::_Internal::roi(const DCMPixROIValuesRequest* msg) {
  return *msg->roi_;
}
void DCMPixROIValuesRequest::clear_pix() {
  if (GetArena() == nullptr && pix_ != nullptr) {
    delete pix_;
  }
  pix_ = nullptr;
}
void DCMPixROIValuesRequest::clear_roi() {
  if (GetArena() == nullptr && roi_ != nullptr) {
    delete roi_;
  }
  roi_ = nullptr;
}
DCMPixROIValuesRequest::DCMPixROIValuesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixROIValuesRequest)
}
DCMPixROIValuesRequest::DCMPixROIValuesRequest(const DCMPixROIValuesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pix()) {
    pix_ = new ::osirixgrpc::DCMPix(*from.pix_);
  } else {
    pix_ = nullptr;
  }
  if (from._internal_has_roi()) {
    roi_ = new ::osirixgrpc::ROI(*from.roi_);
  } else {
    roi_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixROIValuesRequest)
}

void DCMPixROIValuesRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixROIValuesRequest_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pix_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&roi_) -
      reinterpret_cast<char*>(&pix_)) + sizeof(roi_));
}

DCMPixROIValuesRequest::~DCMPixROIValuesRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixROIValuesRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixROIValuesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pix_;
  if (this != internal_default_instance()) delete roi_;
}

void DCMPixROIValuesRequest::ArenaDtor(void* object) {
  DCMPixROIValuesRequest* _this = reinterpret_cast< DCMPixROIValuesRequest* >(object);
  (void)_this;
}
void DCMPixROIValuesRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixROIValuesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixROIValuesRequest& DCMPixROIValuesRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixROIValuesRequest_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixROIValuesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixROIValuesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pix_ != nullptr) {
    delete pix_;
  }
  pix_ = nullptr;
  if (GetArena() == nullptr && roi_ != nullptr) {
    delete roi_;
  }
  roi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixROIValuesRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.DCMPix pix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osirixgrpc.ROI roi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixROIValuesRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixROIValuesRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.DCMPix pix = 1;
  if (this->has_pix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pix(this), target, stream);
  }

  // .osirixgrpc.ROI roi = 2;
  if (this->has_roi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixROIValuesRequest)
  return target;
}

size_t DCMPixROIValuesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixROIValuesRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.DCMPix pix = 1;
  if (this->has_pix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pix_);
  }

  // .osirixgrpc.ROI roi = 2;
  if (this->has_roi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roi_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixROIValuesRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixROIValuesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixROIValuesRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixROIValuesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixROIValuesRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixROIValuesRequest)
    MergeFrom(*source);
  }
}

void DCMPixROIValuesRequest::MergeFrom(const DCMPixROIValuesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixROIValuesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pix()) {
    _internal_mutable_pix()->::osirixgrpc::DCMPix::MergeFrom(from._internal_pix());
  }
  if (from.has_roi()) {
    _internal_mutable_roi()->::osirixgrpc::ROI::MergeFrom(from._internal_roi());
  }
}

void DCMPixROIValuesRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixROIValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixROIValuesRequest::CopyFrom(const DCMPixROIValuesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixROIValuesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixROIValuesRequest::IsInitialized() const {
  return true;
}

void DCMPixROIValuesRequest::InternalSwap(DCMPixROIValuesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixROIValuesRequest, roi_)
      + sizeof(DCMPixROIValuesRequest::roi_)
      - PROTOBUF_FIELD_OFFSET(DCMPixROIValuesRequest, pix_)>(
          reinterpret_cast<char*>(&pix_),
          reinterpret_cast<char*>(&other->pix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixROIValuesRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixSetImageRequest::_Internal {
 public:
  static const ::osirixgrpc::DCMPix& pix(const DCMPixSetImageRequest* msg);
};

const ::osirixgrpc::DCMPix&
DCMPixSetImageRequest::_Internal::pix(const DCMPixSetImageRequest* msg) {
  return *msg->pix_;
}
void DCMPixSetImageRequest::clear_pix() {
  if (GetArena() == nullptr && pix_ != nullptr) {
    delete pix_;
  }
  pix_ = nullptr;
}
DCMPixSetImageRequest::DCMPixSetImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  image_data_float_(arena),
  image_data_argb_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixSetImageRequest)
}
DCMPixSetImageRequest::DCMPixSetImageRequest(const DCMPixSetImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      image_data_float_(from.image_data_float_),
      image_data_argb_(from.image_data_argb_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pix()) {
    pix_ = new ::osirixgrpc::DCMPix(*from.pix_);
  } else {
    pix_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixSetImageRequest)
}

void DCMPixSetImageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixSetImageRequest_dcmpix_2eproto.base);
  pix_ = nullptr;
}

DCMPixSetImageRequest::~DCMPixSetImageRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixSetImageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixSetImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pix_;
}

void DCMPixSetImageRequest::ArenaDtor(void* object) {
  DCMPixSetImageRequest* _this = reinterpret_cast< DCMPixSetImageRequest* >(object);
  (void)_this;
}
void DCMPixSetImageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixSetImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixSetImageRequest& DCMPixSetImageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixSetImageRequest_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixSetImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixSetImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_data_float_.Clear();
  image_data_argb_.Clear();
  if (GetArena() == nullptr && pix_ != nullptr) {
    delete pix_;
  }
  pix_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixSetImageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.DCMPix pix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float image_data_float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_image_data_float(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_image_data_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated int32 image_data_argb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_image_data_argb(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_image_data_argb(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixSetImageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixSetImageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.DCMPix pix = 1;
  if (this->has_pix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pix(this), target, stream);
  }

  // repeated float image_data_float = 2;
  if (this->_internal_image_data_float_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_image_data_float(), target);
  }

  // repeated int32 image_data_argb = 3;
  {
    int byte_size = _image_data_argb_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_image_data_argb(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixSetImageRequest)
  return target;
}

size_t DCMPixSetImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixSetImageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float image_data_float = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_image_data_float_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _image_data_float_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 image_data_argb = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->image_data_argb_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _image_data_argb_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .osirixgrpc.DCMPix pix = 1;
  if (this->has_pix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pix_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixSetImageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixSetImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixSetImageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixSetImageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixSetImageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixSetImageRequest)
    MergeFrom(*source);
  }
}

void DCMPixSetImageRequest::MergeFrom(const DCMPixSetImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixSetImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_data_float_.MergeFrom(from.image_data_float_);
  image_data_argb_.MergeFrom(from.image_data_argb_);
  if (from.has_pix()) {
    _internal_mutable_pix()->::osirixgrpc::DCMPix::MergeFrom(from._internal_pix());
  }
}

void DCMPixSetImageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixSetImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixSetImageRequest::CopyFrom(const DCMPixSetImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixSetImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixSetImageRequest::IsInitialized() const {
  return true;
}

void DCMPixSetImageRequest::InternalSwap(DCMPixSetImageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_data_float_.InternalSwap(&other->image_data_float_);
  image_data_argb_.InternalSwap(&other->image_data_argb_);
  swap(pix_, other->pix_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixSetImageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DCMPixGetMapFromROIRequest::_Internal {
 public:
  static const ::osirixgrpc::DCMPix& pix(const DCMPixGetMapFromROIRequest* msg);
  static const ::osirixgrpc::ROI& roi(const DCMPixGetMapFromROIRequest* msg);
};

const ::osirixgrpc::DCMPix&
DCMPixGetMapFromROIRequest::_Internal::pix(const DCMPixGetMapFromROIRequest* msg) {
  return *msg->pix_;
}
const ::osirixgrpc::ROI&
DCMPixGetMapFromROIRequest::_Internal::roi(const DCMPixGetMapFromROIRequest* msg) {
  return *msg->roi_;
}
void DCMPixGetMapFromROIRequest::clear_pix() {
  if (GetArena() == nullptr && pix_ != nullptr) {
    delete pix_;
  }
  pix_ = nullptr;
}
void DCMPixGetMapFromROIRequest::clear_roi() {
  if (GetArena() == nullptr && roi_ != nullptr) {
    delete roi_;
  }
  roi_ = nullptr;
}
DCMPixGetMapFromROIRequest::DCMPixGetMapFromROIRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:osirixgrpc.DCMPixGetMapFromROIRequest)
}
DCMPixGetMapFromROIRequest::DCMPixGetMapFromROIRequest(const DCMPixGetMapFromROIRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pix()) {
    pix_ = new ::osirixgrpc::DCMPix(*from.pix_);
  } else {
    pix_ = nullptr;
  }
  if (from._internal_has_roi()) {
    roi_ = new ::osirixgrpc::ROI(*from.roi_);
  } else {
    roi_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:osirixgrpc.DCMPixGetMapFromROIRequest)
}

void DCMPixGetMapFromROIRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DCMPixGetMapFromROIRequest_dcmpix_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&pix_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&roi_) -
      reinterpret_cast<char*>(&pix_)) + sizeof(roi_));
}

DCMPixGetMapFromROIRequest::~DCMPixGetMapFromROIRequest() {
  // @@protoc_insertion_point(destructor:osirixgrpc.DCMPixGetMapFromROIRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DCMPixGetMapFromROIRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete pix_;
  if (this != internal_default_instance()) delete roi_;
}

void DCMPixGetMapFromROIRequest::ArenaDtor(void* object) {
  DCMPixGetMapFromROIRequest* _this = reinterpret_cast< DCMPixGetMapFromROIRequest* >(object);
  (void)_this;
}
void DCMPixGetMapFromROIRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DCMPixGetMapFromROIRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DCMPixGetMapFromROIRequest& DCMPixGetMapFromROIRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DCMPixGetMapFromROIRequest_dcmpix_2eproto.base);
  return *internal_default_instance();
}


void DCMPixGetMapFromROIRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:osirixgrpc.DCMPixGetMapFromROIRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && pix_ != nullptr) {
    delete pix_;
  }
  pix_ = nullptr;
  if (GetArena() == nullptr && roi_ != nullptr) {
    delete roi_;
  }
  roi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DCMPixGetMapFromROIRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .osirixgrpc.DCMPix pix = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pix(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .osirixgrpc.ROI roi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_roi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DCMPixGetMapFromROIRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:osirixgrpc.DCMPixGetMapFromROIRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .osirixgrpc.DCMPix pix = 1;
  if (this->has_pix()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pix(this), target, stream);
  }

  // .osirixgrpc.ROI roi = 2;
  if (this->has_roi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::roi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:osirixgrpc.DCMPixGetMapFromROIRequest)
  return target;
}

size_t DCMPixGetMapFromROIRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:osirixgrpc.DCMPixGetMapFromROIRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .osirixgrpc.DCMPix pix = 1;
  if (this->has_pix()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pix_);
  }

  // .osirixgrpc.ROI roi = 2;
  if (this->has_roi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *roi_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DCMPixGetMapFromROIRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:osirixgrpc.DCMPixGetMapFromROIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DCMPixGetMapFromROIRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DCMPixGetMapFromROIRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:osirixgrpc.DCMPixGetMapFromROIRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:osirixgrpc.DCMPixGetMapFromROIRequest)
    MergeFrom(*source);
  }
}

void DCMPixGetMapFromROIRequest::MergeFrom(const DCMPixGetMapFromROIRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:osirixgrpc.DCMPixGetMapFromROIRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pix()) {
    _internal_mutable_pix()->::osirixgrpc::DCMPix::MergeFrom(from._internal_pix());
  }
  if (from.has_roi()) {
    _internal_mutable_roi()->::osirixgrpc::ROI::MergeFrom(from._internal_roi());
  }
}

void DCMPixGetMapFromROIRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:osirixgrpc.DCMPixGetMapFromROIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DCMPixGetMapFromROIRequest::CopyFrom(const DCMPixGetMapFromROIRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:osirixgrpc.DCMPixGetMapFromROIRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DCMPixGetMapFromROIRequest::IsInitialized() const {
  return true;
}

void DCMPixGetMapFromROIRequest::InternalSwap(DCMPixGetMapFromROIRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DCMPixGetMapFromROIRequest, roi_)
      + sizeof(DCMPixGetMapFromROIRequest::roi_)
      - PROTOBUF_FIELD_OFFSET(DCMPixGetMapFromROIRequest, pix_)>(
          reinterpret_cast<char*>(&pix_),
          reinterpret_cast<char*>(&other->pix_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DCMPixGetMapFromROIRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace osirixgrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixIsRGBResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixIsRGBResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixIsRGBResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixComputeROIResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixComputeROIResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixComputeROIResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixROIValuesResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixROIValuesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixROIValuesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixDicomImageResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixDicomImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixDicomImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixDicomSeriesResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixDicomSeriesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixDicomSeriesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixDicomStudyResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixDicomStudyResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixDicomStudyResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixImageResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixGetMapFromROIResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixGetMapFromROIResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixGetMapFromROIResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixShapeResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixShapeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixShapeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixSpacingResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixSpacingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixSpacingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixOriginResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixOriginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixOriginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixOrientationResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixOrientationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixOrientationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixSliceLocationResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixSliceLocationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixSliceLocationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixSourceFileResponse* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixSourceFileResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixSourceFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixConvertToRGBRequest* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixConvertToRGBRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixConvertToRGBRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixConvertToBWRequest* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixConvertToBWRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixConvertToBWRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixComputeROIRequest* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixComputeROIRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixComputeROIRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixROIValuesRequest* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixROIValuesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixROIValuesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixSetImageRequest* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixSetImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixSetImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::osirixgrpc::DCMPixGetMapFromROIRequest* Arena::CreateMaybeMessage< ::osirixgrpc::DCMPixGetMapFromROIRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::osirixgrpc::DCMPixGetMapFromROIRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
